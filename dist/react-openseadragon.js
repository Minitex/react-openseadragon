(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("react-openseadragon", [], factory);
	else if(typeof exports === 'object')
		exports["react-openseadragon"] = factory();
	else
		root["react-openseadragon"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	var parentHotUpdateCallback = this["webpackHotUpdatereact_openseadragon"];
/******/ 	this["webpackHotUpdatereact_openseadragon"] = 
/******/ 	function webpackHotUpdateCallback(chunkId, moreModules) { // eslint-disable-line no-unused-vars
/******/ 		hotAddUpdateChunk(chunkId, moreModules);
/******/ 		if(parentHotUpdateCallback) parentHotUpdateCallback(chunkId, moreModules);
/******/ 	}
/******/ 	
/******/ 	function hotDownloadUpdateChunk(chunkId) { // eslint-disable-line no-unused-vars
/******/ 		var head = document.getElementsByTagName("head")[0];
/******/ 		var script = document.createElement("script");
/******/ 		script.type = "text/javascript";
/******/ 		script.charset = "utf-8";
/******/ 		script.src = __webpack_require__.p + "" + chunkId + "." + hotCurrentHash + ".hot-update.js";
/******/ 		head.appendChild(script);
/******/ 	}
/******/ 	
/******/ 	function hotDownloadManifest(callback) { // eslint-disable-line no-unused-vars
/******/ 		if(typeof XMLHttpRequest === "undefined")
/******/ 			return callback(new Error("No browser support"));
/******/ 		try {
/******/ 			var request = new XMLHttpRequest();
/******/ 			var requestPath = __webpack_require__.p + "" + hotCurrentHash + ".hot-update.json";
/******/ 			request.open("GET", requestPath, true);
/******/ 			request.timeout = 10000;
/******/ 			request.send(null);
/******/ 		} catch(err) {
/******/ 			return callback(err);
/******/ 		}
/******/ 		request.onreadystatechange = function() {
/******/ 			if(request.readyState !== 4) return;
/******/ 			if(request.status === 0) {
/******/ 				// timeout
/******/ 				callback(new Error("Manifest request to " + requestPath + " timed out."));
/******/ 			} else if(request.status === 404) {
/******/ 				// no update available
/******/ 				callback();
/******/ 			} else if(request.status !== 200 && request.status !== 304) {
/******/ 				// other failure
/******/ 				callback(new Error("Manifest request to " + requestPath + " failed."));
/******/ 			} else {
/******/ 				// success
/******/ 				try {
/******/ 					var update = JSON.parse(request.responseText);
/******/ 				} catch(e) {
/******/ 					callback(e);
/******/ 					return;
/******/ 				}
/******/ 				callback(null, update);
/******/ 			}
/******/ 		};
/******/ 	}
/******/
/******/ 	
/******/ 	
/******/ 	// Copied from https://github.com/facebook/react/blob/bef45b0/src/shared/utils/canDefineProperty.js
/******/ 	var canDefineProperty = false;
/******/ 	try {
/******/ 		Object.defineProperty({}, "x", {
/******/ 			get: function() {}
/******/ 		});
/******/ 		canDefineProperty = true;
/******/ 	} catch(x) {
/******/ 		// IE will fail on defineProperty
/******/ 	}
/******/ 	
/******/ 	var hotApplyOnUpdate = true;
/******/ 	var hotCurrentHash = "27b4e364ddae8d773785"; // eslint-disable-line no-unused-vars
/******/ 	var hotCurrentModuleData = {};
/******/ 	var hotCurrentParents = []; // eslint-disable-line no-unused-vars
/******/ 	
/******/ 	function hotCreateRequire(moduleId) { // eslint-disable-line no-unused-vars
/******/ 		var me = installedModules[moduleId];
/******/ 		if(!me) return __webpack_require__;
/******/ 		var fn = function(request) {
/******/ 			if(me.hot.active) {
/******/ 				if(installedModules[request]) {
/******/ 					if(installedModules[request].parents.indexOf(moduleId) < 0)
/******/ 						installedModules[request].parents.push(moduleId);
/******/ 					if(me.children.indexOf(request) < 0)
/******/ 						me.children.push(request);
/******/ 				} else hotCurrentParents = [moduleId];
/******/ 			} else {
/******/ 				console.warn("[HMR] unexpected require(" + request + ") from disposed module " + moduleId);
/******/ 				hotCurrentParents = [];
/******/ 			}
/******/ 			return __webpack_require__(request);
/******/ 		};
/******/ 		for(var name in __webpack_require__) {
/******/ 			if(Object.prototype.hasOwnProperty.call(__webpack_require__, name)) {
/******/ 				if(canDefineProperty) {
/******/ 					Object.defineProperty(fn, name, (function(name) {
/******/ 						return {
/******/ 							configurable: true,
/******/ 							enumerable: true,
/******/ 							get: function() {
/******/ 								return __webpack_require__[name];
/******/ 							},
/******/ 							set: function(value) {
/******/ 								__webpack_require__[name] = value;
/******/ 							}
/******/ 						};
/******/ 					}(name)));
/******/ 				} else {
/******/ 					fn[name] = __webpack_require__[name];
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		function ensure(chunkId, callback) {
/******/ 			if(hotStatus === "ready")
/******/ 				hotSetStatus("prepare");
/******/ 			hotChunksLoading++;
/******/ 			__webpack_require__.e(chunkId, function() {
/******/ 				try {
/******/ 					callback.call(null, fn);
/******/ 				} finally {
/******/ 					finishChunkLoading();
/******/ 				}
/******/ 	
/******/ 				function finishChunkLoading() {
/******/ 					hotChunksLoading--;
/******/ 					if(hotStatus === "prepare") {
/******/ 						if(!hotWaitingFilesMap[chunkId]) {
/******/ 							hotEnsureUpdateChunk(chunkId);
/******/ 						}
/******/ 						if(hotChunksLoading === 0 && hotWaitingFiles === 0) {
/******/ 							hotUpdateDownloaded();
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 			});
/******/ 		}
/******/ 		if(canDefineProperty) {
/******/ 			Object.defineProperty(fn, "e", {
/******/ 				enumerable: true,
/******/ 				value: ensure
/******/ 			});
/******/ 		} else {
/******/ 			fn.e = ensure;
/******/ 		}
/******/ 		return fn;
/******/ 	}
/******/ 	
/******/ 	function hotCreateModule(moduleId) { // eslint-disable-line no-unused-vars
/******/ 		var hot = {
/******/ 			// private stuff
/******/ 			_acceptedDependencies: {},
/******/ 			_declinedDependencies: {},
/******/ 			_selfAccepted: false,
/******/ 			_selfDeclined: false,
/******/ 			_disposeHandlers: [],
/******/ 	
/******/ 			// Module API
/******/ 			active: true,
/******/ 			accept: function(dep, callback) {
/******/ 				if(typeof dep === "undefined")
/******/ 					hot._selfAccepted = true;
/******/ 				else if(typeof dep === "function")
/******/ 					hot._selfAccepted = dep;
/******/ 				else if(typeof dep === "object")
/******/ 					for(var i = 0; i < dep.length; i++)
/******/ 						hot._acceptedDependencies[dep[i]] = callback;
/******/ 				else
/******/ 					hot._acceptedDependencies[dep] = callback;
/******/ 			},
/******/ 			decline: function(dep) {
/******/ 				if(typeof dep === "undefined")
/******/ 					hot._selfDeclined = true;
/******/ 				else if(typeof dep === "number")
/******/ 					hot._declinedDependencies[dep] = true;
/******/ 				else
/******/ 					for(var i = 0; i < dep.length; i++)
/******/ 						hot._declinedDependencies[dep[i]] = true;
/******/ 			},
/******/ 			dispose: function(callback) {
/******/ 				hot._disposeHandlers.push(callback);
/******/ 			},
/******/ 			addDisposeHandler: function(callback) {
/******/ 				hot._disposeHandlers.push(callback);
/******/ 			},
/******/ 			removeDisposeHandler: function(callback) {
/******/ 				var idx = hot._disposeHandlers.indexOf(callback);
/******/ 				if(idx >= 0) hot._disposeHandlers.splice(idx, 1);
/******/ 			},
/******/ 	
/******/ 			// Management API
/******/ 			check: hotCheck,
/******/ 			apply: hotApply,
/******/ 			status: function(l) {
/******/ 				if(!l) return hotStatus;
/******/ 				hotStatusHandlers.push(l);
/******/ 			},
/******/ 			addStatusHandler: function(l) {
/******/ 				hotStatusHandlers.push(l);
/******/ 			},
/******/ 			removeStatusHandler: function(l) {
/******/ 				var idx = hotStatusHandlers.indexOf(l);
/******/ 				if(idx >= 0) hotStatusHandlers.splice(idx, 1);
/******/ 			},
/******/ 	
/******/ 			//inherit from previous dispose call
/******/ 			data: hotCurrentModuleData[moduleId]
/******/ 		};
/******/ 		return hot;
/******/ 	}
/******/ 	
/******/ 	var hotStatusHandlers = [];
/******/ 	var hotStatus = "idle";
/******/ 	
/******/ 	function hotSetStatus(newStatus) {
/******/ 		hotStatus = newStatus;
/******/ 		for(var i = 0; i < hotStatusHandlers.length; i++)
/******/ 			hotStatusHandlers[i].call(null, newStatus);
/******/ 	}
/******/ 	
/******/ 	// while downloading
/******/ 	var hotWaitingFiles = 0;
/******/ 	var hotChunksLoading = 0;
/******/ 	var hotWaitingFilesMap = {};
/******/ 	var hotRequestedFilesMap = {};
/******/ 	var hotAvailibleFilesMap = {};
/******/ 	var hotCallback;
/******/ 	
/******/ 	// The update info
/******/ 	var hotUpdate, hotUpdateNewHash;
/******/ 	
/******/ 	function toModuleId(id) {
/******/ 		var isNumber = (+id) + "" === id;
/******/ 		return isNumber ? +id : id;
/******/ 	}
/******/ 	
/******/ 	function hotCheck(apply, callback) {
/******/ 		if(hotStatus !== "idle") throw new Error("check() is only allowed in idle status");
/******/ 		if(typeof apply === "function") {
/******/ 			hotApplyOnUpdate = false;
/******/ 			callback = apply;
/******/ 		} else {
/******/ 			hotApplyOnUpdate = apply;
/******/ 			callback = callback || function(err) {
/******/ 				if(err) throw err;
/******/ 			};
/******/ 		}
/******/ 		hotSetStatus("check");
/******/ 		hotDownloadManifest(function(err, update) {
/******/ 			if(err) return callback(err);
/******/ 			if(!update) {
/******/ 				hotSetStatus("idle");
/******/ 				callback(null, null);
/******/ 				return;
/******/ 			}
/******/ 	
/******/ 			hotRequestedFilesMap = {};
/******/ 			hotAvailibleFilesMap = {};
/******/ 			hotWaitingFilesMap = {};
/******/ 			for(var i = 0; i < update.c.length; i++)
/******/ 				hotAvailibleFilesMap[update.c[i]] = true;
/******/ 			hotUpdateNewHash = update.h;
/******/ 	
/******/ 			hotSetStatus("prepare");
/******/ 			hotCallback = callback;
/******/ 			hotUpdate = {};
/******/ 			var chunkId = 0;
/******/ 			{ // eslint-disable-line no-lone-blocks
/******/ 				/*globals chunkId */
/******/ 				hotEnsureUpdateChunk(chunkId);
/******/ 			}
/******/ 			if(hotStatus === "prepare" && hotChunksLoading === 0 && hotWaitingFiles === 0) {
/******/ 				hotUpdateDownloaded();
/******/ 			}
/******/ 		});
/******/ 	}
/******/ 	
/******/ 	function hotAddUpdateChunk(chunkId, moreModules) { // eslint-disable-line no-unused-vars
/******/ 		if(!hotAvailibleFilesMap[chunkId] || !hotRequestedFilesMap[chunkId])
/******/ 			return;
/******/ 		hotRequestedFilesMap[chunkId] = false;
/******/ 		for(var moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				hotUpdate[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(--hotWaitingFiles === 0 && hotChunksLoading === 0) {
/******/ 			hotUpdateDownloaded();
/******/ 		}
/******/ 	}
/******/ 	
/******/ 	function hotEnsureUpdateChunk(chunkId) {
/******/ 		if(!hotAvailibleFilesMap[chunkId]) {
/******/ 			hotWaitingFilesMap[chunkId] = true;
/******/ 		} else {
/******/ 			hotRequestedFilesMap[chunkId] = true;
/******/ 			hotWaitingFiles++;
/******/ 			hotDownloadUpdateChunk(chunkId);
/******/ 		}
/******/ 	}
/******/ 	
/******/ 	function hotUpdateDownloaded() {
/******/ 		hotSetStatus("ready");
/******/ 		var callback = hotCallback;
/******/ 		hotCallback = null;
/******/ 		if(!callback) return;
/******/ 		if(hotApplyOnUpdate) {
/******/ 			hotApply(hotApplyOnUpdate, callback);
/******/ 		} else {
/******/ 			var outdatedModules = [];
/******/ 			for(var id in hotUpdate) {
/******/ 				if(Object.prototype.hasOwnProperty.call(hotUpdate, id)) {
/******/ 					outdatedModules.push(toModuleId(id));
/******/ 				}
/******/ 			}
/******/ 			callback(null, outdatedModules);
/******/ 		}
/******/ 	}
/******/ 	
/******/ 	function hotApply(options, callback) {
/******/ 		if(hotStatus !== "ready") throw new Error("apply() is only allowed in ready status");
/******/ 		if(typeof options === "function") {
/******/ 			callback = options;
/******/ 			options = {};
/******/ 		} else if(options && typeof options === "object") {
/******/ 			callback = callback || function(err) {
/******/ 				if(err) throw err;
/******/ 			};
/******/ 		} else {
/******/ 			options = {};
/******/ 			callback = callback || function(err) {
/******/ 				if(err) throw err;
/******/ 			};
/******/ 		}
/******/ 	
/******/ 		function getAffectedStuff(module) {
/******/ 			var outdatedModules = [module];
/******/ 			var outdatedDependencies = {};
/******/ 	
/******/ 			var queue = outdatedModules.slice();
/******/ 			while(queue.length > 0) {
/******/ 				var moduleId = queue.pop();
/******/ 				var module = installedModules[moduleId];
/******/ 				if(!module || module.hot._selfAccepted)
/******/ 					continue;
/******/ 				if(module.hot._selfDeclined) {
/******/ 					return new Error("Aborted because of self decline: " + moduleId);
/******/ 				}
/******/ 				if(moduleId === 0) {
/******/ 					return;
/******/ 				}
/******/ 				for(var i = 0; i < module.parents.length; i++) {
/******/ 					var parentId = module.parents[i];
/******/ 					var parent = installedModules[parentId];
/******/ 					if(parent.hot._declinedDependencies[moduleId]) {
/******/ 						return new Error("Aborted because of declined dependency: " + moduleId + " in " + parentId);
/******/ 					}
/******/ 					if(outdatedModules.indexOf(parentId) >= 0) continue;
/******/ 					if(parent.hot._acceptedDependencies[moduleId]) {
/******/ 						if(!outdatedDependencies[parentId])
/******/ 							outdatedDependencies[parentId] = [];
/******/ 						addAllToSet(outdatedDependencies[parentId], [moduleId]);
/******/ 						continue;
/******/ 					}
/******/ 					delete outdatedDependencies[parentId];
/******/ 					outdatedModules.push(parentId);
/******/ 					queue.push(parentId);
/******/ 				}
/******/ 			}
/******/ 	
/******/ 			return [outdatedModules, outdatedDependencies];
/******/ 		}
/******/ 	
/******/ 		function addAllToSet(a, b) {
/******/ 			for(var i = 0; i < b.length; i++) {
/******/ 				var item = b[i];
/******/ 				if(a.indexOf(item) < 0)
/******/ 					a.push(item);
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// at begin all updates modules are outdated
/******/ 		// the "outdated" status can propagate to parents if they don't accept the children
/******/ 		var outdatedDependencies = {};
/******/ 		var outdatedModules = [];
/******/ 		var appliedUpdate = {};
/******/ 		for(var id in hotUpdate) {
/******/ 			if(Object.prototype.hasOwnProperty.call(hotUpdate, id)) {
/******/ 				var moduleId = toModuleId(id);
/******/ 				var result = getAffectedStuff(moduleId);
/******/ 				if(!result) {
/******/ 					if(options.ignoreUnaccepted)
/******/ 						continue;
/******/ 					hotSetStatus("abort");
/******/ 					return callback(new Error("Aborted because " + moduleId + " is not accepted"));
/******/ 				}
/******/ 				if(result instanceof Error) {
/******/ 					hotSetStatus("abort");
/******/ 					return callback(result);
/******/ 				}
/******/ 				appliedUpdate[moduleId] = hotUpdate[moduleId];
/******/ 				addAllToSet(outdatedModules, result[0]);
/******/ 				for(var moduleId in result[1]) {
/******/ 					if(Object.prototype.hasOwnProperty.call(result[1], moduleId)) {
/******/ 						if(!outdatedDependencies[moduleId])
/******/ 							outdatedDependencies[moduleId] = [];
/******/ 						addAllToSet(outdatedDependencies[moduleId], result[1][moduleId]);
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// Store self accepted outdated modules to require them later by the module system
/******/ 		var outdatedSelfAcceptedModules = [];
/******/ 		for(var i = 0; i < outdatedModules.length; i++) {
/******/ 			var moduleId = outdatedModules[i];
/******/ 			if(installedModules[moduleId] && installedModules[moduleId].hot._selfAccepted)
/******/ 				outdatedSelfAcceptedModules.push({
/******/ 					module: moduleId,
/******/ 					errorHandler: installedModules[moduleId].hot._selfAccepted
/******/ 				});
/******/ 		}
/******/ 	
/******/ 		// Now in "dispose" phase
/******/ 		hotSetStatus("dispose");
/******/ 		var queue = outdatedModules.slice();
/******/ 		while(queue.length > 0) {
/******/ 			var moduleId = queue.pop();
/******/ 			var module = installedModules[moduleId];
/******/ 			if(!module) continue;
/******/ 	
/******/ 			var data = {};
/******/ 	
/******/ 			// Call dispose handlers
/******/ 			var disposeHandlers = module.hot._disposeHandlers;
/******/ 			for(var j = 0; j < disposeHandlers.length; j++) {
/******/ 				var cb = disposeHandlers[j];
/******/ 				cb(data);
/******/ 			}
/******/ 			hotCurrentModuleData[moduleId] = data;
/******/ 	
/******/ 			// disable module (this disables requires from this module)
/******/ 			module.hot.active = false;
/******/ 	
/******/ 			// remove module from cache
/******/ 			delete installedModules[moduleId];
/******/ 	
/******/ 			// remove "parents" references from all children
/******/ 			for(var j = 0; j < module.children.length; j++) {
/******/ 				var child = installedModules[module.children[j]];
/******/ 				if(!child) continue;
/******/ 				var idx = child.parents.indexOf(moduleId);
/******/ 				if(idx >= 0) {
/******/ 					child.parents.splice(idx, 1);
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// remove outdated dependency from module children
/******/ 		for(var moduleId in outdatedDependencies) {
/******/ 			if(Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)) {
/******/ 				var module = installedModules[moduleId];
/******/ 				var moduleOutdatedDependencies = outdatedDependencies[moduleId];
/******/ 				for(var j = 0; j < moduleOutdatedDependencies.length; j++) {
/******/ 					var dependency = moduleOutdatedDependencies[j];
/******/ 					var idx = module.children.indexOf(dependency);
/******/ 					if(idx >= 0) module.children.splice(idx, 1);
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// Not in "apply" phase
/******/ 		hotSetStatus("apply");
/******/ 	
/******/ 		hotCurrentHash = hotUpdateNewHash;
/******/ 	
/******/ 		// insert new code
/******/ 		for(var moduleId in appliedUpdate) {
/******/ 			if(Object.prototype.hasOwnProperty.call(appliedUpdate, moduleId)) {
/******/ 				modules[moduleId] = appliedUpdate[moduleId];
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// call accept handlers
/******/ 		var error = null;
/******/ 		for(var moduleId in outdatedDependencies) {
/******/ 			if(Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)) {
/******/ 				var module = installedModules[moduleId];
/******/ 				var moduleOutdatedDependencies = outdatedDependencies[moduleId];
/******/ 				var callbacks = [];
/******/ 				for(var i = 0; i < moduleOutdatedDependencies.length; i++) {
/******/ 					var dependency = moduleOutdatedDependencies[i];
/******/ 					var cb = module.hot._acceptedDependencies[dependency];
/******/ 					if(callbacks.indexOf(cb) >= 0) continue;
/******/ 					callbacks.push(cb);
/******/ 				}
/******/ 				for(var i = 0; i < callbacks.length; i++) {
/******/ 					var cb = callbacks[i];
/******/ 					try {
/******/ 						cb(outdatedDependencies);
/******/ 					} catch(err) {
/******/ 						if(!error)
/******/ 							error = err;
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// Load self accepted modules
/******/ 		for(var i = 0; i < outdatedSelfAcceptedModules.length; i++) {
/******/ 			var item = outdatedSelfAcceptedModules[i];
/******/ 			var moduleId = item.module;
/******/ 			hotCurrentParents = [moduleId];
/******/ 			try {
/******/ 				__webpack_require__(moduleId);
/******/ 			} catch(err) {
/******/ 				if(typeof item.errorHandler === "function") {
/******/ 					try {
/******/ 						item.errorHandler(err);
/******/ 					} catch(err) {
/******/ 						if(!error)
/******/ 							error = err;
/******/ 					}
/******/ 				} else if(!error)
/******/ 					error = err;
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// handle errors in accept handlers and self accepted module load
/******/ 		if(error) {
/******/ 			hotSetStatus("fail");
/******/ 			return callback(error);
/******/ 		}
/******/ 	
/******/ 		hotSetStatus("idle");
/******/ 		callback(null, outdatedModules);
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			hot: hotCreateModule(moduleId),
/******/ 			parents: hotCurrentParents,
/******/ 			children: []
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, hotCreateRequire(moduleId));
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// __webpack_hash__
/******/ 	__webpack_require__.h = function() { return hotCurrentHash; };
/******/
/******/ 	// Load entry module and return exports
/******/ 	return hotCreateRequire(0)(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {/* REACT HOT LOADER */ if (true) { (function () { var ReactHotAPI = __webpack_require__(2), RootInstanceProvider = __webpack_require__(10), ReactMount = __webpack_require__(12), React = __webpack_require__(98); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {
	
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(98);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactOpenseadragonRoute = __webpack_require__(99);
	
	var _reactOpenseadragonRoute2 = _interopRequireDefault(_reactOpenseadragonRoute);
	
	var _reactRouter = __webpack_require__(157);
	
	var _reactRouter2 = _interopRequireDefault(_reactRouter);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = (0, _reactRouter2.default)(_reactOpenseadragonRoute2.default);
	
	/* REACT HOT LOADER */ }).call(this); } finally { if (true) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = __webpack_require__(101); if (makeExportsHot(module, __webpack_require__(98))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "react-openseadragon.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)(module)))

/***/ },
/* 1 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(3);

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var makePatchReactClass = __webpack_require__(4);
	
	/**
	 * Returns a function that, when invoked, patches a React class with a new
	 * version of itself. To patch different classes, pass different IDs.
	 */
	module.exports = function makeMakeHot(getRootInstances, React) {
	  if (typeof getRootInstances !== 'function') {
	    throw new Error('Expected getRootInstances to be a function.');
	  }
	
	  var patchers = {};
	
	  return function makeHot(NextClass, persistentId) {
	    persistentId = persistentId || NextClass.displayName || NextClass.name;
	
	    if (!persistentId) {
	      console.error(
	        'Hot reload is disabled for one of your types. To enable it, pass a ' +
	        'string uniquely identifying this class within this current module ' +
	        'as a second parameter to makeHot.'
	      );
	      return NextClass;
	    }
	
	    if (!patchers[persistentId]) {
	      patchers[persistentId] = makePatchReactClass(getRootInstances, React);
	    }
	
	    var patchReactClass = patchers[persistentId];
	    return patchReactClass(NextClass);
	  };
	};

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var makeAssimilatePrototype = __webpack_require__(5),
	    requestForceUpdateAll = __webpack_require__(6);
	
	function hasNonStubTypeProperty(ReactClass) {
	  if (!ReactClass.hasOwnProperty('type')) {
	    return false;
	  }
	
	  var descriptor = Object.getOwnPropertyDescriptor(ReactClass, 'type');
	  if (typeof descriptor.get === 'function') {
	    return false;
	  }
	
	  return true;
	}
	
	function getPrototype(ReactClass) {
	  var prototype = ReactClass.prototype,
	      seemsLegit = prototype && typeof prototype.render === 'function';
	
	  if (!seemsLegit && hasNonStubTypeProperty(ReactClass)) {
	    prototype = ReactClass.type.prototype;
	  }
	
	  return prototype;
	}
	
	/**
	 * Returns a function that will patch React class with new versions of itself
	 * on subsequent invocations. Both legacy and ES6 style classes are supported.
	 */
	module.exports = function makePatchReactClass(getRootInstances, React) {
	  var assimilatePrototype = makeAssimilatePrototype(),
	      FirstClass = null;
	
	  return function patchReactClass(NextClass) {
	    var nextPrototype = getPrototype(NextClass);
	    assimilatePrototype(nextPrototype);
	
	    if (FirstClass) {
	      requestForceUpdateAll(getRootInstances, React);
	    }
	
	    return FirstClass || (FirstClass = NextClass);
	  };
	};

/***/ },
/* 5 */
/***/ function(module, exports) {

	'use strict';
	
	/**
	 * Returns a function that establishes the first prototype passed to it
	 * as the "source of truth" and patches its methods on subsequent invocations,
	 * also patching current and previous prototypes to forward calls to it.
	 */
	module.exports = function makeAssimilatePrototype() {
	  var storedPrototype,
	      knownPrototypes = [];
	
	  function wrapMethod(key) {
	    return function () {
	      if (storedPrototype[key]) {
	        return storedPrototype[key].apply(this, arguments);
	      }
	    };
	  }
	
	  function patchProperty(proto, key) {
	    proto[key] = storedPrototype[key];
	
	    if (typeof proto[key] !== 'function' ||
	      key === 'type' ||
	      key === 'constructor') {
	      return;
	    }
	
	    proto[key] = wrapMethod(key);
	
	    if (storedPrototype[key].isReactClassApproved) {
	      proto[key].isReactClassApproved = storedPrototype[key].isReactClassApproved;
	    }
	
	    if (proto.__reactAutoBindMap && proto.__reactAutoBindMap[key]) {
	      proto.__reactAutoBindMap[key] = proto[key];
	    }
	  }
	
	  function updateStoredPrototype(freshPrototype) {
	    storedPrototype = {};
	
	    Object.getOwnPropertyNames(freshPrototype).forEach(function (key) {
	      storedPrototype[key] = freshPrototype[key];
	    });
	  }
	
	  function reconcileWithStoredPrototypes(freshPrototype) {
	    knownPrototypes.push(freshPrototype);
	    knownPrototypes.forEach(function (proto) {
	      Object.getOwnPropertyNames(storedPrototype).forEach(function (key) {
	        patchProperty(proto, key);
	      });
	    });
	  }
	
	  return function assimilatePrototype(freshPrototype) {
	    if (Object.prototype.hasOwnProperty.call(freshPrototype, '__isAssimilatedByReactHotAPI')) {
	      return;
	    }
	
	    updateStoredPrototype(freshPrototype);
	    reconcileWithStoredPrototypes(freshPrototype);
	    freshPrototype.__isAssimilatedByReactHotAPI = true;
	  };
	};

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	var deepForceUpdate = __webpack_require__(7);
	
	var isRequestPending = false;
	
	module.exports = function requestForceUpdateAll(getRootInstances, React) {
	  if (isRequestPending) {
	    return;
	  }
	
	  /**
	   * Forces deep re-render of all mounted React components.
	   * Hats off to Omar Skalli (@Chetane) for suggesting this approach:
	   * https://gist.github.com/Chetane/9a230a9fdcdca21a4e29
	   */
	  function forceUpdateAll() {
	    isRequestPending = false;
	
	    var rootInstances = getRootInstances(),
	        rootInstance;
	
	    for (var key in rootInstances) {
	      if (rootInstances.hasOwnProperty(key)) {
	        rootInstance = rootInstances[key];
	
	        // `|| rootInstance` for React 0.12 and earlier
	        rootInstance = rootInstance._reactInternalInstance || rootInstance;
	        deepForceUpdate(rootInstance, React);
	      }
	    }
	  }
	
	  setTimeout(forceUpdateAll);
	};


/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var bindAutoBindMethods = __webpack_require__(8);
	var traverseRenderedChildren = __webpack_require__(9);
	
	function setPendingForceUpdate(internalInstance) {
	  if (internalInstance._pendingForceUpdate === false) {
	    internalInstance._pendingForceUpdate = true;
	  }
	}
	
	function forceUpdateIfPending(internalInstance, React) {
	  if (internalInstance._pendingForceUpdate === true) {
	    // `|| internalInstance` for React 0.12 and earlier
	    var instance = internalInstance._instance || internalInstance;
	
	    if (instance.forceUpdate) {
	      instance.forceUpdate();
	    } else if (React && React.Component) {
	      React.Component.prototype.forceUpdate.call(instance);
	    }
	  }
	}
	
	/**
	 * Updates a React component recursively, so even if children define funky
	 * `shouldComponentUpdate`, they are forced to re-render.
	 * Makes sure that any newly added methods are properly auto-bound.
	 */
	function deepForceUpdate(internalInstance, React) {
	  traverseRenderedChildren(internalInstance, bindAutoBindMethods);
	  traverseRenderedChildren(internalInstance, setPendingForceUpdate);
	  traverseRenderedChildren(internalInstance, forceUpdateIfPending, React);
	}
	
	module.exports = deepForceUpdate;


/***/ },
/* 8 */
/***/ function(module, exports) {

	'use strict';
	
	function bindAutoBindMethod(component, method) {
	  var boundMethod = method.bind(component);
	
	  boundMethod.__reactBoundContext = component;
	  boundMethod.__reactBoundMethod = method;
	  boundMethod.__reactBoundArguments = null;
	
	  var componentName = component.constructor.displayName,
	      _bind = boundMethod.bind;
	
	  boundMethod.bind = function (newThis) {
	    var args = Array.prototype.slice.call(arguments, 1);
	    if (newThis !== component && newThis !== null) {
	      console.warn(
	        'bind(): React component methods may only be bound to the ' +
	        'component instance. See ' + componentName
	      );
	    } else if (!args.length) {
	      console.warn(
	        'bind(): You are binding a component method to the component. ' +
	        'React does this for you automatically in a high-performance ' +
	        'way, so you can safely remove this call. See ' + componentName
	      );
	      return boundMethod;
	    }
	
	    var reboundMethod = _bind.apply(boundMethod, arguments);
	    reboundMethod.__reactBoundContext = component;
	    reboundMethod.__reactBoundMethod = method;
	    reboundMethod.__reactBoundArguments = args;
	
	    return reboundMethod;
	  };
	
	  return boundMethod;
	}
	
	/**
	 * Performs auto-binding similar to how React does it.
	 * Skips already auto-bound methods.
	 * Based on https://github.com/facebook/react/blob/b264372e2b3ad0b0c0c0cc95a2f383e4a1325c3d/src/classic/class/ReactClass.js#L639-L705
	 */
	module.exports = function bindAutoBindMethods(internalInstance) {
	  var component = typeof internalInstance.getPublicInstance === 'function' ?
	    internalInstance.getPublicInstance() :
	    internalInstance;
	
	  if (!component) {
	    // React 0.14 stateless component has no instance
	    return;
	  }
	
	  for (var autoBindKey in component.__reactAutoBindMap) {
	    if (!component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
	      continue;
	    }
	
	    // Skip already bound methods
	    if (component.hasOwnProperty(autoBindKey) &&
	        component[autoBindKey].__reactBoundContext === component) {
	      continue;
	    }
	
	    var method = component.__reactAutoBindMap[autoBindKey];
	    component[autoBindKey] = bindAutoBindMethod(component, method);
	  }
	};

/***/ },
/* 9 */
/***/ function(module, exports) {

	'use strict';
	
	function traverseRenderedChildren(internalInstance, callback, argument) {
	  callback(internalInstance, argument);
	
	  if (internalInstance._renderedComponent) {
	    traverseRenderedChildren(
	      internalInstance._renderedComponent,
	      callback,
	      argument
	    );
	  } else {
	    for (var key in internalInstance._renderedChildren) {
	      traverseRenderedChildren(
	        internalInstance._renderedChildren[key],
	        callback,
	        argument
	      );
	    }
	  }
	}
	
	module.exports = traverseRenderedChildren;


/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var getRootInstancesFromReactMount = __webpack_require__(11);
	
	var injectedProvider = null,
	    didWarn = false;
	
	function warnOnce() {
	  if (!didWarn) {
	    console.warn(
	      'It appears that React Hot Loader isn\'t configured correctly. ' +
	      'If you\'re using NPM, make sure your dependencies don\'t drag duplicate React distributions into their node_modules and that require("react") corresponds to the React instance you render your app with.',
	      'If you\'re using a precompiled version of React, see https://github.com/gaearon/react-hot-loader/tree/master/docs#usage-with-external-react for integration instructions.'
	    );
	  }
	
	  didWarn = true;
	}
	
	var RootInstanceProvider = {
	  injection: {
	    injectProvider: function (provider) {
	      injectedProvider = provider;
	    }
	  },
	
	  getRootInstances: function (ReactMount) {
	    if (injectedProvider) {
	      return injectedProvider.getRootInstances();
	    }
	
	    var instances = ReactMount && getRootInstancesFromReactMount(ReactMount) || [];
	    if (!Object.keys(instances).length) {
	      warnOnce();
	    }
	
	    return instances;
	  }
	};
	
	module.exports = RootInstanceProvider;

/***/ },
/* 11 */
/***/ function(module, exports) {

	'use strict';
	
	function getRootInstancesFromReactMount(ReactMount) {
	  return ReactMount._instancesByReactRootID || ReactMount._instancesByContainerID || [];
	}
	
	module.exports = getRootInstancesFromReactMount;

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(14);
	
	var DOMLazyTree = __webpack_require__(15);
	var DOMProperty = __webpack_require__(22);
	var React = __webpack_require__(24);
	var ReactBrowserEventEmitter = __webpack_require__(52);
	var ReactCurrentOwner = __webpack_require__(30);
	var ReactDOMComponentTree = __webpack_require__(63);
	var ReactDOMContainerInfo = __webpack_require__(65);
	var ReactDOMFeatureFlags = __webpack_require__(67);
	var ReactFeatureFlags = __webpack_require__(68);
	var ReactInstanceMap = __webpack_require__(69);
	var ReactInstrumentation = __webpack_require__(70);
	var ReactMarkupChecksum = __webpack_require__(76);
	var ReactReconciler = __webpack_require__(78);
	var ReactUpdateQueue = __webpack_require__(81);
	var ReactUpdates = __webpack_require__(82);
	
	var emptyObject = __webpack_require__(40);
	var instantiateReactComponent = __webpack_require__(86);
	var invariant = __webpack_require__(23);
	var setInnerHTML = __webpack_require__(17);
	var shouldUpdateReactComponent = __webpack_require__(94);
	var warning = __webpack_require__(31);
	
	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var ROOT_ATTR_NAME = DOMProperty.ROOT_ATTRIBUTE_NAME;
	
	var ELEMENT_NODE_TYPE = 1;
	var DOC_NODE_TYPE = 9;
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;
	
	var instancesByReactRootID = {};
	
	/**
	 * Finds the index of the first character
	 * that's not common between the two given strings.
	 *
	 * @return {number} the index of the character where the strings diverge
	 */
	function firstDifferenceIndex(string1, string2) {
	  var minLen = Math.min(string1.length, string2.length);
	  for (var i = 0; i < minLen; i++) {
	    if (string1.charAt(i) !== string2.charAt(i)) {
	      return i;
	    }
	  }
	  return string1.length === string2.length ? -1 : minLen;
	}
	
	/**
	 * @param {DOMElement|DOMDocument} container DOM element that may contain
	 * a React component
	 * @return {?*} DOM element that may have the reactRoot ID, or null.
	 */
	function getReactRootElementInContainer(container) {
	  if (!container) {
	    return null;
	  }
	
	  if (container.nodeType === DOC_NODE_TYPE) {
	    return container.documentElement;
	  } else {
	    return container.firstChild;
	  }
	}
	
	function internalGetID(node) {
	  // If node is something like a window, document, or text node, none of
	  // which support attributes or a .getAttribute method, gracefully return
	  // the empty string, as if the attribute were missing.
	  return node.getAttribute && node.getAttribute(ATTR_NAME) || '';
	}
	
	/**
	 * Mounts this component and inserts it into the DOM.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {ReactReconcileTransaction} transaction
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function mountComponentIntoNode(wrapperInstance, container, transaction, shouldReuseMarkup, context) {
	  var markerName;
	  if (ReactFeatureFlags.logTopLevelRenders) {
	    var wrappedElement = wrapperInstance._currentElement.props.child;
	    var type = wrappedElement.type;
	    markerName = 'React mount: ' + (typeof type === 'string' ? type : type.displayName || type.name);
	    console.time(markerName);
	  }
	
	  var markup = ReactReconciler.mountComponent(wrapperInstance, transaction, null, ReactDOMContainerInfo(wrapperInstance, container), context, 0 /* parentDebugID */
	  );
	
	  if (markerName) {
	    console.timeEnd(markerName);
	  }
	
	  wrapperInstance._renderedComponent._topLevelWrapper = wrapperInstance;
	  ReactMount._mountImageIntoNode(markup, container, wrapperInstance, shouldReuseMarkup, transaction);
	}
	
	/**
	 * Batched mount.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function batchedMountComponentIntoNode(componentInstance, container, shouldReuseMarkup, context) {
	  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(
	  /* useCreateElement */
	  !shouldReuseMarkup && ReactDOMFeatureFlags.useCreateElement);
	  transaction.perform(mountComponentIntoNode, null, componentInstance, container, transaction, shouldReuseMarkup, context);
	  ReactUpdates.ReactReconcileTransaction.release(transaction);
	}
	
	/**
	 * Unmounts a component and removes it from the DOM.
	 *
	 * @param {ReactComponent} instance React component instance.
	 * @param {DOMElement} container DOM element to unmount from.
	 * @final
	 * @internal
	 * @see {ReactMount.unmountComponentAtNode}
	 */
	function unmountComponentFromNode(instance, container, safely) {
	  if (process.env.NODE_ENV !== 'production') {
	    ReactInstrumentation.debugTool.onBeginFlush();
	  }
	  ReactReconciler.unmountComponent(instance, safely);
	  if (process.env.NODE_ENV !== 'production') {
	    ReactInstrumentation.debugTool.onEndFlush();
	  }
	
	  if (container.nodeType === DOC_NODE_TYPE) {
	    container = container.documentElement;
	  }
	
	  // http://jsperf.com/emptying-a-node
	  while (container.lastChild) {
	    container.removeChild(container.lastChild);
	  }
	}
	
	/**
	 * True if the supplied DOM node has a direct React-rendered child that is
	 * not a React root element. Useful for warning in `render`,
	 * `unmountComponentAtNode`, etc.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM element contains a direct child that was
	 * rendered by React but is not a root element.
	 * @internal
	 */
	function hasNonRootReactChild(container) {
	  var rootEl = getReactRootElementInContainer(container);
	  if (rootEl) {
	    var inst = ReactDOMComponentTree.getInstanceFromNode(rootEl);
	    return !!(inst && inst._hostParent);
	  }
	}
	
	/**
	 * True if the supplied DOM node is a React DOM element and
	 * it has been rendered by another copy of React.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM has been rendered by another copy of React
	 * @internal
	 */
	function nodeIsRenderedByOtherInstance(container) {
	  var rootEl = getReactRootElementInContainer(container);
	  return !!(rootEl && isReactNode(rootEl) && !ReactDOMComponentTree.getInstanceFromNode(rootEl));
	}
	
	/**
	 * True if the supplied DOM node is a valid node element.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM is a valid DOM node.
	 * @internal
	 */
	function isValidContainer(node) {
	  return !!(node && (node.nodeType === ELEMENT_NODE_TYPE || node.nodeType === DOC_NODE_TYPE || node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE));
	}
	
	/**
	 * True if the supplied DOM node is a valid React node element.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM is a valid React DOM node.
	 * @internal
	 */
	function isReactNode(node) {
	  return isValidContainer(node) && (node.hasAttribute(ROOT_ATTR_NAME) || node.hasAttribute(ATTR_NAME));
	}
	
	function getHostRootInstanceInContainer(container) {
	  var rootEl = getReactRootElementInContainer(container);
	  var prevHostInstance = rootEl && ReactDOMComponentTree.getInstanceFromNode(rootEl);
	  return prevHostInstance && !prevHostInstance._hostParent ? prevHostInstance : null;
	}
	
	function getTopLevelWrapperInContainer(container) {
	  var root = getHostRootInstanceInContainer(container);
	  return root ? root._hostContainerInfo._topLevelWrapper : null;
	}
	
	/**
	 * Temporary (?) hack so that we can store all top-level pending updates on
	 * composites instead of having to worry about different types of components
	 * here.
	 */
	var topLevelRootCounter = 1;
	var TopLevelWrapper = function () {
	  this.rootID = topLevelRootCounter++;
	};
	TopLevelWrapper.prototype.isReactComponent = {};
	if (process.env.NODE_ENV !== 'production') {
	  TopLevelWrapper.displayName = 'TopLevelWrapper';
	}
	TopLevelWrapper.prototype.render = function () {
	  return this.props.child;
	};
	TopLevelWrapper.isReactTopLevelWrapper = true;
	
	/**
	 * Mounting is the process of initializing a React component by creating its
	 * representative DOM elements and inserting them into a supplied `container`.
	 * Any prior content inside `container` is destroyed in the process.
	 *
	 *   ReactMount.render(
	 *     component,
	 *     document.getElementById('container')
	 *   );
	 *
	 *   <div id="container">                   <-- Supplied `container`.
	 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
	 *       // ...                                 component.
	 *     </div>
	 *   </div>
	 *
	 * Inside of `container`, the first element rendered is the "reactRoot".
	 */
	var ReactMount = {
	
	  TopLevelWrapper: TopLevelWrapper,
	
	  /**
	   * Used by devtools. The keys are not important.
	   */
	  _instancesByReactRootID: instancesByReactRootID,
	
	  /**
	   * This is a hook provided to support rendering React components while
	   * ensuring that the apparent scroll position of its `container` does not
	   * change.
	   *
	   * @param {DOMElement} container The `container` being rendered into.
	   * @param {function} renderCallback This must be called once to do the render.
	   */
	  scrollMonitor: function (container, renderCallback) {
	    renderCallback();
	  },
	
	  /**
	   * Take a component that's already mounted into the DOM and replace its props
	   * @param {ReactComponent} prevComponent component instance already in the DOM
	   * @param {ReactElement} nextElement component instance to render
	   * @param {DOMElement} container container to render into
	   * @param {?function} callback function triggered on completion
	   */
	  _updateRootComponent: function (prevComponent, nextElement, nextContext, container, callback) {
	    ReactMount.scrollMonitor(container, function () {
	      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement, nextContext);
	      if (callback) {
	        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
	      }
	    });
	
	    return prevComponent;
	  },
	
	  /**
	   * Render a new component into the DOM. Hooked by hooks!
	   *
	   * @param {ReactElement} nextElement element to render
	   * @param {DOMElement} container container to render into
	   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
	   * @return {ReactComponent} nextComponent
	   */
	  _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case.
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;
	
	    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : _prodInvariant('37') : void 0;
	
	    ReactBrowserEventEmitter.ensureScrollValueMonitoring();
	    var componentInstance = instantiateReactComponent(nextElement, false);
	
	    // The initial render is synchronous but any updates that happen during
	    // rendering, in componentWillMount or componentDidMount, will be batched
	    // according to the current batching strategy.
	
	    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, container, shouldReuseMarkup, context);
	
	    var wrapperID = componentInstance._instance.rootID;
	    instancesByReactRootID[wrapperID] = componentInstance;
	
	    return componentInstance;
	  },
	
	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    !(parentComponent != null && ReactInstanceMap.has(parentComponent)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : _prodInvariant('38') : void 0;
	    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
	  },
	
	  _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    ReactUpdateQueue.validateCallback(callback, 'ReactDOM.render');
	    !React.isValidElement(nextElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? ' Instead of passing a string like \'div\', pass ' + 'React.createElement(\'div\') or <div />.' : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' :
	    // Check if it quacks like an element
	    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : _prodInvariant('39', typeof nextElement === 'string' ? ' Instead of passing a string like \'div\', pass ' + 'React.createElement(\'div\') or <div />.' : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' : nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : void 0;
	
	    process.env.NODE_ENV !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : void 0;
	
	    var nextWrappedElement = React.createElement(TopLevelWrapper, { child: nextElement });
	
	    var nextContext;
	    if (parentComponent) {
	      var parentInst = ReactInstanceMap.get(parentComponent);
	      nextContext = parentInst._processChildContext(parentInst._context);
	    } else {
	      nextContext = emptyObject;
	    }
	
	    var prevComponent = getTopLevelWrapperInContainer(container);
	
	    if (prevComponent) {
	      var prevWrappedElement = prevComponent._currentElement;
	      var prevElement = prevWrappedElement.props.child;
	      if (shouldUpdateReactComponent(prevElement, nextElement)) {
	        var publicInst = prevComponent._renderedComponent.getPublicInstance();
	        var updatedCallback = callback && function () {
	          callback.call(publicInst);
	        };
	        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, nextContext, container, updatedCallback);
	        return publicInst;
	      } else {
	        ReactMount.unmountComponentAtNode(container);
	      }
	    }
	
	    var reactRootElement = getReactRootElementInContainer(container);
	    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
	    var containerHasNonRootReactChild = hasNonRootReactChild(container);
	
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : void 0;
	
	      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
	        var rootElementSibling = reactRootElement;
	        while (rootElementSibling) {
	          if (internalGetID(rootElementSibling)) {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : void 0;
	            break;
	          }
	          rootElementSibling = rootElementSibling.nextSibling;
	        }
	      }
	    }
	
	    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
	    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, nextContext)._renderedComponent.getPublicInstance();
	    if (callback) {
	      callback.call(component);
	    }
	    return component;
	  },
	
	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.render
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  render: function (nextElement, container, callback) {
	    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
	  },
	
	  /**
	   * Unmounts and destroys the React component rendered in the `container`.
	   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.unmountcomponentatnode
	   *
	   * @param {DOMElement} container DOM element containing a React component.
	   * @return {boolean} True if a component was found in and unmounted from
	   *                   `container`
	   */
	  unmountComponentAtNode: function (container) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case. (Strictly speaking, unmounting won't cause a
	    // render but we still don't expect to be in a render call here.)
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;
	
	    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : _prodInvariant('40') : void 0;
	
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!nodeIsRenderedByOtherInstance(container), 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by another copy of React.') : void 0;
	    }
	
	    var prevComponent = getTopLevelWrapperInContainer(container);
	    if (!prevComponent) {
	      // Check if the node being unmounted was rendered by React, but isn't a
	      // root node.
	      var containerHasNonRootReactChild = hasNonRootReactChild(container);
	
	      // Check if the container itself is a React root node.
	      var isContainerReactRoot = container.nodeType === 1 && container.hasAttribute(ROOT_ATTR_NAME);
	
	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : void 0;
	      }
	
	      return false;
	    }
	    delete instancesByReactRootID[prevComponent._instance.rootID];
	    ReactUpdates.batchedUpdates(unmountComponentFromNode, prevComponent, container, false);
	    return true;
	  },
	
	  _mountImageIntoNode: function (markup, container, instance, shouldReuseMarkup, transaction) {
	    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : _prodInvariant('41') : void 0;
	
	    if (shouldReuseMarkup) {
	      var rootElement = getReactRootElementInContainer(container);
	      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
	        ReactDOMComponentTree.precacheNode(instance, rootElement);
	        return;
	      } else {
	        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	
	        var rootMarkup = rootElement.outerHTML;
	        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);
	
	        var normalizedMarkup = markup;
	        if (process.env.NODE_ENV !== 'production') {
	          // because rootMarkup is retrieved from the DOM, various normalizations
	          // will have occurred which will not be present in `markup`. Here,
	          // insert markup into a <div> or <iframe> depending on the container
	          // type to perform the same normalizations before comparing.
	          var normalizer;
	          if (container.nodeType === ELEMENT_NODE_TYPE) {
	            normalizer = document.createElement('div');
	            normalizer.innerHTML = markup;
	            normalizedMarkup = normalizer.innerHTML;
	          } else {
	            normalizer = document.createElement('iframe');
	            document.body.appendChild(normalizer);
	            normalizer.contentDocument.write(markup);
	            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
	            document.body.removeChild(normalizer);
	          }
	        }
	
	        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
	        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);
	
	        !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document using server rendering but the checksum was invalid. This usually means you rendered a different component type or props on the client from the one on the server, or your render() methods are impure. React cannot handle this case due to cross-browser quirks by rendering at the document root. You should look for environment dependent code in your components and ensure the props are the same client and server side:\n%s', difference) : _prodInvariant('42', difference) : void 0;
	
	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : void 0;
	        }
	      }
	    }
	
	    !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document but you didn\'t use server rendering. We can\'t do this without using server rendering due to cross-browser quirks. See ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('43') : void 0;
	
	    if (transaction.useCreateElement) {
	      while (container.lastChild) {
	        container.removeChild(container.lastChild);
	      }
	      DOMLazyTree.insertTreeBefore(container, markup, null);
	    } else {
	      setInnerHTML(container, markup);
	      ReactDOMComponentTree.precacheNode(instance, container.firstChild);
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      var hostNode = ReactDOMComponentTree.getInstanceFromNode(container.firstChild);
	      if (hostNode._debugID !== 0) {
	        ReactInstrumentation.debugTool.onHostOperation({
	          instanceID: hostNode._debugID,
	          type: 'mount',
	          payload: markup.toString()
	        });
	      }
	    }
	  }
	};
	
	module.exports = ReactMount;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 13 */
/***/ function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};
	
	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.
	
	var cachedSetTimeout;
	var cachedClearTimeout;
	
	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }
	
	
	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }
	
	
	
	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;
	
	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}
	
	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;
	
	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}
	
	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};
	
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};
	
	function noop() {}
	
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	
	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};
	
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 14 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	'use strict';
	
	/**
	 * WARNING: DO NOT manually require this module.
	 * This is a replacement for `invariant(...)` used by the error code system
	 * and will _only_ be required by the corresponding babel pass.
	 * It always throws.
	 */
	
	function reactProdInvariant(code) {
	  var argCount = arguments.length - 1;
	
	  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;
	
	  for (var argIdx = 0; argIdx < argCount; argIdx++) {
	    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
	  }
	
	  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';
	
	  var error = new Error(message);
	  error.name = 'Invariant Violation';
	  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame
	
	  throw error;
	}
	
	module.exports = reactProdInvariant;

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMNamespaces = __webpack_require__(16);
	var setInnerHTML = __webpack_require__(17);
	
	var createMicrosoftUnsafeLocalFunction = __webpack_require__(19);
	var setTextContent = __webpack_require__(20);
	
	var ELEMENT_NODE_TYPE = 1;
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;
	
	/**
	 * In IE (8-11) and Edge, appending nodes with no children is dramatically
	 * faster than appending a full subtree, so we essentially queue up the
	 * .appendChild calls here and apply them so each node is added to its parent
	 * before any children are added.
	 *
	 * In other browsers, doing so is slower or neutral compared to the other order
	 * (in Firefox, twice as slow) so we only do this inversion in IE.
	 *
	 * See https://github.com/spicyj/innerhtml-vs-createelement-vs-clonenode.
	 */
	var enableLazy = typeof document !== 'undefined' && typeof document.documentMode === 'number' || typeof navigator !== 'undefined' && typeof navigator.userAgent === 'string' && /\bEdge\/\d/.test(navigator.userAgent);
	
	function insertTreeChildren(tree) {
	  if (!enableLazy) {
	    return;
	  }
	  var node = tree.node;
	  var children = tree.children;
	  if (children.length) {
	    for (var i = 0; i < children.length; i++) {
	      insertTreeBefore(node, children[i], null);
	    }
	  } else if (tree.html != null) {
	    setInnerHTML(node, tree.html);
	  } else if (tree.text != null) {
	    setTextContent(node, tree.text);
	  }
	}
	
	var insertTreeBefore = createMicrosoftUnsafeLocalFunction(function (parentNode, tree, referenceNode) {
	  // DocumentFragments aren't actually part of the DOM after insertion so
	  // appending children won't update the DOM. We need to ensure the fragment
	  // is properly populated first, breaking out of our lazy approach for just
	  // this level. Also, some <object> plugins (like Flash Player) will read
	  // <param> nodes immediately upon insertion into the DOM, so <object>
	  // must also be populated prior to insertion into the DOM.
	  if (tree.node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE || tree.node.nodeType === ELEMENT_NODE_TYPE && tree.node.nodeName.toLowerCase() === 'object' && (tree.node.namespaceURI == null || tree.node.namespaceURI === DOMNamespaces.html)) {
	    insertTreeChildren(tree);
	    parentNode.insertBefore(tree.node, referenceNode);
	  } else {
	    parentNode.insertBefore(tree.node, referenceNode);
	    insertTreeChildren(tree);
	  }
	});
	
	function replaceChildWithTree(oldNode, newTree) {
	  oldNode.parentNode.replaceChild(newTree.node, oldNode);
	  insertTreeChildren(newTree);
	}
	
	function queueChild(parentTree, childTree) {
	  if (enableLazy) {
	    parentTree.children.push(childTree);
	  } else {
	    parentTree.node.appendChild(childTree.node);
	  }
	}
	
	function queueHTML(tree, html) {
	  if (enableLazy) {
	    tree.html = html;
	  } else {
	    setInnerHTML(tree.node, html);
	  }
	}
	
	function queueText(tree, text) {
	  if (enableLazy) {
	    tree.text = text;
	  } else {
	    setTextContent(tree.node, text);
	  }
	}
	
	function toString() {
	  return this.node.nodeName;
	}
	
	function DOMLazyTree(node) {
	  return {
	    node: node,
	    children: [],
	    html: null,
	    text: null,
	    toString: toString
	  };
	}
	
	DOMLazyTree.insertTreeBefore = insertTreeBefore;
	DOMLazyTree.replaceChildWithTree = replaceChildWithTree;
	DOMLazyTree.queueChild = queueChild;
	DOMLazyTree.queueHTML = queueHTML;
	DOMLazyTree.queueText = queueText;
	
	module.exports = DOMLazyTree;

/***/ },
/* 16 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMNamespaces = {
	  html: 'http://www.w3.org/1999/xhtml',
	  mathml: 'http://www.w3.org/1998/Math/MathML',
	  svg: 'http://www.w3.org/2000/svg'
	};
	
	module.exports = DOMNamespaces;

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(18);
	var DOMNamespaces = __webpack_require__(16);
	
	var WHITESPACE_TEST = /^[ \r\n\t\f]/;
	var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;
	
	var createMicrosoftUnsafeLocalFunction = __webpack_require__(19);
	
	// SVG temp container for IE lacking innerHTML
	var reusableSVGContainer;
	
	/**
	 * Set the innerHTML property of a node, ensuring that whitespace is preserved
	 * even in IE8.
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */
	var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
	  // IE does not have innerHTML for SVG nodes, so instead we inject the
	  // new markup in a temp node and then move the child nodes across into
	  // the target node
	  if (node.namespaceURI === DOMNamespaces.svg && !('innerHTML' in node)) {
	    reusableSVGContainer = reusableSVGContainer || document.createElement('div');
	    reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';
	    var svgNode = reusableSVGContainer.firstChild;
	    while (svgNode.firstChild) {
	      node.appendChild(svgNode.firstChild);
	    }
	  } else {
	    node.innerHTML = html;
	  }
	});
	
	if (ExecutionEnvironment.canUseDOM) {
	  // IE8: When updating a just created node with innerHTML only leading
	  // whitespace is removed. When updating an existing node with innerHTML
	  // whitespace in root TextNodes is also collapsed.
	  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html
	
	  // Feature detection; only IE8 is known to behave improperly like this.
	  var testElement = document.createElement('div');
	  testElement.innerHTML = ' ';
	  if (testElement.innerHTML === '') {
	    setInnerHTML = function (node, html) {
	      // Magic theory: IE8 supposedly differentiates between added and updated
	      // nodes when processing innerHTML, innerHTML on updated nodes suffers
	      // from worse whitespace behavior. Re-adding a node like this triggers
	      // the initial and more favorable whitespace behavior.
	      // TODO: What to do on a detached node?
	      if (node.parentNode) {
	        node.parentNode.replaceChild(node, node);
	      }
	
	      // We also implement a workaround for non-visible tags disappearing into
	      // thin air on IE8, this only happens if there is no visible text
	      // in-front of the non-visible tags. Piggyback on the whitespace fix
	      // and simply check if any non-visible tags appear in the source.
	      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
	        // Recover leading whitespace by temporarily prepending any character.
	        // \uFEFF has the potential advantage of being zero-width/invisible.
	        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
	        // in hopes that this is preserved even if "\uFEFF" is transformed to
	        // the actual Unicode character (by Babel, for example).
	        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
	        node.innerHTML = String.fromCharCode(0xFEFF) + html;
	
	        // deleteData leaves an empty `TextNode` which offsets the index of all
	        // children. Definitely want to avoid this.
	        var textNode = node.firstChild;
	        if (textNode.data.length === 1) {
	          node.removeChild(textNode);
	        } else {
	          textNode.deleteData(0, 1);
	        }
	      } else {
	        node.innerHTML = html;
	      }
	    };
	  }
	  testElement = null;
	}
	
	module.exports = setInnerHTML;

/***/ },
/* 18 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
	
	/**
	 * Simple, lightweight module assisting with the detection and context of
	 * Worker. Helps avoid circular dependencies and allows code to reason about
	 * whether or not they are in a Worker, even if they never include the main
	 * `ReactWorker` dependency.
	 */
	var ExecutionEnvironment = {
	
	  canUseDOM: canUseDOM,
	
	  canUseWorkers: typeof Worker !== 'undefined',
	
	  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),
	
	  canUseViewport: canUseDOM && !!window.screen,
	
	  isInWorker: !canUseDOM // For now, this is true - might change in the future.
	
	};
	
	module.exports = ExecutionEnvironment;

/***/ },
/* 19 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	/* globals MSApp */
	
	'use strict';
	
	/**
	 * Create a function which has 'unsafe' privileges (required by windows8 apps)
	 */
	
	var createMicrosoftUnsafeLocalFunction = function (func) {
	  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
	    return function (arg0, arg1, arg2, arg3) {
	      MSApp.execUnsafeLocalFunction(function () {
	        return func(arg0, arg1, arg2, arg3);
	      });
	    };
	  } else {
	    return func;
	  }
	};
	
	module.exports = createMicrosoftUnsafeLocalFunction;

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(18);
	var escapeTextContentForBrowser = __webpack_require__(21);
	var setInnerHTML = __webpack_require__(17);
	
	/**
	 * Set the textContent property of a node, ensuring that whitespace is preserved
	 * even in IE8. innerText is a poor substitute for textContent and, among many
	 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
	 * as it should.
	 *
	 * @param {DOMElement} node
	 * @param {string} text
	 * @internal
	 */
	var setTextContent = function (node, text) {
	  if (text) {
	    var firstChild = node.firstChild;
	
	    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === 3) {
	      firstChild.nodeValue = text;
	      return;
	    }
	  }
	  node.textContent = text;
	};
	
	if (ExecutionEnvironment.canUseDOM) {
	  if (!('textContent' in document.documentElement)) {
	    setTextContent = function (node, text) {
	      if (node.nodeType === 3) {
	        node.nodeValue = text;
	        return;
	      }
	      setInnerHTML(node, escapeTextContentForBrowser(text));
	    };
	  }
	}
	
	module.exports = setTextContent;

/***/ },
/* 21 */
/***/ function(module, exports) {

	/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * Based on the escape-html library, which is used under the MIT License below:
	 *
	 * Copyright (c) 2012-2013 TJ Holowaychuk
	 * Copyright (c) 2015 Andreas Lubbe
	 * Copyright (c) 2015 Tiancheng "Timothy" Gu
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining
	 * a copy of this software and associated documentation files (the
	 * 'Software'), to deal in the Software without restriction, including
	 * without limitation the rights to use, copy, modify, merge, publish,
	 * distribute, sublicense, and/or sell copies of the Software, and to
	 * permit persons to whom the Software is furnished to do so, subject to
	 * the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be
	 * included in all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
	 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
	 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
	 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
	 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
	 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
	 *
	 */
	
	'use strict';
	
	// code copied and modified from escape-html
	/**
	 * Module variables.
	 * @private
	 */
	
	var matchHtmlRegExp = /["'&<>]/;
	
	/**
	 * Escape special characters in the given string of html.
	 *
	 * @param  {string} string The string to escape for inserting into HTML
	 * @return {string}
	 * @public
	 */
	
	function escapeHtml(string) {
	  var str = '' + string;
	  var match = matchHtmlRegExp.exec(str);
	
	  if (!match) {
	    return str;
	  }
	
	  var escape;
	  var html = '';
	  var index = 0;
	  var lastIndex = 0;
	
	  for (index = match.index; index < str.length; index++) {
	    switch (str.charCodeAt(index)) {
	      case 34:
	        // "
	        escape = '&quot;';
	        break;
	      case 38:
	        // &
	        escape = '&amp;';
	        break;
	      case 39:
	        // '
	        escape = '&#x27;'; // modified from escape-html; used to be '&#39'
	        break;
	      case 60:
	        // <
	        escape = '&lt;';
	        break;
	      case 62:
	        // >
	        escape = '&gt;';
	        break;
	      default:
	        continue;
	    }
	
	    if (lastIndex !== index) {
	      html += str.substring(lastIndex, index);
	    }
	
	    lastIndex = index + 1;
	    html += escape;
	  }
	
	  return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
	}
	// end code copied and modified from escape-html
	
	
	/**
	 * Escapes text to prevent scripting attacks.
	 *
	 * @param {*} text Text value to escape.
	 * @return {string} An escaped string.
	 */
	function escapeTextContentForBrowser(text) {
	  if (typeof text === 'boolean' || typeof text === 'number') {
	    // this shortcircuit helps perf for types that we know will never have
	    // special characters, especially given that this function is used often
	    // for numeric dom ids.
	    return '' + text;
	  }
	  return escapeHtml(text);
	}
	
	module.exports = escapeTextContentForBrowser;

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(14);
	
	var invariant = __webpack_require__(23);
	
	function checkMask(value, bitmask) {
	  return (value & bitmask) === bitmask;
	}
	
	var DOMPropertyInjection = {
	  /**
	   * Mapping from normalized, camelcased property names to a configuration that
	   * specifies how the associated DOM property should be accessed or rendered.
	   */
	  MUST_USE_PROPERTY: 0x1,
	  HAS_BOOLEAN_VALUE: 0x4,
	  HAS_NUMERIC_VALUE: 0x8,
	  HAS_POSITIVE_NUMERIC_VALUE: 0x10 | 0x8,
	  HAS_OVERLOADED_BOOLEAN_VALUE: 0x20,
	
	  /**
	   * Inject some specialized knowledge about the DOM. This takes a config object
	   * with the following properties:
	   *
	   * isCustomAttribute: function that given an attribute name will return true
	   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
	   * attributes where it's impossible to enumerate all of the possible
	   * attribute names,
	   *
	   * Properties: object mapping DOM property name to one of the
	   * DOMPropertyInjection constants or null. If your attribute isn't in here,
	   * it won't get written to the DOM.
	   *
	   * DOMAttributeNames: object mapping React attribute name to the DOM
	   * attribute name. Attribute names not specified use the **lowercase**
	   * normalized name.
	   *
	   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
	   * attribute namespace URL. (Attribute names not specified use no namespace.)
	   *
	   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
	   * Property names not specified use the normalized name.
	   *
	   * DOMMutationMethods: Properties that require special mutation methods. If
	   * `value` is undefined, the mutation method should unset the property.
	   *
	   * @param {object} domPropertyConfig the config as described above.
	   */
	  injectDOMPropertyConfig: function (domPropertyConfig) {
	    var Injection = DOMPropertyInjection;
	    var Properties = domPropertyConfig.Properties || {};
	    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
	    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
	    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
	    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};
	
	    if (domPropertyConfig.isCustomAttribute) {
	      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
	    }
	
	    for (var propName in Properties) {
	      !!DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property \'%s\' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.', propName) : _prodInvariant('48', propName) : void 0;
	
	      var lowerCased = propName.toLowerCase();
	      var propConfig = Properties[propName];
	
	      var propertyInfo = {
	        attributeName: lowerCased,
	        attributeNamespace: null,
	        propertyName: propName,
	        mutationMethod: null,
	
	        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
	        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
	        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
	        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
	        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
	      };
	      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s', propName) : _prodInvariant('50', propName) : void 0;
	
	      if (process.env.NODE_ENV !== 'production') {
	        DOMProperty.getPossibleStandardName[lowerCased] = propName;
	      }
	
	      if (DOMAttributeNames.hasOwnProperty(propName)) {
	        var attributeName = DOMAttributeNames[propName];
	        propertyInfo.attributeName = attributeName;
	        if (process.env.NODE_ENV !== 'production') {
	          DOMProperty.getPossibleStandardName[attributeName] = propName;
	        }
	      }
	
	      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
	        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
	      }
	
	      if (DOMPropertyNames.hasOwnProperty(propName)) {
	        propertyInfo.propertyName = DOMPropertyNames[propName];
	      }
	
	      if (DOMMutationMethods.hasOwnProperty(propName)) {
	        propertyInfo.mutationMethod = DOMMutationMethods[propName];
	      }
	
	      DOMProperty.properties[propName] = propertyInfo;
	    }
	  }
	};
	
	/* eslint-disable max-len */
	var ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
	/* eslint-enable max-len */
	
	/**
	 * DOMProperty exports lookup objects that can be used like functions:
	 *
	 *   > DOMProperty.isValid['id']
	 *   true
	 *   > DOMProperty.isValid['foobar']
	 *   undefined
	 *
	 * Although this may be confusing, it performs better in general.
	 *
	 * @see http://jsperf.com/key-exists
	 * @see http://jsperf.com/key-missing
	 */
	var DOMProperty = {
	
	  ID_ATTRIBUTE_NAME: 'data-reactid',
	  ROOT_ATTRIBUTE_NAME: 'data-reactroot',
	
	  ATTRIBUTE_NAME_START_CHAR: ATTRIBUTE_NAME_START_CHAR,
	  ATTRIBUTE_NAME_CHAR: ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040',
	
	  /**
	   * Map from property "standard name" to an object with info about how to set
	   * the property in the DOM. Each object contains:
	   *
	   * attributeName:
	   *   Used when rendering markup or with `*Attribute()`.
	   * attributeNamespace
	   * propertyName:
	   *   Used on DOM node instances. (This includes properties that mutate due to
	   *   external factors.)
	   * mutationMethod:
	   *   If non-null, used instead of the property or `setAttribute()` after
	   *   initial render.
	   * mustUseProperty:
	   *   Whether the property must be accessed and mutated as an object property.
	   * hasBooleanValue:
	   *   Whether the property should be removed when set to a falsey value.
	   * hasNumericValue:
	   *   Whether the property must be numeric or parse as a numeric and should be
	   *   removed when set to a falsey value.
	   * hasPositiveNumericValue:
	   *   Whether the property must be positive numeric or parse as a positive
	   *   numeric and should be removed when set to a falsey value.
	   * hasOverloadedBooleanValue:
	   *   Whether the property can be used as a flag as well as with a value.
	   *   Removed when strictly equal to false; present without a value when
	   *   strictly equal to true; present with a value otherwise.
	   */
	  properties: {},
	
	  /**
	   * Mapping from lowercase property names to the properly cased version, used
	   * to warn in the case of missing properties. Available only in __DEV__.
	   *
	   * autofocus is predefined, because adding it to the property whitelist
	   * causes unintended side effects.
	   *
	   * @type {Object}
	   */
	  getPossibleStandardName: process.env.NODE_ENV !== 'production' ? { autofocus: 'autoFocus' } : null,
	
	  /**
	   * All of the isCustomAttribute() functions that have been injected.
	   */
	  _isCustomAttributeFunctions: [],
	
	  /**
	   * Checks whether a property name is a custom attribute.
	   * @method
	   */
	  isCustomAttribute: function (attributeName) {
	    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
	      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
	      if (isCustomAttributeFn(attributeName)) {
	        return true;
	      }
	    }
	    return false;
	  },
	
	  injection: DOMPropertyInjection
	};
	
	module.exports = DOMProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */
	
	var validateFormat = function validateFormat(format) {};
	
	if (process.env.NODE_ENV !== 'production') {
	  validateFormat = function validateFormat(format) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  };
	}
	
	function invariant(condition, format, a, b, c, d, e, f) {
	  validateFormat(format);
	
	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }
	
	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	}
	
	module.exports = invariant;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(25);
	
	var ReactChildren = __webpack_require__(26);
	var ReactComponent = __webpack_require__(38);
	var ReactPureComponent = __webpack_require__(41);
	var ReactClass = __webpack_require__(42);
	var ReactDOMFactories = __webpack_require__(44);
	var ReactElement = __webpack_require__(29);
	var ReactPropTypes = __webpack_require__(49);
	var ReactVersion = __webpack_require__(50);
	
	var onlyChild = __webpack_require__(51);
	var warning = __webpack_require__(31);
	
	var createElement = ReactElement.createElement;
	var createFactory = ReactElement.createFactory;
	var cloneElement = ReactElement.cloneElement;
	
	if (process.env.NODE_ENV !== 'production') {
	  var ReactElementValidator = __webpack_require__(45);
	  createElement = ReactElementValidator.createElement;
	  createFactory = ReactElementValidator.createFactory;
	  cloneElement = ReactElementValidator.cloneElement;
	}
	
	var __spread = _assign;
	
	if (process.env.NODE_ENV !== 'production') {
	  var warned = false;
	  __spread = function () {
	    process.env.NODE_ENV !== 'production' ? warning(warned, 'React.__spread is deprecated and should not be used. Use ' + 'Object.assign directly or another helper function with similar ' + 'semantics. You may be seeing this warning due to your compiler. ' + 'See https://fb.me/react-spread-deprecation for more details.') : void 0;
	    warned = true;
	    return _assign.apply(null, arguments);
	  };
	}
	
	var React = {
	
	  // Modern
	
	  Children: {
	    map: ReactChildren.map,
	    forEach: ReactChildren.forEach,
	    count: ReactChildren.count,
	    toArray: ReactChildren.toArray,
	    only: onlyChild
	  },
	
	  Component: ReactComponent,
	  PureComponent: ReactPureComponent,
	
	  createElement: createElement,
	  cloneElement: cloneElement,
	  isValidElement: ReactElement.isValidElement,
	
	  // Classic
	
	  PropTypes: ReactPropTypes,
	  createClass: ReactClass.createClass,
	  createFactory: createFactory,
	  createMixin: function (mixin) {
	    // Currently a noop. Will be used to validate and trace mixins.
	    return mixin;
	  },
	
	  // This looks DOM specific but these are actually isomorphic helpers
	  // since they are just generating DOM strings.
	  DOM: ReactDOMFactories,
	
	  version: ReactVersion,
	
	  // Deprecated hook for JSX spread, don't use this for anything.
	  __spread: __spread
	};
	
	module.exports = React;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 25 */
/***/ function(module, exports) {

	'use strict';
	/* eslint-disable no-unused-vars */
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;
	
	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}
	
		return Object(val);
	}
	
	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}
	
			// Detect buggy property enumeration order in older V8 versions.
	
			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc');  // eslint-disable-line
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}
	
			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}
	
			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
					'abcdefghijklmnopqrst') {
				return false;
			}
	
			return true;
		} catch (e) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}
	
	module.exports = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;
	
		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);
	
			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}
	
			if (Object.getOwnPropertySymbols) {
				symbols = Object.getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}
	
		return to;
	};


/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var PooledClass = __webpack_require__(27);
	var ReactElement = __webpack_require__(29);
	
	var emptyFunction = __webpack_require__(32);
	var traverseAllChildren = __webpack_require__(35);
	
	var twoArgumentPooler = PooledClass.twoArgumentPooler;
	var fourArgumentPooler = PooledClass.fourArgumentPooler;
	
	var userProvidedKeyEscapeRegex = /\/+/g;
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
	}
	
	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * traversal. Allows avoiding binding callbacks.
	 *
	 * @constructor ForEachBookKeeping
	 * @param {!function} forEachFunction Function to perform traversal with.
	 * @param {?*} forEachContext Context to perform context with.
	 */
	function ForEachBookKeeping(forEachFunction, forEachContext) {
	  this.func = forEachFunction;
	  this.context = forEachContext;
	  this.count = 0;
	}
	ForEachBookKeeping.prototype.destructor = function () {
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);
	
	function forEachSingleChild(bookKeeping, child, name) {
	  var func = bookKeeping.func,
	      context = bookKeeping.context;
	
	  func.call(context, child, bookKeeping.count++);
	}
	
	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.foreach
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc
	 * @param {*} forEachContext Context for forEachContext.
	 */
	function forEachChildren(children, forEachFunc, forEachContext) {
	  if (children == null) {
	    return children;
	  }
	  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
	  traverseAllChildren(children, forEachSingleChild, traverseContext);
	  ForEachBookKeeping.release(traverseContext);
	}
	
	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * mapping. Allows avoiding binding callbacks.
	 *
	 * @constructor MapBookKeeping
	 * @param {!*} mapResult Object containing the ordered map of results.
	 * @param {!function} mapFunction Function to perform mapping with.
	 * @param {?*} mapContext Context to perform mapping with.
	 */
	function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
	  this.result = mapResult;
	  this.keyPrefix = keyPrefix;
	  this.func = mapFunction;
	  this.context = mapContext;
	  this.count = 0;
	}
	MapBookKeeping.prototype.destructor = function () {
	  this.result = null;
	  this.keyPrefix = null;
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);
	
	function mapSingleChildIntoContext(bookKeeping, child, childKey) {
	  var result = bookKeeping.result,
	      keyPrefix = bookKeeping.keyPrefix,
	      func = bookKeeping.func,
	      context = bookKeeping.context;
	
	
	  var mappedChild = func.call(context, child, bookKeeping.count++);
	  if (Array.isArray(mappedChild)) {
	    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
	  } else if (mappedChild != null) {
	    if (ReactElement.isValidElement(mappedChild)) {
	      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
	      // Keep both the (mapped) and old keys if they differ, just as
	      // traverseAllChildren used to do for objects as children
	      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
	    }
	    result.push(mappedChild);
	  }
	}
	
	function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
	  var escapedPrefix = '';
	  if (prefix != null) {
	    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
	  }
	  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
	  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
	  MapBookKeeping.release(traverseContext);
	}
	
	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.map
	 *
	 * The provided mapFunction(child, key, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} func The map function.
	 * @param {*} context Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
	  return result;
	}
	
	function forEachSingleChildDummy(traverseContext, child, name) {
	  return null;
	}
	
	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.count
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */
	function countChildren(children, context) {
	  return traverseAllChildren(children, forEachSingleChildDummy, null);
	}
	
	/**
	 * Flatten a children object (typically specified as `props.children`) and
	 * return an array with appropriately re-keyed children.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.toarray
	 */
	function toArray(children) {
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
	  return result;
	}
	
	var ReactChildren = {
	  forEach: forEachChildren,
	  map: mapChildren,
	  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
	  count: countChildren,
	  toArray: toArray
	};
	
	module.exports = ReactChildren;

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(28);
	
	var invariant = __webpack_require__(23);
	
	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function (copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};
	
	var twoArgumentPooler = function (a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};
	
	var threeArgumentPooler = function (a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};
	
	var fourArgumentPooler = function (a1, a2, a3, a4) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4);
	  }
	};
	
	var standardReleaser = function (instance) {
	  var Klass = this;
	  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
	  instance.destructor();
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};
	
	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;
	
	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances.
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function (CopyConstructor, pooler) {
	  // Casting as any so that flow ignores the actual implementation and trusts
	  // it to match the type we declared
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};
	
	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fourArgumentPooler: fourArgumentPooler
	};
	
	module.exports = PooledClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 28 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	'use strict';
	
	/**
	 * WARNING: DO NOT manually require this module.
	 * This is a replacement for `invariant(...)` used by the error code system
	 * and will _only_ be required by the corresponding babel pass.
	 * It always throws.
	 */
	
	function reactProdInvariant(code) {
	  var argCount = arguments.length - 1;
	
	  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;
	
	  for (var argIdx = 0; argIdx < argCount; argIdx++) {
	    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
	  }
	
	  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';
	
	  var error = new Error(message);
	  error.name = 'Invariant Violation';
	  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame
	
	  throw error;
	}
	
	module.exports = reactProdInvariant;

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(25);
	
	var ReactCurrentOwner = __webpack_require__(30);
	
	var warning = __webpack_require__(31);
	var canDefineProperty = __webpack_require__(33);
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	
	var REACT_ELEMENT_TYPE = __webpack_require__(34);
	
	var RESERVED_PROPS = {
	  key: true,
	  ref: true,
	  __self: true,
	  __source: true
	};
	
	var specialPropKeyWarningShown, specialPropRefWarningShown;
	
	function hasValidRef(config) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (hasOwnProperty.call(config, 'ref')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }
	  return config.ref !== undefined;
	}
	
	function hasValidKey(config) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (hasOwnProperty.call(config, 'key')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }
	  return config.key !== undefined;
	}
	
	function defineKeyPropWarningGetter(props, displayName) {
	  var warnAboutAccessingKey = function () {
	    if (!specialPropKeyWarningShown) {
	      specialPropKeyWarningShown = true;
	      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
	    }
	  };
	  warnAboutAccessingKey.isReactWarning = true;
	  Object.defineProperty(props, 'key', {
	    get: warnAboutAccessingKey,
	    configurable: true
	  });
	}
	
	function defineRefPropWarningGetter(props, displayName) {
	  var warnAboutAccessingRef = function () {
	    if (!specialPropRefWarningShown) {
	      specialPropRefWarningShown = true;
	      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
	    }
	  };
	  warnAboutAccessingRef.isReactWarning = true;
	  Object.defineProperty(props, 'ref', {
	    get: warnAboutAccessingRef,
	    configurable: true
	  });
	}
	
	/**
	 * Factory method to create a new React element. This no longer adheres to
	 * the class pattern, so do not use new to call it. Also, no instanceof check
	 * will work. Instead test $$typeof field against Symbol.for('react.element') to check
	 * if something is a React Element.
	 *
	 * @param {*} type
	 * @param {*} key
	 * @param {string|object} ref
	 * @param {*} self A *temporary* helper to detect places where `this` is
	 * different from the `owner` when React.createElement is called, so that we
	 * can warn. We want to get rid of owner and replace string `ref`s with arrow
	 * functions, and as long as `this` and owner are the same, there will be no
	 * change in behavior.
	 * @param {*} source An annotation object (added by a transpiler or otherwise)
	 * indicating filename, line number, and/or other information.
	 * @param {*} owner
	 * @param {*} props
	 * @internal
	 */
	var ReactElement = function (type, key, ref, self, source, owner, props) {
	  var element = {
	    // This tag allow us to uniquely identify this as a React Element
	    $$typeof: REACT_ELEMENT_TYPE,
	
	    // Built-in properties that belong on the element
	    type: type,
	    key: key,
	    ref: ref,
	    props: props,
	
	    // Record the component responsible for creating this element.
	    _owner: owner
	  };
	
	  if (process.env.NODE_ENV !== 'production') {
	    // The validation flag is currently mutative. We put it on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    element._store = {};
	
	    // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.
	    if (canDefineProperty) {
	      Object.defineProperty(element._store, 'validated', {
	        configurable: false,
	        enumerable: false,
	        writable: true,
	        value: false
	      });
	      // self and source are DEV only properties.
	      Object.defineProperty(element, '_self', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: self
	      });
	      // Two elements created in two different places should be considered
	      // equal for testing purposes and therefore we hide it from enumeration.
	      Object.defineProperty(element, '_source', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: source
	      });
	    } else {
	      element._store.validated = false;
	      element._self = self;
	      element._source = source;
	    }
	    if (Object.freeze) {
	      Object.freeze(element.props);
	      Object.freeze(element);
	    }
	  }
	
	  return element;
	};
	
	/**
	 * Create and return a new ReactElement of the given type.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.createelement
	 */
	ReactElement.createElement = function (type, config, children) {
	  var propName;
	
	  // Reserved names are extracted
	  var props = {};
	
	  var key = null;
	  var ref = null;
	  var self = null;
	  var source = null;
	
	  if (config != null) {
	    if (hasValidRef(config)) {
	      ref = config.ref;
	    }
	    if (hasValidKey(config)) {
	      key = '' + config.key;
	    }
	
	    self = config.__self === undefined ? null : config.__self;
	    source = config.__source === undefined ? null : config.__source;
	    // Remaining properties are added to a new props object
	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }
	
	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      if (Object.freeze) {
	        Object.freeze(childArray);
	      }
	    }
	    props.children = childArray;
	  }
	
	  // Resolve default props
	  if (type && type.defaultProps) {
	    var defaultProps = type.defaultProps;
	    for (propName in defaultProps) {
	      if (props[propName] === undefined) {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    if (key || ref) {
	      if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {
	        var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
	        if (key) {
	          defineKeyPropWarningGetter(props, displayName);
	        }
	        if (ref) {
	          defineRefPropWarningGetter(props, displayName);
	        }
	      }
	    }
	  }
	  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
	};
	
	/**
	 * Return a function that produces ReactElements of a given type.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.createfactory
	 */
	ReactElement.createFactory = function (type) {
	  var factory = ReactElement.createElement.bind(null, type);
	  // Expose the type on the factory and the prototype so that it can be
	  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
	  // This should not be named `constructor` since this may not be the function
	  // that created the element, and it may not even be a constructor.
	  // Legacy hook TODO: Warn if this is accessed
	  factory.type = type;
	  return factory;
	};
	
	ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
	  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
	
	  return newElement;
	};
	
	/**
	 * Clone and return a new ReactElement using element as the starting point.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.cloneelement
	 */
	ReactElement.cloneElement = function (element, config, children) {
	  var propName;
	
	  // Original props are copied
	  var props = _assign({}, element.props);
	
	  // Reserved names are extracted
	  var key = element.key;
	  var ref = element.ref;
	  // Self is preserved since the owner is preserved.
	  var self = element._self;
	  // Source is preserved since cloneElement is unlikely to be targeted by a
	  // transpiler, and the original source is probably a better indicator of the
	  // true owner.
	  var source = element._source;
	
	  // Owner will be preserved, unless ref is overridden
	  var owner = element._owner;
	
	  if (config != null) {
	    if (hasValidRef(config)) {
	      // Silently steal the ref from the parent.
	      ref = config.ref;
	      owner = ReactCurrentOwner.current;
	    }
	    if (hasValidKey(config)) {
	      key = '' + config.key;
	    }
	
	    // Remaining properties override existing props
	    var defaultProps;
	    if (element.type && element.type.defaultProps) {
	      defaultProps = element.type.defaultProps;
	    }
	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        if (config[propName] === undefined && defaultProps !== undefined) {
	          // Resolve default props
	          props[propName] = defaultProps[propName];
	        } else {
	          props[propName] = config[propName];
	        }
	      }
	    }
	  }
	
	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }
	
	  return ReactElement(element.type, key, ref, self, source, owner, props);
	};
	
	/**
	 * Verifies the object is a ReactElement.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.isvalidelement
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid component.
	 * @final
	 */
	ReactElement.isValidElement = function (object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	};
	
	module.exports = ReactElement;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 30 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 */
	var ReactCurrentOwner = {
	
	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null
	
	};
	
	module.exports = ReactCurrentOwner;

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var emptyFunction = __webpack_require__(32);
	
	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */
	
	var warning = emptyFunction;
	
	if (process.env.NODE_ENV !== 'production') {
	  (function () {
	    var printWarning = function printWarning(format) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }
	
	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // --- Welcome to debugging React ---
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch (x) {}
	    };
	
	    warning = function warning(condition, format) {
	      if (format === undefined) {
	        throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	      }
	
	      if (format.indexOf('Failed Composite propType: ') === 0) {
	        return; // Ignore CompositeComponent proptype check.
	      }
	
	      if (!condition) {
	        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
	          args[_key2 - 2] = arguments[_key2];
	        }
	
	        printWarning.apply(undefined, [format].concat(args));
	      }
	    };
	  })();
	}
	
	module.exports = warning;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 32 */
/***/ function(module, exports) {

	"use strict";
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	function makeEmptyFunction(arg) {
	  return function () {
	    return arg;
	  };
	}
	
	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	var emptyFunction = function emptyFunction() {};
	
	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function () {
	  return this;
	};
	emptyFunction.thatReturnsArgument = function (arg) {
	  return arg;
	};
	
	module.exports = emptyFunction;

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var canDefineProperty = false;
	if (process.env.NODE_ENV !== 'production') {
	  try {
	    // $FlowFixMe https://github.com/facebook/flow/issues/285
	    Object.defineProperty({}, 'x', { get: function () {} });
	    canDefineProperty = true;
	  } catch (x) {
	    // IE will fail on defineProperty
	  }
	}
	
	module.exports = canDefineProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 34 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	// The Symbol used to tag the ReactElement type. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	
	var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;
	
	module.exports = REACT_ELEMENT_TYPE;

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(28);
	
	var ReactCurrentOwner = __webpack_require__(30);
	var REACT_ELEMENT_TYPE = __webpack_require__(34);
	
	var getIteratorFn = __webpack_require__(36);
	var invariant = __webpack_require__(23);
	var KeyEscapeUtils = __webpack_require__(37);
	var warning = __webpack_require__(31);
	
	var SEPARATOR = '.';
	var SUBSEPARATOR = ':';
	
	/**
	 * This is inlined from ReactElement since this file is shared between
	 * isomorphic and renderers. We could extract this to a
	 *
	 */
	
	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */
	
	var didWarnAboutMaps = false;
	
	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  // Do some typechecking here since we call this blindly. We want to ensure
	  // that we don't block potential future ES APIs.
	  if (component && typeof component === 'object' && component.key != null) {
	    // Explicit key
	    return KeyEscapeUtils.escape(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}
	
	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children;
	
	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }
	
	  if (children === null || type === 'string' || type === 'number' ||
	  // The following is inlined from ReactElement. This means we can optimize
	  // some checks. React Fiber also inlines this logic for similar purposes.
	  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
	    callback(traverseContext, children,
	    // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }
	
	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;
	
	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = nextNamePrefix + getComponentKey(child, ii++);
	          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	        }
	      } else {
	        if (process.env.NODE_ENV !== 'production') {
	          var mapsAsChildrenAddendum = '';
	          if (ReactCurrentOwner.current) {
	            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
	            if (mapsAsChildrenOwnerName) {
	              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
	            }
	          }
	          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
	            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	          }
	        }
	      }
	    } else if (type === 'object') {
	      var addendum = '';
	      if (process.env.NODE_ENV !== 'production') {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
	        if (children._isReactElement) {
	          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
	        }
	        if (ReactCurrentOwner.current) {
	          var name = ReactCurrentOwner.current.getName();
	          if (name) {
	            addendum += ' Check the render method of `' + name + '`.';
	          }
	        }
	      }
	      var childrenString = String(children);
	       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
	    }
	  }
	
	  return subtreeCount;
	}
	
	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }
	
	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}
	
	module.exports = traverseAllChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 36 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	/* global Symbol */
	
	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.
	
	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}
	
	module.exports = getIteratorFn;

/***/ },
/* 37 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	/**
	 * Escape and wrap key so it is safe to use as a reactid
	 *
	 * @param {string} key to be escaped.
	 * @return {string} the escaped key.
	 */
	
	function escape(key) {
	  var escapeRegex = /[=:]/g;
	  var escaperLookup = {
	    '=': '=0',
	    ':': '=2'
	  };
	  var escapedString = ('' + key).replace(escapeRegex, function (match) {
	    return escaperLookup[match];
	  });
	
	  return '$' + escapedString;
	}
	
	/**
	 * Unescape and unwrap key for human-readable display
	 *
	 * @param {string} key to unescape.
	 * @return {string} the unescaped key.
	 */
	function unescape(key) {
	  var unescapeRegex = /(=0|=2)/g;
	  var unescaperLookup = {
	    '=0': '=',
	    '=2': ':'
	  };
	  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);
	
	  return ('' + keySubstring).replace(unescapeRegex, function (match) {
	    return unescaperLookup[match];
	  });
	}
	
	var KeyEscapeUtils = {
	  escape: escape,
	  unescape: unescape
	};
	
	module.exports = KeyEscapeUtils;

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(28);
	
	var ReactNoopUpdateQueue = __webpack_require__(39);
	
	var canDefineProperty = __webpack_require__(33);
	var emptyObject = __webpack_require__(40);
	var invariant = __webpack_require__(23);
	var warning = __webpack_require__(31);
	
	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactComponent(props, context, updater) {
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}
	
	ReactComponent.prototype.isReactComponent = {};
	
	/**
	 * Sets a subset of the state. Always use this to mutate
	 * state. You should treat `this.state` as immutable.
	 *
	 * There is no guarantee that `this.state` will be immediately updated, so
	 * accessing `this.state` after calling this method may return the old value.
	 *
	 * There is no guarantee that calls to `setState` will run synchronously,
	 * as they may eventually be batched together.  You can provide an optional
	 * callback that will be executed when the call to setState is actually
	 * completed.
	 *
	 * When a function is provided to setState, it will be called at some point in
	 * the future (not synchronously). It will be called with the up to date
	 * component arguments (state, props, context). These values can be different
	 * from this.* because your function may be called after receiveProps but before
	 * shouldComponentUpdate, and this new state, props, and context will not yet be
	 * assigned to this.
	 *
	 * @param {object|function} partialState Next partial state or function to
	 *        produce next partial state to be merged with current state.
	 * @param {?function} callback Called after state is updated.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.setState = function (partialState, callback) {
	  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : _prodInvariant('85') : void 0;
	  this.updater.enqueueSetState(this, partialState);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback, 'setState');
	  }
	};
	
	/**
	 * Forces an update. This should only be invoked when it is known with
	 * certainty that we are **not** in a DOM transaction.
	 *
	 * You may want to call this when you know that some deeper aspect of the
	 * component's state has changed but `setState` was not called.
	 *
	 * This will not invoke `shouldComponentUpdate`, but it will invoke
	 * `componentWillUpdate` and `componentDidUpdate`.
	 *
	 * @param {?function} callback Called after update is complete.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.forceUpdate = function (callback) {
	  this.updater.enqueueForceUpdate(this);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback, 'forceUpdate');
	  }
	};
	
	/**
	 * Deprecated APIs. These APIs used to exist on classic React classes but since
	 * we would like to deprecate them, we're not going to move them over to this
	 * modern base class. Instead, we define a getter that warns if it's accessed.
	 */
	if (process.env.NODE_ENV !== 'production') {
	  var deprecatedAPIs = {
	    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
	    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
	  };
	  var defineDeprecationWarning = function (methodName, info) {
	    if (canDefineProperty) {
	      Object.defineProperty(ReactComponent.prototype, methodName, {
	        get: function () {
	          process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : void 0;
	          return undefined;
	        }
	      });
	    }
	  };
	  for (var fnName in deprecatedAPIs) {
	    if (deprecatedAPIs.hasOwnProperty(fnName)) {
	      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	    }
	  }
	}
	
	module.exports = ReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var warning = __webpack_require__(31);
	
	function warnNoop(publicInstance, callerName) {
	  if (process.env.NODE_ENV !== 'production') {
	    var constructor = publicInstance.constructor;
	    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
	  }
	}
	
	/**
	 * This is the abstract API for an update queue.
	 */
	var ReactNoopUpdateQueue = {
	
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    return false;
	  },
	
	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback) {},
	
	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    warnNoop(publicInstance, 'forceUpdate');
	  },
	
	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    warnNoop(publicInstance, 'replaceState');
	  },
	
	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    warnNoop(publicInstance, 'setState');
	  }
	};
	
	module.exports = ReactNoopUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var emptyObject = {};
	
	if (process.env.NODE_ENV !== 'production') {
	  Object.freeze(emptyObject);
	}
	
	module.exports = emptyObject;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(25);
	
	var ReactComponent = __webpack_require__(38);
	var ReactNoopUpdateQueue = __webpack_require__(39);
	
	var emptyObject = __webpack_require__(40);
	
	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactPureComponent(props, context, updater) {
	  // Duplicated from ReactComponent.
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}
	
	function ComponentDummy() {}
	ComponentDummy.prototype = ReactComponent.prototype;
	ReactPureComponent.prototype = new ComponentDummy();
	ReactPureComponent.prototype.constructor = ReactPureComponent;
	// Avoid an extra prototype jump for these methods.
	_assign(ReactPureComponent.prototype, ReactComponent.prototype);
	ReactPureComponent.prototype.isPureReactComponent = true;
	
	module.exports = ReactPureComponent;

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(28),
	    _assign = __webpack_require__(25);
	
	var ReactComponent = __webpack_require__(38);
	var ReactElement = __webpack_require__(29);
	var ReactPropTypeLocationNames = __webpack_require__(43);
	var ReactNoopUpdateQueue = __webpack_require__(39);
	
	var emptyObject = __webpack_require__(40);
	var invariant = __webpack_require__(23);
	var warning = __webpack_require__(31);
	
	var MIXINS_KEY = 'mixins';
	
	// Helper function to allow the creation of anonymous functions which do not
	// have .name set to the name of the variable being assigned to.
	function identity(fn) {
	  return fn;
	}
	
	/**
	 * Policies that describe methods in `ReactClassInterface`.
	 */
	
	
	var injectedMixins = [];
	
	/**
	 * Composite components are higher-level components that compose other composite
	 * or host components.
	 *
	 * To create a new type of `ReactClass`, pass a specification of
	 * your new class to `React.createClass`. The only requirement of your class
	 * specification is that you implement a `render` method.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return <div>Hello World</div>;
	 *     }
	 *   });
	 *
	 * The class specification supports a specific protocol of methods that have
	 * special meaning (e.g. `render`). See `ReactClassInterface` for
	 * more the comprehensive protocol. Any other properties and methods in the
	 * class specification will be available on the prototype.
	 *
	 * @interface ReactClassInterface
	 * @internal
	 */
	var ReactClassInterface = {
	
	  /**
	   * An array of Mixin objects to include when defining your component.
	   *
	   * @type {array}
	   * @optional
	   */
	  mixins: 'DEFINE_MANY',
	
	  /**
	   * An object containing properties and methods that should be defined on
	   * the component's constructor instead of its prototype (static methods).
	   *
	   * @type {object}
	   * @optional
	   */
	  statics: 'DEFINE_MANY',
	
	  /**
	   * Definition of prop types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  propTypes: 'DEFINE_MANY',
	
	  /**
	   * Definition of context types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  contextTypes: 'DEFINE_MANY',
	
	  /**
	   * Definition of context types this component sets for its children.
	   *
	   * @type {object}
	   * @optional
	   */
	  childContextTypes: 'DEFINE_MANY',
	
	  // ==== Definition methods ====
	
	  /**
	   * Invoked when the component is mounted. Values in the mapping will be set on
	   * `this.props` if that prop is not specified (i.e. using an `in` check).
	   *
	   * This method is invoked before `getInitialState` and therefore cannot rely
	   * on `this.state` or use `this.setState`.
	   *
	   * @return {object}
	   * @optional
	   */
	  getDefaultProps: 'DEFINE_MANY_MERGED',
	
	  /**
	   * Invoked once before the component is mounted. The return value will be used
	   * as the initial value of `this.state`.
	   *
	   *   getInitialState: function() {
	   *     return {
	   *       isOn: false,
	   *       fooBaz: new BazFoo()
	   *     }
	   *   }
	   *
	   * @return {object}
	   * @optional
	   */
	  getInitialState: 'DEFINE_MANY_MERGED',
	
	  /**
	   * @return {object}
	   * @optional
	   */
	  getChildContext: 'DEFINE_MANY_MERGED',
	
	  /**
	   * Uses props from `this.props` and state from `this.state` to render the
	   * structure of the component.
	   *
	   * No guarantees are made about when or how often this method is invoked, so
	   * it must not have side effects.
	   *
	   *   render: function() {
	   *     var name = this.props.name;
	   *     return <div>Hello, {name}!</div>;
	   *   }
	   *
	   * @return {ReactComponent}
	   * @nosideeffects
	   * @required
	   */
	  render: 'DEFINE_ONCE',
	
	  // ==== Delegate methods ====
	
	  /**
	   * Invoked when the component is initially created and about to be mounted.
	   * This may have side effects, but any external subscriptions or data created
	   * by this method must be cleaned up in `componentWillUnmount`.
	   *
	   * @optional
	   */
	  componentWillMount: 'DEFINE_MANY',
	
	  /**
	   * Invoked when the component has been mounted and has a DOM representation.
	   * However, there is no guarantee that the DOM node is in the document.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been mounted (initialized and rendered) for the first time.
	   *
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidMount: 'DEFINE_MANY',
	
	  /**
	   * Invoked before the component receives new props.
	   *
	   * Use this as an opportunity to react to a prop transition by updating the
	   * state using `this.setState`. Current props are accessed via `this.props`.
	   *
	   *   componentWillReceiveProps: function(nextProps, nextContext) {
	   *     this.setState({
	   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
	   *     });
	   *   }
	   *
	   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
	   * transition may cause a state change, but the opposite is not true. If you
	   * need it, you are probably looking for `componentWillUpdate`.
	   *
	   * @param {object} nextProps
	   * @optional
	   */
	  componentWillReceiveProps: 'DEFINE_MANY',
	
	  /**
	   * Invoked while deciding if the component should be updated as a result of
	   * receiving new props, state and/or context.
	   *
	   * Use this as an opportunity to `return false` when you're certain that the
	   * transition to the new props/state/context will not require a component
	   * update.
	   *
	   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
	   *     return !equal(nextProps, this.props) ||
	   *       !equal(nextState, this.state) ||
	   *       !equal(nextContext, this.context);
	   *   }
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @return {boolean} True if the component should update.
	   * @optional
	   */
	  shouldComponentUpdate: 'DEFINE_ONCE',
	
	  /**
	   * Invoked when the component is about to update due to a transition from
	   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
	   * and `nextContext`.
	   *
	   * Use this as an opportunity to perform preparation before an update occurs.
	   *
	   * NOTE: You **cannot** use `this.setState()` in this method.
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @param {ReactReconcileTransaction} transaction
	   * @optional
	   */
	  componentWillUpdate: 'DEFINE_MANY',
	
	  /**
	   * Invoked when the component's DOM representation has been updated.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been updated.
	   *
	   * @param {object} prevProps
	   * @param {?object} prevState
	   * @param {?object} prevContext
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidUpdate: 'DEFINE_MANY',
	
	  /**
	   * Invoked when the component is about to be removed from its parent and have
	   * its DOM representation destroyed.
	   *
	   * Use this as an opportunity to deallocate any external resources.
	   *
	   * NOTE: There is no `componentDidUnmount` since your component will have been
	   * destroyed by that point.
	   *
	   * @optional
	   */
	  componentWillUnmount: 'DEFINE_MANY',
	
	  // ==== Advanced methods ====
	
	  /**
	   * Updates the component's currently mounted DOM representation.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   * @overridable
	   */
	  updateComponent: 'OVERRIDE_BASE'
	
	};
	
	/**
	 * Mapping from class specification keys to special processing functions.
	 *
	 * Although these are declared like instance properties in the specification
	 * when defining classes using `React.createClass`, they are actually static
	 * and are accessible on the constructor instead of the prototype. Despite
	 * being static, they must be defined outside of the "statics" key under
	 * which all other static methods are defined.
	 */
	var RESERVED_SPEC_KEYS = {
	  displayName: function (Constructor, displayName) {
	    Constructor.displayName = displayName;
	  },
	  mixins: function (Constructor, mixins) {
	    if (mixins) {
	      for (var i = 0; i < mixins.length; i++) {
	        mixSpecIntoComponent(Constructor, mixins[i]);
	      }
	    }
	  },
	  childContextTypes: function (Constructor, childContextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, childContextTypes, 'childContext');
	    }
	    Constructor.childContextTypes = _assign({}, Constructor.childContextTypes, childContextTypes);
	  },
	  contextTypes: function (Constructor, contextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, contextTypes, 'context');
	    }
	    Constructor.contextTypes = _assign({}, Constructor.contextTypes, contextTypes);
	  },
	  /**
	   * Special case getDefaultProps which should move into statics but requires
	   * automatic merging.
	   */
	  getDefaultProps: function (Constructor, getDefaultProps) {
	    if (Constructor.getDefaultProps) {
	      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);
	    } else {
	      Constructor.getDefaultProps = getDefaultProps;
	    }
	  },
	  propTypes: function (Constructor, propTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, propTypes, 'prop');
	    }
	    Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);
	  },
	  statics: function (Constructor, statics) {
	    mixStaticSpecIntoComponent(Constructor, statics);
	  },
	  autobind: function () {} };
	
	function validateTypeDef(Constructor, typeDef, location) {
	  for (var propName in typeDef) {
	    if (typeDef.hasOwnProperty(propName)) {
	      // use a warning instead of an invariant so components
	      // don't show up in prod but only in __DEV__
	      process.env.NODE_ENV !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : void 0;
	    }
	  }
	}
	
	function validateMethodOverride(isAlreadyDefined, name) {
	  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;
	
	  // Disallow overriding of base class methods unless explicitly allowed.
	  if (ReactClassMixin.hasOwnProperty(name)) {
	    !(specPolicy === 'OVERRIDE_BASE') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.', name) : _prodInvariant('73', name) : void 0;
	  }
	
	  // Disallow defining methods more than once unless explicitly allowed.
	  if (isAlreadyDefined) {
	    !(specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('74', name) : void 0;
	  }
	}
	
	/**
	 * Mixin helper which handles policy validation and reserved
	 * specification keys when building React classes.
	 */
	function mixSpecIntoComponent(Constructor, spec) {
	  if (!spec) {
	    if (process.env.NODE_ENV !== 'production') {
	      var typeofSpec = typeof spec;
	      var isMixinValid = typeofSpec === 'object' && spec !== null;
	
	      process.env.NODE_ENV !== 'production' ? warning(isMixinValid, '%s: You\'re attempting to include a mixin that is either null ' + 'or not an object. Check the mixins included by the component, ' + 'as well as any mixins they include themselves. ' + 'Expected object but got %s.', Constructor.displayName || 'ReactClass', spec === null ? null : typeofSpec) : void 0;
	    }
	
	    return;
	  }
	
	  !(typeof spec !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to use a component class or function as a mixin. Instead, just use a regular object.') : _prodInvariant('75') : void 0;
	  !!ReactElement.isValidElement(spec) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to use a component as a mixin. Instead, just use a regular object.') : _prodInvariant('76') : void 0;
	
	  var proto = Constructor.prototype;
	  var autoBindPairs = proto.__reactAutoBindPairs;
	
	  // By handling mixins before any other properties, we ensure the same
	  // chaining order is applied to methods with DEFINE_MANY policy, whether
	  // mixins are listed before or after these methods in the spec.
	  if (spec.hasOwnProperty(MIXINS_KEY)) {
	    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
	  }
	
	  for (var name in spec) {
	    if (!spec.hasOwnProperty(name)) {
	      continue;
	    }
	
	    if (name === MIXINS_KEY) {
	      // We have already handled mixins in a special case above.
	      continue;
	    }
	
	    var property = spec[name];
	    var isAlreadyDefined = proto.hasOwnProperty(name);
	    validateMethodOverride(isAlreadyDefined, name);
	
	    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
	      RESERVED_SPEC_KEYS[name](Constructor, property);
	    } else {
	      // Setup methods on prototype:
	      // The following member methods should not be automatically bound:
	      // 1. Expected ReactClass methods (in the "interface").
	      // 2. Overridden methods (that were mixed in).
	      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
	      var isFunction = typeof property === 'function';
	      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;
	
	      if (shouldAutoBind) {
	        autoBindPairs.push(name, property);
	        proto[name] = property;
	      } else {
	        if (isAlreadyDefined) {
	          var specPolicy = ReactClassInterface[name];
	
	          // These cases should already be caught by validateMethodOverride.
	          !(isReactClassMethod && (specPolicy === 'DEFINE_MANY_MERGED' || specPolicy === 'DEFINE_MANY')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s when mixing in component specs.', specPolicy, name) : _prodInvariant('77', specPolicy, name) : void 0;
	
	          // For methods which are defined more than once, call the existing
	          // methods before calling the new property, merging if appropriate.
	          if (specPolicy === 'DEFINE_MANY_MERGED') {
	            proto[name] = createMergedResultFunction(proto[name], property);
	          } else if (specPolicy === 'DEFINE_MANY') {
	            proto[name] = createChainedFunction(proto[name], property);
	          }
	        } else {
	          proto[name] = property;
	          if (process.env.NODE_ENV !== 'production') {
	            // Add verbose displayName to the function, which helps when looking
	            // at profiling tools.
	            if (typeof property === 'function' && spec.displayName) {
	              proto[name].displayName = spec.displayName + '_' + name;
	            }
	          }
	        }
	      }
	    }
	  }
	}
	
	function mixStaticSpecIntoComponent(Constructor, statics) {
	  if (!statics) {
	    return;
	  }
	  for (var name in statics) {
	    var property = statics[name];
	    if (!statics.hasOwnProperty(name)) {
	      continue;
	    }
	
	    var isReserved = name in RESERVED_SPEC_KEYS;
	    !!isReserved ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define a reserved property, `%s`, that shouldn\'t be on the "statics" key. Define it as an instance property instead; it will still be accessible on the constructor.', name) : _prodInvariant('78', name) : void 0;
	
	    var isInherited = name in Constructor;
	    !!isInherited ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('79', name) : void 0;
	    Constructor[name] = property;
	  }
	}
	
	/**
	 * Merge two objects, but throw if both contain the same key.
	 *
	 * @param {object} one The first object, which is mutated.
	 * @param {object} two The second object
	 * @return {object} one after it has been mutated to contain everything in two.
	 */
	function mergeIntoWithNoDuplicateKeys(one, two) {
	  !(one && two && typeof one === 'object' && typeof two === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : _prodInvariant('80') : void 0;
	
	  for (var key in two) {
	    if (two.hasOwnProperty(key)) {
	      !(one[key] === undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.', key) : _prodInvariant('81', key) : void 0;
	      one[key] = two[key];
	    }
	  }
	  return one;
	}
	
	/**
	 * Creates a function that invokes two functions and merges their return values.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createMergedResultFunction(one, two) {
	  return function mergedResult() {
	    var a = one.apply(this, arguments);
	    var b = two.apply(this, arguments);
	    if (a == null) {
	      return b;
	    } else if (b == null) {
	      return a;
	    }
	    var c = {};
	    mergeIntoWithNoDuplicateKeys(c, a);
	    mergeIntoWithNoDuplicateKeys(c, b);
	    return c;
	  };
	}
	
	/**
	 * Creates a function that invokes two functions and ignores their return vales.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createChainedFunction(one, two) {
	  return function chainedFunction() {
	    one.apply(this, arguments);
	    two.apply(this, arguments);
	  };
	}
	
	/**
	 * Binds a method to the component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 * @param {function} method Method to be bound.
	 * @return {function} The bound method.
	 */
	function bindAutoBindMethod(component, method) {
	  var boundMethod = method.bind(component);
	  if (process.env.NODE_ENV !== 'production') {
	    boundMethod.__reactBoundContext = component;
	    boundMethod.__reactBoundMethod = method;
	    boundMethod.__reactBoundArguments = null;
	    var componentName = component.constructor.displayName;
	    var _bind = boundMethod.bind;
	    boundMethod.bind = function (newThis) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }
	
	      // User is trying to bind() an autobound method; we effectively will
	      // ignore the value of "this" that the user is trying to use, so
	      // let's warn.
	      if (newThis !== component && newThis !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : void 0;
	      } else if (!args.length) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : void 0;
	        return boundMethod;
	      }
	      var reboundMethod = _bind.apply(boundMethod, arguments);
	      reboundMethod.__reactBoundContext = component;
	      reboundMethod.__reactBoundMethod = method;
	      reboundMethod.__reactBoundArguments = args;
	      return reboundMethod;
	    };
	  }
	  return boundMethod;
	}
	
	/**
	 * Binds all auto-bound methods in a component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 */
	function bindAutoBindMethods(component) {
	  var pairs = component.__reactAutoBindPairs;
	  for (var i = 0; i < pairs.length; i += 2) {
	    var autoBindKey = pairs[i];
	    var method = pairs[i + 1];
	    component[autoBindKey] = bindAutoBindMethod(component, method);
	  }
	}
	
	/**
	 * Add more to the ReactClass base class. These are all legacy features and
	 * therefore not already part of the modern ReactComponent.
	 */
	var ReactClassMixin = {
	
	  /**
	   * TODO: This will be deprecated because state should always keep a consistent
	   * type signature and the only use case for this, is to avoid that.
	   */
	  replaceState: function (newState, callback) {
	    this.updater.enqueueReplaceState(this, newState);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback, 'replaceState');
	    }
	  },
	
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function () {
	    return this.updater.isMounted(this);
	  }
	};
	
	var ReactClassComponent = function () {};
	_assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);
	
	/**
	 * Module for creating composite components.
	 *
	 * @class ReactClass
	 */
	var ReactClass = {
	
	  /**
	   * Creates a composite component class given a class specification.
	   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass
	   *
	   * @param {object} spec Class specification (which must define `render`).
	   * @return {function} Component constructor function.
	   * @public
	   */
	  createClass: function (spec) {
	    // To keep our warnings more understandable, we'll use a little hack here to
	    // ensure that Constructor.name !== 'Constructor'. This makes sure we don't
	    // unnecessarily identify a class without displayName as 'Constructor'.
	    var Constructor = identity(function (props, context, updater) {
	      // This constructor gets overridden by mocks. The argument is used
	      // by mocks to assert on what gets mounted.
	
	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;
	      }
	
	      // Wire up auto-binding
	      if (this.__reactAutoBindPairs.length) {
	        bindAutoBindMethods(this);
	      }
	
	      this.props = props;
	      this.context = context;
	      this.refs = emptyObject;
	      this.updater = updater || ReactNoopUpdateQueue;
	
	      this.state = null;
	
	      // ReactClasses doesn't have constructors. Instead, they use the
	      // getInitialState and componentWillMount methods for initialization.
	
	      var initialState = this.getInitialState ? this.getInitialState() : null;
	      if (process.env.NODE_ENV !== 'production') {
	        // We allow auto-mocks to proceed as if they're returning null.
	        if (initialState === undefined && this.getInitialState._isMockFunction) {
	          // This is probably bad practice. Consider warning here and
	          // deprecating this convenience.
	          initialState = null;
	        }
	      }
	      !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : _prodInvariant('82', Constructor.displayName || 'ReactCompositeComponent') : void 0;
	
	      this.state = initialState;
	    });
	    Constructor.prototype = new ReactClassComponent();
	    Constructor.prototype.constructor = Constructor;
	    Constructor.prototype.__reactAutoBindPairs = [];
	
	    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));
	
	    mixSpecIntoComponent(Constructor, spec);
	
	    // Initialize the defaultProps property after all mixins have been merged.
	    if (Constructor.getDefaultProps) {
	      Constructor.defaultProps = Constructor.getDefaultProps();
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      // This is a tag to indicate that the use of these method names is ok,
	      // since it's used with createClass. If it's not, then it's likely a
	      // mistake so we'll warn you to use the static property, property
	      // initializer or constructor respectively.
	      if (Constructor.getDefaultProps) {
	        Constructor.getDefaultProps.isReactClassApproved = {};
	      }
	      if (Constructor.prototype.getInitialState) {
	        Constructor.prototype.getInitialState.isReactClassApproved = {};
	      }
	    }
	
	    !Constructor.prototype.render ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : _prodInvariant('83') : void 0;
	
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : void 0;
	    }
	
	    // Reduce time spent doing lookups by setting these on the prototype.
	    for (var methodName in ReactClassInterface) {
	      if (!Constructor.prototype[methodName]) {
	        Constructor.prototype[methodName] = null;
	      }
	    }
	
	    return Constructor;
	  },
	
	  injection: {
	    injectMixin: function (mixin) {
	      injectedMixins.push(mixin);
	    }
	  }
	
	};
	
	module.exports = ReactClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var ReactPropTypeLocationNames = {};
	
	if (process.env.NODE_ENV !== 'production') {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}
	
	module.exports = ReactPropTypeLocationNames;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactElement = __webpack_require__(29);
	
	/**
	 * Create a factory that creates HTML tag elements.
	 *
	 * @private
	 */
	var createDOMFactory = ReactElement.createFactory;
	if (process.env.NODE_ENV !== 'production') {
	  var ReactElementValidator = __webpack_require__(45);
	  createDOMFactory = ReactElementValidator.createFactory;
	}
	
	/**
	 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
	 * This is also accessible via `React.DOM`.
	 *
	 * @public
	 */
	var ReactDOMFactories = {
	  a: createDOMFactory('a'),
	  abbr: createDOMFactory('abbr'),
	  address: createDOMFactory('address'),
	  area: createDOMFactory('area'),
	  article: createDOMFactory('article'),
	  aside: createDOMFactory('aside'),
	  audio: createDOMFactory('audio'),
	  b: createDOMFactory('b'),
	  base: createDOMFactory('base'),
	  bdi: createDOMFactory('bdi'),
	  bdo: createDOMFactory('bdo'),
	  big: createDOMFactory('big'),
	  blockquote: createDOMFactory('blockquote'),
	  body: createDOMFactory('body'),
	  br: createDOMFactory('br'),
	  button: createDOMFactory('button'),
	  canvas: createDOMFactory('canvas'),
	  caption: createDOMFactory('caption'),
	  cite: createDOMFactory('cite'),
	  code: createDOMFactory('code'),
	  col: createDOMFactory('col'),
	  colgroup: createDOMFactory('colgroup'),
	  data: createDOMFactory('data'),
	  datalist: createDOMFactory('datalist'),
	  dd: createDOMFactory('dd'),
	  del: createDOMFactory('del'),
	  details: createDOMFactory('details'),
	  dfn: createDOMFactory('dfn'),
	  dialog: createDOMFactory('dialog'),
	  div: createDOMFactory('div'),
	  dl: createDOMFactory('dl'),
	  dt: createDOMFactory('dt'),
	  em: createDOMFactory('em'),
	  embed: createDOMFactory('embed'),
	  fieldset: createDOMFactory('fieldset'),
	  figcaption: createDOMFactory('figcaption'),
	  figure: createDOMFactory('figure'),
	  footer: createDOMFactory('footer'),
	  form: createDOMFactory('form'),
	  h1: createDOMFactory('h1'),
	  h2: createDOMFactory('h2'),
	  h3: createDOMFactory('h3'),
	  h4: createDOMFactory('h4'),
	  h5: createDOMFactory('h5'),
	  h6: createDOMFactory('h6'),
	  head: createDOMFactory('head'),
	  header: createDOMFactory('header'),
	  hgroup: createDOMFactory('hgroup'),
	  hr: createDOMFactory('hr'),
	  html: createDOMFactory('html'),
	  i: createDOMFactory('i'),
	  iframe: createDOMFactory('iframe'),
	  img: createDOMFactory('img'),
	  input: createDOMFactory('input'),
	  ins: createDOMFactory('ins'),
	  kbd: createDOMFactory('kbd'),
	  keygen: createDOMFactory('keygen'),
	  label: createDOMFactory('label'),
	  legend: createDOMFactory('legend'),
	  li: createDOMFactory('li'),
	  link: createDOMFactory('link'),
	  main: createDOMFactory('main'),
	  map: createDOMFactory('map'),
	  mark: createDOMFactory('mark'),
	  menu: createDOMFactory('menu'),
	  menuitem: createDOMFactory('menuitem'),
	  meta: createDOMFactory('meta'),
	  meter: createDOMFactory('meter'),
	  nav: createDOMFactory('nav'),
	  noscript: createDOMFactory('noscript'),
	  object: createDOMFactory('object'),
	  ol: createDOMFactory('ol'),
	  optgroup: createDOMFactory('optgroup'),
	  option: createDOMFactory('option'),
	  output: createDOMFactory('output'),
	  p: createDOMFactory('p'),
	  param: createDOMFactory('param'),
	  picture: createDOMFactory('picture'),
	  pre: createDOMFactory('pre'),
	  progress: createDOMFactory('progress'),
	  q: createDOMFactory('q'),
	  rp: createDOMFactory('rp'),
	  rt: createDOMFactory('rt'),
	  ruby: createDOMFactory('ruby'),
	  s: createDOMFactory('s'),
	  samp: createDOMFactory('samp'),
	  script: createDOMFactory('script'),
	  section: createDOMFactory('section'),
	  select: createDOMFactory('select'),
	  small: createDOMFactory('small'),
	  source: createDOMFactory('source'),
	  span: createDOMFactory('span'),
	  strong: createDOMFactory('strong'),
	  style: createDOMFactory('style'),
	  sub: createDOMFactory('sub'),
	  summary: createDOMFactory('summary'),
	  sup: createDOMFactory('sup'),
	  table: createDOMFactory('table'),
	  tbody: createDOMFactory('tbody'),
	  td: createDOMFactory('td'),
	  textarea: createDOMFactory('textarea'),
	  tfoot: createDOMFactory('tfoot'),
	  th: createDOMFactory('th'),
	  thead: createDOMFactory('thead'),
	  time: createDOMFactory('time'),
	  title: createDOMFactory('title'),
	  tr: createDOMFactory('tr'),
	  track: createDOMFactory('track'),
	  u: createDOMFactory('u'),
	  ul: createDOMFactory('ul'),
	  'var': createDOMFactory('var'),
	  video: createDOMFactory('video'),
	  wbr: createDOMFactory('wbr'),
	
	  // SVG
	  circle: createDOMFactory('circle'),
	  clipPath: createDOMFactory('clipPath'),
	  defs: createDOMFactory('defs'),
	  ellipse: createDOMFactory('ellipse'),
	  g: createDOMFactory('g'),
	  image: createDOMFactory('image'),
	  line: createDOMFactory('line'),
	  linearGradient: createDOMFactory('linearGradient'),
	  mask: createDOMFactory('mask'),
	  path: createDOMFactory('path'),
	  pattern: createDOMFactory('pattern'),
	  polygon: createDOMFactory('polygon'),
	  polyline: createDOMFactory('polyline'),
	  radialGradient: createDOMFactory('radialGradient'),
	  rect: createDOMFactory('rect'),
	  stop: createDOMFactory('stop'),
	  svg: createDOMFactory('svg'),
	  text: createDOMFactory('text'),
	  tspan: createDOMFactory('tspan')
	};
	
	module.exports = ReactDOMFactories;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	/**
	 * ReactElementValidator provides a wrapper around a element factory
	 * which validates the props passed to the element. This is intended to be
	 * used only in DEV and could be replaced by a static type checker for languages
	 * that support it.
	 */
	
	'use strict';
	
	var ReactCurrentOwner = __webpack_require__(30);
	var ReactComponentTreeHook = __webpack_require__(46);
	var ReactElement = __webpack_require__(29);
	
	var checkReactTypeSpec = __webpack_require__(47);
	
	var canDefineProperty = __webpack_require__(33);
	var getIteratorFn = __webpack_require__(36);
	var warning = __webpack_require__(31);
	
	function getDeclarationErrorAddendum() {
	  if (ReactCurrentOwner.current) {
	    var name = ReactCurrentOwner.current.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}
	
	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */
	var ownerHasKeyUseWarning = {};
	
	function getCurrentComponentErrorInfo(parentType) {
	  var info = getDeclarationErrorAddendum();
	
	  if (!info) {
	    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
	    if (parentName) {
	      info = ' Check the top-level render call using <' + parentName + '>.';
	    }
	  }
	  return info;
	}
	
	/**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it. Error statuses are cached so a warning
	 * will only be shown once.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function validateExplicitKey(element, parentType) {
	  if (!element._store || element._store.validated || element.key != null) {
	    return;
	  }
	  element._store.validated = true;
	
	  var memoizer = ownerHasKeyUseWarning.uniqueKey || (ownerHasKeyUseWarning.uniqueKey = {});
	
	  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
	  if (memoizer[currentComponentErrorInfo]) {
	    return;
	  }
	  memoizer[currentComponentErrorInfo] = true;
	
	  // Usually the current owner is the offender, but if it accepts children as a
	  // property, it may be the creator of the child that's responsible for
	  // assigning it a key.
	  var childOwner = '';
	  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
	    // Give the component that originally created this child.
	    childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
	  }
	
	  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, ReactComponentTreeHook.getCurrentStackAddendum(element)) : void 0;
	}
	
	/**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */
	function validateChildKeys(node, parentType) {
	  if (typeof node !== 'object') {
	    return;
	  }
	  if (Array.isArray(node)) {
	    for (var i = 0; i < node.length; i++) {
	      var child = node[i];
	      if (ReactElement.isValidElement(child)) {
	        validateExplicitKey(child, parentType);
	      }
	    }
	  } else if (ReactElement.isValidElement(node)) {
	    // This element was passed in a valid location.
	    if (node._store) {
	      node._store.validated = true;
	    }
	  } else if (node) {
	    var iteratorFn = getIteratorFn(node);
	    // Entry iterators provide implicit keys.
	    if (iteratorFn) {
	      if (iteratorFn !== node.entries) {
	        var iterator = iteratorFn.call(node);
	        var step;
	        while (!(step = iterator.next()).done) {
	          if (ReactElement.isValidElement(step.value)) {
	            validateExplicitKey(step.value, parentType);
	          }
	        }
	      }
	    }
	  }
	}
	
	/**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */
	function validatePropTypes(element) {
	  var componentClass = element.type;
	  if (typeof componentClass !== 'function') {
	    return;
	  }
	  var name = componentClass.displayName || componentClass.name;
	  if (componentClass.propTypes) {
	    checkReactTypeSpec(componentClass.propTypes, element.props, 'prop', name, element, null);
	  }
	  if (typeof componentClass.getDefaultProps === 'function') {
	    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
	  }
	}
	
	var ReactElementValidator = {
	
	  createElement: function (type, props, children) {
	    var validType = typeof type === 'string' || typeof type === 'function';
	    // We warn in this case but don't throw. We expect the element creation to
	    // succeed and there will likely be errors in render.
	    if (!validType) {
	      if (typeof type !== 'function' && typeof type !== 'string') {
	        var info = '';
	        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
	          info += ' You likely forgot to export your component from the file ' + 'it\'s defined in.';
	        }
	        info += getDeclarationErrorAddendum();
	        process.env.NODE_ENV !== 'production' ? warning(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', type == null ? type : typeof type, info) : void 0;
	      }
	    }
	
	    var element = ReactElement.createElement.apply(this, arguments);
	
	    // The result can be nullish if a mock or a custom function is used.
	    // TODO: Drop this when these are no longer allowed as the type argument.
	    if (element == null) {
	      return element;
	    }
	
	    // Skip key warning if the type isn't valid since our key validation logic
	    // doesn't expect a non-string/function type and can throw confusing errors.
	    // We don't want exception behavior to differ between dev and prod.
	    // (Rendering will throw with a helpful message and as soon as the type is
	    // fixed, the key warnings will appear.)
	    if (validType) {
	      for (var i = 2; i < arguments.length; i++) {
	        validateChildKeys(arguments[i], type);
	      }
	    }
	
	    validatePropTypes(element);
	
	    return element;
	  },
	
	  createFactory: function (type) {
	    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
	    // Legacy hook TODO: Warn if this is accessed
	    validatedFactory.type = type;
	
	    if (process.env.NODE_ENV !== 'production') {
	      if (canDefineProperty) {
	        Object.defineProperty(validatedFactory, 'type', {
	          enumerable: false,
	          get: function () {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : void 0;
	            Object.defineProperty(this, 'type', {
	              value: type
	            });
	            return type;
	          }
	        });
	      }
	    }
	
	    return validatedFactory;
	  },
	
	  cloneElement: function (element, props, children) {
	    var newElement = ReactElement.cloneElement.apply(this, arguments);
	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], newElement.type);
	    }
	    validatePropTypes(newElement);
	    return newElement;
	  }
	
	};
	
	module.exports = ReactElementValidator;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(28);
	
	var ReactCurrentOwner = __webpack_require__(30);
	
	var invariant = __webpack_require__(23);
	var warning = __webpack_require__(31);
	
	function isNative(fn) {
	  // Based on isNative() from Lodash
	  var funcToString = Function.prototype.toString;
	  var hasOwnProperty = Object.prototype.hasOwnProperty;
	  var reIsNative = RegExp('^' + funcToString
	  // Take an example native function source for comparison
	  .call(hasOwnProperty)
	  // Strip regex characters so we can use it for regex
	  .replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
	  // Remove hasOwnProperty from the template to make it generic
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
	  try {
	    var source = funcToString.call(fn);
	    return reIsNative.test(source);
	  } catch (err) {
	    return false;
	  }
	}
	
	var canUseCollections =
	// Array.from
	typeof Array.from === 'function' &&
	// Map
	typeof Map === 'function' && isNative(Map) &&
	// Map.prototype.keys
	Map.prototype != null && typeof Map.prototype.keys === 'function' && isNative(Map.prototype.keys) &&
	// Set
	typeof Set === 'function' && isNative(Set) &&
	// Set.prototype.keys
	Set.prototype != null && typeof Set.prototype.keys === 'function' && isNative(Set.prototype.keys);
	
	var setItem;
	var getItem;
	var removeItem;
	var getItemIDs;
	var addRoot;
	var removeRoot;
	var getRootIDs;
	
	if (canUseCollections) {
	  var itemMap = new Map();
	  var rootIDSet = new Set();
	
	  setItem = function (id, item) {
	    itemMap.set(id, item);
	  };
	  getItem = function (id) {
	    return itemMap.get(id);
	  };
	  removeItem = function (id) {
	    itemMap['delete'](id);
	  };
	  getItemIDs = function () {
	    return Array.from(itemMap.keys());
	  };
	
	  addRoot = function (id) {
	    rootIDSet.add(id);
	  };
	  removeRoot = function (id) {
	    rootIDSet['delete'](id);
	  };
	  getRootIDs = function () {
	    return Array.from(rootIDSet.keys());
	  };
	} else {
	  var itemByKey = {};
	  var rootByKey = {};
	
	  // Use non-numeric keys to prevent V8 performance issues:
	  // https://github.com/facebook/react/pull/7232
	  var getKeyFromID = function (id) {
	    return '.' + id;
	  };
	  var getIDFromKey = function (key) {
	    return parseInt(key.substr(1), 10);
	  };
	
	  setItem = function (id, item) {
	    var key = getKeyFromID(id);
	    itemByKey[key] = item;
	  };
	  getItem = function (id) {
	    var key = getKeyFromID(id);
	    return itemByKey[key];
	  };
	  removeItem = function (id) {
	    var key = getKeyFromID(id);
	    delete itemByKey[key];
	  };
	  getItemIDs = function () {
	    return Object.keys(itemByKey).map(getIDFromKey);
	  };
	
	  addRoot = function (id) {
	    var key = getKeyFromID(id);
	    rootByKey[key] = true;
	  };
	  removeRoot = function (id) {
	    var key = getKeyFromID(id);
	    delete rootByKey[key];
	  };
	  getRootIDs = function () {
	    return Object.keys(rootByKey).map(getIDFromKey);
	  };
	}
	
	var unmountedIDs = [];
	
	function purgeDeep(id) {
	  var item = getItem(id);
	  if (item) {
	    var childIDs = item.childIDs;
	
	    removeItem(id);
	    childIDs.forEach(purgeDeep);
	  }
	}
	
	function describeComponentFrame(name, source, ownerName) {
	  return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
	}
	
	function getDisplayName(element) {
	  if (element == null) {
	    return '#empty';
	  } else if (typeof element === 'string' || typeof element === 'number') {
	    return '#text';
	  } else if (typeof element.type === 'string') {
	    return element.type;
	  } else {
	    return element.type.displayName || element.type.name || 'Unknown';
	  }
	}
	
	function describeID(id) {
	  var name = ReactComponentTreeHook.getDisplayName(id);
	  var element = ReactComponentTreeHook.getElement(id);
	  var ownerID = ReactComponentTreeHook.getOwnerID(id);
	  var ownerName;
	  if (ownerID) {
	    ownerName = ReactComponentTreeHook.getDisplayName(ownerID);
	  }
	  process.env.NODE_ENV !== 'production' ? warning(element, 'ReactComponentTreeHook: Missing React element for debugID %s when ' + 'building stack', id) : void 0;
	  return describeComponentFrame(name, element && element._source, ownerName);
	}
	
	var ReactComponentTreeHook = {
	  onSetChildren: function (id, nextChildIDs) {
	    var item = getItem(id);
	    !item ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
	    item.childIDs = nextChildIDs;
	
	    for (var i = 0; i < nextChildIDs.length; i++) {
	      var nextChildID = nextChildIDs[i];
	      var nextChild = getItem(nextChildID);
	      !nextChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected hook events to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('140') : void 0;
	      !(nextChild.childIDs != null || typeof nextChild.element !== 'object' || nextChild.element == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onSetChildren() to fire for a container child before its parent includes it in onSetChildren().') : _prodInvariant('141') : void 0;
	      !nextChild.isMounted ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onMountComponent() to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('71') : void 0;
	      if (nextChild.parentID == null) {
	        nextChild.parentID = id;
	        // TODO: This shouldn't be necessary but mounting a new root during in
	        // componentWillMount currently causes not-yet-mounted components to
	        // be purged from our tree data so their parent id is missing.
	      }
	      !(nextChild.parentID === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onBeforeMountComponent() parent and onSetChildren() to be consistent (%s has parents %s and %s).', nextChildID, nextChild.parentID, id) : _prodInvariant('142', nextChildID, nextChild.parentID, id) : void 0;
	    }
	  },
	  onBeforeMountComponent: function (id, element, parentID) {
	    var item = {
	      element: element,
	      parentID: parentID,
	      text: null,
	      childIDs: [],
	      isMounted: false,
	      updateCount: 0
	    };
	    setItem(id, item);
	  },
	  onBeforeUpdateComponent: function (id, element) {
	    var item = getItem(id);
	    if (!item || !item.isMounted) {
	      // We may end up here as a result of setState() in componentWillUnmount().
	      // In this case, ignore the element.
	      return;
	    }
	    item.element = element;
	  },
	  onMountComponent: function (id) {
	    var item = getItem(id);
	    !item ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
	    item.isMounted = true;
	    var isRoot = item.parentID === 0;
	    if (isRoot) {
	      addRoot(id);
	    }
	  },
	  onUpdateComponent: function (id) {
	    var item = getItem(id);
	    if (!item || !item.isMounted) {
	      // We may end up here as a result of setState() in componentWillUnmount().
	      // In this case, ignore the element.
	      return;
	    }
	    item.updateCount++;
	  },
	  onUnmountComponent: function (id) {
	    var item = getItem(id);
	    if (item) {
	      // We need to check if it exists.
	      // `item` might not exist if it is inside an error boundary, and a sibling
	      // error boundary child threw while mounting. Then this instance never
	      // got a chance to mount, but it still gets an unmounting event during
	      // the error boundary cleanup.
	      item.isMounted = false;
	      var isRoot = item.parentID === 0;
	      if (isRoot) {
	        removeRoot(id);
	      }
	    }
	    unmountedIDs.push(id);
	  },
	  purgeUnmountedComponents: function () {
	    if (ReactComponentTreeHook._preventPurging) {
	      // Should only be used for testing.
	      return;
	    }
	
	    for (var i = 0; i < unmountedIDs.length; i++) {
	      var id = unmountedIDs[i];
	      purgeDeep(id);
	    }
	    unmountedIDs.length = 0;
	  },
	  isMounted: function (id) {
	    var item = getItem(id);
	    return item ? item.isMounted : false;
	  },
	  getCurrentStackAddendum: function (topElement) {
	    var info = '';
	    if (topElement) {
	      var name = getDisplayName(topElement);
	      var owner = topElement._owner;
	      info += describeComponentFrame(name, topElement._source, owner && owner.getName());
	    }
	
	    var currentOwner = ReactCurrentOwner.current;
	    var id = currentOwner && currentOwner._debugID;
	
	    info += ReactComponentTreeHook.getStackAddendumByID(id);
	    return info;
	  },
	  getStackAddendumByID: function (id) {
	    var info = '';
	    while (id) {
	      info += describeID(id);
	      id = ReactComponentTreeHook.getParentID(id);
	    }
	    return info;
	  },
	  getChildIDs: function (id) {
	    var item = getItem(id);
	    return item ? item.childIDs : [];
	  },
	  getDisplayName: function (id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (!element) {
	      return null;
	    }
	    return getDisplayName(element);
	  },
	  getElement: function (id) {
	    var item = getItem(id);
	    return item ? item.element : null;
	  },
	  getOwnerID: function (id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (!element || !element._owner) {
	      return null;
	    }
	    return element._owner._debugID;
	  },
	  getParentID: function (id) {
	    var item = getItem(id);
	    return item ? item.parentID : null;
	  },
	  getSource: function (id) {
	    var item = getItem(id);
	    var element = item ? item.element : null;
	    var source = element != null ? element._source : null;
	    return source;
	  },
	  getText: function (id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (typeof element === 'string') {
	      return element;
	    } else if (typeof element === 'number') {
	      return '' + element;
	    } else {
	      return null;
	    }
	  },
	  getUpdateCount: function (id) {
	    var item = getItem(id);
	    return item ? item.updateCount : 0;
	  },
	
	
	  getRootIDs: getRootIDs,
	  getRegisteredIDs: getItemIDs
	};
	
	module.exports = ReactComponentTreeHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(28);
	
	var ReactPropTypeLocationNames = __webpack_require__(43);
	var ReactPropTypesSecret = __webpack_require__(48);
	
	var invariant = __webpack_require__(23);
	var warning = __webpack_require__(31);
	
	var ReactComponentTreeHook;
	
	if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(46);
	}
	
	var loggedTypeFailures = {};
	
	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?object} element The React element that is being type-checked
	 * @param {?number} debugID The React component instance that is being type-checked
	 * @private
	 */
	function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
	  for (var typeSpecName in typeSpecs) {
	    if (typeSpecs.hasOwnProperty(typeSpecName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
	        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
	      } catch (ex) {
	        error = ex;
	      }
	      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;
	
	        var componentStackInfo = '';
	
	        if (process.env.NODE_ENV !== 'production') {
	          if (!ReactComponentTreeHook) {
	            ReactComponentTreeHook = __webpack_require__(46);
	          }
	          if (debugID !== null) {
	            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
	          } else if (element !== null) {
	            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
	          }
	        }
	
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
	      }
	    }
	  }
	}
	
	module.exports = checkReactTypeSpec;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 48 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
	
	module.exports = ReactPropTypesSecret;

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactElement = __webpack_require__(29);
	var ReactPropTypeLocationNames = __webpack_require__(43);
	var ReactPropTypesSecret = __webpack_require__(48);
	
	var emptyFunction = __webpack_require__(32);
	var getIteratorFn = __webpack_require__(36);
	var warning = __webpack_require__(31);
	
	/**
	 * Collection of methods that allow declaration and validation of props that are
	 * supplied to React components. Example usage:
	 *
	 *   var Props = require('ReactPropTypes');
	 *   var MyArticle = React.createClass({
	 *     propTypes: {
	 *       // An optional string prop named "description".
	 *       description: Props.string,
	 *
	 *       // A required enum prop named "category".
	 *       category: Props.oneOf(['News','Photos']).isRequired,
	 *
	 *       // A prop named "dialog" that requires an instance of Dialog.
	 *       dialog: Props.instanceOf(Dialog).isRequired
	 *     },
	 *     render: function() { ... }
	 *   });
	 *
	 * A more formal specification of how these methods are used:
	 *
	 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	 *   decl := ReactPropTypes.{type}(.isRequired)?
	 *
	 * Each and every declaration produces a function with the same signature. This
	 * allows the creation of custom validation functions. For example:
	 *
	 *  var MyLink = React.createClass({
	 *    propTypes: {
	 *      // An optional string or URI prop named "href".
	 *      href: function(props, propName, componentName) {
	 *        var propValue = props[propName];
	 *        if (propValue != null && typeof propValue !== 'string' &&
	 *            !(propValue instanceof URI)) {
	 *          return new Error(
	 *            'Expected a string or an URI for ' + propName + ' in ' +
	 *            componentName
	 *          );
	 *        }
	 *      }
	 *    },
	 *    render: function() {...}
	 *  });
	 *
	 * @internal
	 */
	
	var ANONYMOUS = '<<anonymous>>';
	
	var ReactPropTypes = {
	  array: createPrimitiveTypeChecker('array'),
	  bool: createPrimitiveTypeChecker('boolean'),
	  func: createPrimitiveTypeChecker('function'),
	  number: createPrimitiveTypeChecker('number'),
	  object: createPrimitiveTypeChecker('object'),
	  string: createPrimitiveTypeChecker('string'),
	  symbol: createPrimitiveTypeChecker('symbol'),
	
	  any: createAnyTypeChecker(),
	  arrayOf: createArrayOfTypeChecker,
	  element: createElementTypeChecker(),
	  instanceOf: createInstanceTypeChecker,
	  node: createNodeChecker(),
	  objectOf: createObjectOfTypeChecker,
	  oneOf: createEnumTypeChecker,
	  oneOfType: createUnionTypeChecker,
	  shape: createShapeTypeChecker
	};
	
	/**
	 * inlined Object.is polyfill to avoid requiring consumers ship their own
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	 */
	/*eslint-disable no-self-compare*/
	function is(x, y) {
	  // SameValue algorithm
	  if (x === y) {
	    // Steps 1-5, 7-10
	    // Steps 6.b-6.e: +0 != -0
	    return x !== 0 || 1 / x === 1 / y;
	  } else {
	    // Step 6.a: NaN == NaN
	    return x !== x && y !== y;
	  }
	}
	/*eslint-enable no-self-compare*/
	
	/**
	 * We use an Error-like object for backward compatibility as people may call
	 * PropTypes directly and inspect their output. However we don't use real
	 * Errors anymore. We don't inspect their stack anyway, and creating them
	 * is prohibitively expensive if they are created too often, such as what
	 * happens in oneOfType() for any type before the one that matched.
	 */
	function PropTypeError(message) {
	  this.message = message;
	  this.stack = '';
	}
	// Make `instanceof Error` still work for returned errors.
	PropTypeError.prototype = Error.prototype;
	
	function createChainableTypeChecker(validate) {
	  if (process.env.NODE_ENV !== 'production') {
	    var manualPropTypeCallCache = {};
	  }
	  function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
	    componentName = componentName || ANONYMOUS;
	    propFullName = propFullName || propName;
	    if (process.env.NODE_ENV !== 'production') {
	      if (secret !== ReactPropTypesSecret && typeof console !== 'undefined') {
	        var cacheKey = componentName + ':' + propName;
	        if (!manualPropTypeCallCache[cacheKey]) {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'You are manually calling a React.PropTypes validation ' + 'function for the `%s` prop on `%s`. This is deprecated ' + 'and will not work in production with the next major version. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.', propFullName, componentName) : void 0;
	          manualPropTypeCallCache[cacheKey] = true;
	        }
	      }
	    }
	    if (props[propName] == null) {
	      var locationName = ReactPropTypeLocationNames[location];
	      if (isRequired) {
	        if (props[propName] === null) {
	          return new PropTypeError('The ' + locationName + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
	        }
	        return new PropTypeError('The ' + locationName + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
	      }
	      return null;
	    } else {
	      return validate(props, propName, componentName, location, propFullName);
	    }
	  }
	
	  var chainedCheckType = checkType.bind(null, false);
	  chainedCheckType.isRequired = checkType.bind(null, true);
	
	  return chainedCheckType;
	}
	
	function createPrimitiveTypeChecker(expectedType) {
	  function validate(props, propName, componentName, location, propFullName, secret) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== expectedType) {
	      var locationName = ReactPropTypeLocationNames[location];
	      // `propValue` being instance of, say, date/regexp, pass the 'object'
	      // check, but we can offer a more precise error message here rather than
	      // 'of type `object`'.
	      var preciseType = getPreciseType(propValue);
	
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createAnyTypeChecker() {
	  return createChainableTypeChecker(emptyFunction.thatReturns(null));
	}
	
	function createArrayOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (typeof typeChecker !== 'function') {
	      return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
	    }
	    var propValue = props[propName];
	    if (!Array.isArray(propValue)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var propType = getPropType(propValue);
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	    }
	    for (var i = 0; i < propValue.length; i++) {
	      var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
	      if (error instanceof Error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createElementTypeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    if (!ReactElement.isValidElement(propValue)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var propType = getPropType(propValue);
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createInstanceTypeChecker(expectedClass) {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!(props[propName] instanceof expectedClass)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var expectedClassName = expectedClass.name || ANONYMOUS;
	      var actualClassName = getClassName(props[propName]);
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createEnumTypeChecker(expectedValues) {
	  if (!Array.isArray(expectedValues)) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
	    return emptyFunction.thatReturnsNull;
	  }
	
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    for (var i = 0; i < expectedValues.length; i++) {
	      if (is(propValue, expectedValues[i])) {
	        return null;
	      }
	    }
	
	    var locationName = ReactPropTypeLocationNames[location];
	    var valuesString = JSON.stringify(expectedValues);
	    return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createObjectOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (typeof typeChecker !== 'function') {
	      return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
	    }
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	    }
	    for (var key in propValue) {
	      if (propValue.hasOwnProperty(key)) {
	        var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createUnionTypeChecker(arrayOfTypeCheckers) {
	  if (!Array.isArray(arrayOfTypeCheckers)) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
	    return emptyFunction.thatReturnsNull;
	  }
	
	  function validate(props, propName, componentName, location, propFullName) {
	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
	        return null;
	      }
	    }
	
	    var locationName = ReactPropTypeLocationNames[location];
	    return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createNodeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!isNode(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createShapeTypeChecker(shapeTypes) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	    }
	    for (var key in shapeTypes) {
	      var checker = shapeTypes[key];
	      if (!checker) {
	        continue;
	      }
	      var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	      if (error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function isNode(propValue) {
	  switch (typeof propValue) {
	    case 'number':
	    case 'string':
	    case 'undefined':
	      return true;
	    case 'boolean':
	      return !propValue;
	    case 'object':
	      if (Array.isArray(propValue)) {
	        return propValue.every(isNode);
	      }
	      if (propValue === null || ReactElement.isValidElement(propValue)) {
	        return true;
	      }
	
	      var iteratorFn = getIteratorFn(propValue);
	      if (iteratorFn) {
	        var iterator = iteratorFn.call(propValue);
	        var step;
	        if (iteratorFn !== propValue.entries) {
	          while (!(step = iterator.next()).done) {
	            if (!isNode(step.value)) {
	              return false;
	            }
	          }
	        } else {
	          // Iterator will provide entry [k,v] tuples rather than values.
	          while (!(step = iterator.next()).done) {
	            var entry = step.value;
	            if (entry) {
	              if (!isNode(entry[1])) {
	                return false;
	              }
	            }
	          }
	        }
	      } else {
	        return false;
	      }
	
	      return true;
	    default:
	      return false;
	  }
	}
	
	function isSymbol(propType, propValue) {
	  // Native Symbol.
	  if (propType === 'symbol') {
	    return true;
	  }
	
	  // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
	  if (propValue['@@toStringTag'] === 'Symbol') {
	    return true;
	  }
	
	  // Fallback for non-spec compliant Symbols which are polyfilled.
	  if (typeof Symbol === 'function' && propValue instanceof Symbol) {
	    return true;
	  }
	
	  return false;
	}
	
	// Equivalent of `typeof` but with special handling for array and regexp.
	function getPropType(propValue) {
	  var propType = typeof propValue;
	  if (Array.isArray(propValue)) {
	    return 'array';
	  }
	  if (propValue instanceof RegExp) {
	    // Old webkits (at least until Android 4.0) return 'function' rather than
	    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	    // passes PropTypes.object.
	    return 'object';
	  }
	  if (isSymbol(propType, propValue)) {
	    return 'symbol';
	  }
	  return propType;
	}
	
	// This handles more types than `getPropType`. Only used for error messages.
	// See `createPrimitiveTypeChecker`.
	function getPreciseType(propValue) {
	  var propType = getPropType(propValue);
	  if (propType === 'object') {
	    if (propValue instanceof Date) {
	      return 'date';
	    } else if (propValue instanceof RegExp) {
	      return 'regexp';
	    }
	  }
	  return propType;
	}
	
	// Returns class name of the object, if any.
	function getClassName(propValue) {
	  if (!propValue.constructor || !propValue.constructor.name) {
	    return ANONYMOUS;
	  }
	  return propValue.constructor.name;
	}
	
	module.exports = ReactPropTypes;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 50 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	module.exports = '15.4.2';

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	'use strict';
	
	var _prodInvariant = __webpack_require__(28);
	
	var ReactElement = __webpack_require__(29);
	
	var invariant = __webpack_require__(23);
	
	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.only
	 *
	 * The current implementation of this function assumes that a single child gets
	 * passed without a wrapper, but the purpose of this helper function is to
	 * abstract away the particular structure of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactElement} The first and only `ReactElement` contained in the
	 * structure.
	 */
	function onlyChild(children) {
	  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React.Children.only expected to receive a single React element child.') : _prodInvariant('143') : void 0;
	  return children;
	}
	
	module.exports = onlyChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(25);
	
	var EventPluginRegistry = __webpack_require__(53);
	var ReactEventEmitterMixin = __webpack_require__(54);
	var ViewportMetrics = __webpack_require__(60);
	
	var getVendorPrefixedEventName = __webpack_require__(61);
	var isEventSupported = __webpack_require__(62);
	
	/**
	 * Summary of `ReactBrowserEventEmitter` event handling:
	 *
	 *  - Top-level delegation is used to trap most native browser events. This
	 *    may only occur in the main thread and is the responsibility of
	 *    ReactEventListener, which is injected and can therefore support pluggable
	 *    event sources. This is the only work that occurs in the main thread.
	 *
	 *  - We normalize and de-duplicate events to account for browser quirks. This
	 *    may be done in the worker thread.
	 *
	 *  - Forward these native events (with the associated top-level type used to
	 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
	 *    to extract any synthetic events.
	 *
	 *  - The `EventPluginHub` will then process each event by annotating them with
	 *    "dispatches", a sequence of listeners and IDs that care about that event.
	 *
	 *  - The `EventPluginHub` then dispatches the events.
	 *
	 * Overview of React and the event system:
	 *
	 * +------------+    .
	 * |    DOM     |    .
	 * +------------+    .
	 *       |           .
	 *       v           .
	 * +------------+    .
	 * | ReactEvent |    .
	 * |  Listener  |    .
	 * +------------+    .                         +-----------+
	 *       |           .               +--------+|SimpleEvent|
	 *       |           .               |         |Plugin     |
	 * +-----|------+    .               v         +-----------+
	 * |     |      |    .    +--------------+                    +------------+
	 * |     +-----------.--->|EventPluginHub|                    |    Event   |
	 * |            |    .    |              |     +-----------+  | Propagators|
	 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
	 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
	 * |            |    .    |              |     +-----------+  |  utilities |
	 * |     +-----------.--->|              |                    +------------+
	 * |     |      |    .    +--------------+
	 * +-----|------+    .                ^        +-----------+
	 *       |           .                |        |Enter/Leave|
	 *       +           .                +-------+|Plugin     |
	 * +-------------+   .                         +-----------+
	 * | application |   .
	 * |-------------|   .
	 * |             |   .
	 * |             |   .
	 * +-------------+   .
	 *                   .
	 *    React Core     .  General Purpose Event Plugin System
	 */
	
	var hasEventPageXY;
	var alreadyListeningTo = {};
	var isMonitoringScrollValue = false;
	var reactTopListenersCounter = 0;
	
	// For events like 'submit' which don't consistently bubble (which we trap at a
	// lower node than `document`), binding at `document` would cause duplicate
	// events so we don't include them here
	var topEventMapping = {
	  topAbort: 'abort',
	  topAnimationEnd: getVendorPrefixedEventName('animationend') || 'animationend',
	  topAnimationIteration: getVendorPrefixedEventName('animationiteration') || 'animationiteration',
	  topAnimationStart: getVendorPrefixedEventName('animationstart') || 'animationstart',
	  topBlur: 'blur',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topChange: 'change',
	  topClick: 'click',
	  topCompositionEnd: 'compositionend',
	  topCompositionStart: 'compositionstart',
	  topCompositionUpdate: 'compositionupdate',
	  topContextMenu: 'contextmenu',
	  topCopy: 'copy',
	  topCut: 'cut',
	  topDoubleClick: 'dblclick',
	  topDrag: 'drag',
	  topDragEnd: 'dragend',
	  topDragEnter: 'dragenter',
	  topDragExit: 'dragexit',
	  topDragLeave: 'dragleave',
	  topDragOver: 'dragover',
	  topDragStart: 'dragstart',
	  topDrop: 'drop',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topFocus: 'focus',
	  topInput: 'input',
	  topKeyDown: 'keydown',
	  topKeyPress: 'keypress',
	  topKeyUp: 'keyup',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topMouseDown: 'mousedown',
	  topMouseMove: 'mousemove',
	  topMouseOut: 'mouseout',
	  topMouseOver: 'mouseover',
	  topMouseUp: 'mouseup',
	  topPaste: 'paste',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topScroll: 'scroll',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topSelectionChange: 'selectionchange',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTextInput: 'textInput',
	  topTimeUpdate: 'timeupdate',
	  topTouchCancel: 'touchcancel',
	  topTouchEnd: 'touchend',
	  topTouchMove: 'touchmove',
	  topTouchStart: 'touchstart',
	  topTransitionEnd: getVendorPrefixedEventName('transitionend') || 'transitionend',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting',
	  topWheel: 'wheel'
	};
	
	/**
	 * To ensure no conflicts with other potential React instances on the page
	 */
	var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);
	
	function getListeningForDocument(mountAt) {
	  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
	  // directly.
	  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
	    mountAt[topListenersIDKey] = reactTopListenersCounter++;
	    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
	  }
	  return alreadyListeningTo[mountAt[topListenersIDKey]];
	}
	
	/**
	 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
	 * example:
	 *
	 *   EventPluginHub.putListener('myID', 'onClick', myFunction);
	 *
	 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
	 *
	 * @internal
	 */
	var ReactBrowserEventEmitter = _assign({}, ReactEventEmitterMixin, {
	
	  /**
	   * Injectable event backend
	   */
	  ReactEventListener: null,
	
	  injection: {
	    /**
	     * @param {object} ReactEventListener
	     */
	    injectReactEventListener: function (ReactEventListener) {
	      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
	      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
	    }
	  },
	
	  /**
	   * Sets whether or not any created callbacks should be enabled.
	   *
	   * @param {boolean} enabled True if callbacks should be enabled.
	   */
	  setEnabled: function (enabled) {
	    if (ReactBrowserEventEmitter.ReactEventListener) {
	      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
	    }
	  },
	
	  /**
	   * @return {boolean} True if callbacks are enabled.
	   */
	  isEnabled: function () {
	    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
	  },
	
	  /**
	   * We listen for bubbled touch events on the document object.
	   *
	   * Firefox v8.01 (and possibly others) exhibited strange behavior when
	   * mounting `onmousemove` events at some node that was not the document
	   * element. The symptoms were that if your mouse is not moving over something
	   * contained within that mount point (for example on the background) the
	   * top-level listeners for `onmousemove` won't be called. However, if you
	   * register the `mousemove` on the document object, then it will of course
	   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
	   * top-level listeners to the document object only, at least for these
	   * movement types of events and possibly all events.
	   *
	   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	   *
	   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
	   * they bubble to document.
	   *
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {object} contentDocumentHandle Document which owns the container
	   */
	  listenTo: function (registrationName, contentDocumentHandle) {
	    var mountAt = contentDocumentHandle;
	    var isListening = getListeningForDocument(mountAt);
	    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];
	
	    for (var i = 0; i < dependencies.length; i++) {
	      var dependency = dependencies[i];
	      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
	        if (dependency === 'topWheel') {
	          if (isEventSupported('wheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'wheel', mountAt);
	          } else if (isEventSupported('mousewheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'mousewheel', mountAt);
	          } else {
	            // Firefox needs to capture a different mouse scroll event.
	            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'DOMMouseScroll', mountAt);
	          }
	        } else if (dependency === 'topScroll') {
	
	          if (isEventSupported('scroll', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topScroll', 'scroll', mountAt);
	          } else {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topScroll', 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
	          }
	        } else if (dependency === 'topFocus' || dependency === 'topBlur') {
	
	          if (isEventSupported('focus', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topFocus', 'focus', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topBlur', 'blur', mountAt);
	          } else if (isEventSupported('focusin')) {
	            // IE has `focusin` and `focusout` events which bubble.
	            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topFocus', 'focusin', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topBlur', 'focusout', mountAt);
	          }
	
	          // to make sure blur and focus event listeners are only attached once
	          isListening.topBlur = true;
	          isListening.topFocus = true;
	        } else if (topEventMapping.hasOwnProperty(dependency)) {
	          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
	        }
	
	        isListening[dependency] = true;
	      }
	    }
	  },
	
	  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
	  },
	
	  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
	  },
	
	  /**
	   * Protect against document.createEvent() returning null
	   * Some popup blocker extensions appear to do this:
	   * https://github.com/facebook/react/issues/6887
	   */
	  supportsEventPageXY: function () {
	    if (!document.createEvent) {
	      return false;
	    }
	    var ev = document.createEvent('MouseEvent');
	    return ev != null && 'pageX' in ev;
	  },
	
	  /**
	   * Listens to window scroll and resize events. We cache scroll values so that
	   * application code can access them without triggering reflows.
	   *
	   * ViewportMetrics is only used by SyntheticMouse/TouchEvent and only when
	   * pageX/pageY isn't supported (legacy browsers).
	   *
	   * NOTE: Scroll events do not bubble.
	   *
	   * @see http://www.quirksmode.org/dom/events/scroll.html
	   */
	  ensureScrollValueMonitoring: function () {
	    if (hasEventPageXY === undefined) {
	      hasEventPageXY = ReactBrowserEventEmitter.supportsEventPageXY();
	    }
	    if (!hasEventPageXY && !isMonitoringScrollValue) {
	      var refresh = ViewportMetrics.refreshScrollValues;
	      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
	      isMonitoringScrollValue = true;
	    }
	  }
	
	});
	
	module.exports = ReactBrowserEventEmitter;

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(14);
	
	var invariant = __webpack_require__(23);
	
	/**
	 * Injectable ordering of event plugins.
	 */
	var eventPluginOrder = null;
	
	/**
	 * Injectable mapping from names to event plugin modules.
	 */
	var namesToPlugins = {};
	
	/**
	 * Recomputes the plugin list using the injected plugins and plugin ordering.
	 *
	 * @private
	 */
	function recomputePluginOrdering() {
	  if (!eventPluginOrder) {
	    // Wait until an `eventPluginOrder` is injected.
	    return;
	  }
	  for (var pluginName in namesToPlugins) {
	    var pluginModule = namesToPlugins[pluginName];
	    var pluginIndex = eventPluginOrder.indexOf(pluginName);
	    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : _prodInvariant('96', pluginName) : void 0;
	    if (EventPluginRegistry.plugins[pluginIndex]) {
	      continue;
	    }
	    !pluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : _prodInvariant('97', pluginName) : void 0;
	    EventPluginRegistry.plugins[pluginIndex] = pluginModule;
	    var publishedEvents = pluginModule.eventTypes;
	    for (var eventName in publishedEvents) {
	      !publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : _prodInvariant('98', eventName, pluginName) : void 0;
	    }
	  }
	}
	
	/**
	 * Publishes an event so that it can be dispatched by the supplied plugin.
	 *
	 * @param {object} dispatchConfig Dispatch configuration for the event.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @return {boolean} True if the event was successfully published.
	 * @private
	 */
	function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
	  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.', eventName) : _prodInvariant('99', eventName) : void 0;
	  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;
	
	  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	  if (phasedRegistrationNames) {
	    for (var phaseName in phasedRegistrationNames) {
	      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
	        var phasedRegistrationName = phasedRegistrationNames[phaseName];
	        publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
	      }
	    }
	    return true;
	  } else if (dispatchConfig.registrationName) {
	    publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
	    return true;
	  }
	  return false;
	}
	
	/**
	 * Publishes a registration name that is used to identify dispatched events and
	 * can be used with `EventPluginHub.putListener` to register listeners.
	 *
	 * @param {string} registrationName Registration name to add.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @private
	 */
	function publishRegistrationName(registrationName, pluginModule, eventName) {
	  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.', registrationName) : _prodInvariant('100', registrationName) : void 0;
	  EventPluginRegistry.registrationNameModules[registrationName] = pluginModule;
	  EventPluginRegistry.registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;
	
	  if (process.env.NODE_ENV !== 'production') {
	    var lowerCasedName = registrationName.toLowerCase();
	    EventPluginRegistry.possibleRegistrationNames[lowerCasedName] = registrationName;
	
	    if (registrationName === 'onDoubleClick') {
	      EventPluginRegistry.possibleRegistrationNames.ondblclick = registrationName;
	    }
	  }
	}
	
	/**
	 * Registers plugins so that they can extract and dispatch events.
	 *
	 * @see {EventPluginHub}
	 */
	var EventPluginRegistry = {
	
	  /**
	   * Ordered list of injected plugins.
	   */
	  plugins: [],
	
	  /**
	   * Mapping from event name to dispatch config
	   */
	  eventNameDispatchConfigs: {},
	
	  /**
	   * Mapping from registration name to plugin module
	   */
	  registrationNameModules: {},
	
	  /**
	   * Mapping from registration name to event name
	   */
	  registrationNameDependencies: {},
	
	  /**
	   * Mapping from lowercase registration names to the properly cased version,
	   * used to warn in the case of missing event handlers. Available
	   * only in __DEV__.
	   * @type {Object}
	   */
	  possibleRegistrationNames: process.env.NODE_ENV !== 'production' ? {} : null,
	  // Trust the developer to only use possibleRegistrationNames in __DEV__
	
	  /**
	   * Injects an ordering of plugins (by plugin name). This allows the ordering
	   * to be decoupled from injection of the actual plugins so that ordering is
	   * always deterministic regardless of packaging, on-the-fly injection, etc.
	   *
	   * @param {array} InjectedEventPluginOrder
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginOrder}
	   */
	  injectEventPluginOrder: function (injectedEventPluginOrder) {
	    !!eventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.') : _prodInvariant('101') : void 0;
	    // Clone the ordering so it cannot be dynamically mutated.
	    eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
	    recomputePluginOrdering();
	  },
	
	  /**
	   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
	   * in the ordering injected by `injectEventPluginOrder`.
	   *
	   * Plugins can be injected as part of page initialization or on-the-fly.
	   *
	   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginsByName}
	   */
	  injectEventPluginsByName: function (injectedNamesToPlugins) {
	    var isOrderingDirty = false;
	    for (var pluginName in injectedNamesToPlugins) {
	      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
	        continue;
	      }
	      var pluginModule = injectedNamesToPlugins[pluginName];
	      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
	        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.', pluginName) : _prodInvariant('102', pluginName) : void 0;
	        namesToPlugins[pluginName] = pluginModule;
	        isOrderingDirty = true;
	      }
	    }
	    if (isOrderingDirty) {
	      recomputePluginOrdering();
	    }
	  },
	
	  /**
	   * Looks up the plugin for the supplied event.
	   *
	   * @param {object} event A synthetic event.
	   * @return {?object} The plugin that created the supplied event.
	   * @internal
	   */
	  getPluginModuleForEvent: function (event) {
	    var dispatchConfig = event.dispatchConfig;
	    if (dispatchConfig.registrationName) {
	      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
	    }
	    if (dispatchConfig.phasedRegistrationNames !== undefined) {
	      // pulling phasedRegistrationNames out of dispatchConfig helps Flow see
	      // that it is not undefined.
	      var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	
	      for (var phase in phasedRegistrationNames) {
	        if (!phasedRegistrationNames.hasOwnProperty(phase)) {
	          continue;
	        }
	        var pluginModule = EventPluginRegistry.registrationNameModules[phasedRegistrationNames[phase]];
	        if (pluginModule) {
	          return pluginModule;
	        }
	      }
	    }
	    return null;
	  },
	
	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _resetEventPlugins: function () {
	    eventPluginOrder = null;
	    for (var pluginName in namesToPlugins) {
	      if (namesToPlugins.hasOwnProperty(pluginName)) {
	        delete namesToPlugins[pluginName];
	      }
	    }
	    EventPluginRegistry.plugins.length = 0;
	
	    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
	    for (var eventName in eventNameDispatchConfigs) {
	      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
	        delete eventNameDispatchConfigs[eventName];
	      }
	    }
	
	    var registrationNameModules = EventPluginRegistry.registrationNameModules;
	    for (var registrationName in registrationNameModules) {
	      if (registrationNameModules.hasOwnProperty(registrationName)) {
	        delete registrationNameModules[registrationName];
	      }
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      var possibleRegistrationNames = EventPluginRegistry.possibleRegistrationNames;
	      for (var lowerCasedName in possibleRegistrationNames) {
	        if (possibleRegistrationNames.hasOwnProperty(lowerCasedName)) {
	          delete possibleRegistrationNames[lowerCasedName];
	        }
	      }
	    }
	  }
	
	};
	
	module.exports = EventPluginRegistry;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var EventPluginHub = __webpack_require__(55);
	
	function runEventQueueInBatch(events) {
	  EventPluginHub.enqueueEvents(events);
	  EventPluginHub.processEventQueue(false);
	}
	
	var ReactEventEmitterMixin = {
	
	  /**
	   * Streams a fired top-level event to `EventPluginHub` where plugins have the
	   * opportunity to create `ReactEvent`s to be dispatched.
	   */
	  handleTopLevel: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var events = EventPluginHub.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
	    runEventQueueInBatch(events);
	  }
	};
	
	module.exports = ReactEventEmitterMixin;

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(14);
	
	var EventPluginRegistry = __webpack_require__(53);
	var EventPluginUtils = __webpack_require__(56);
	var ReactErrorUtils = __webpack_require__(57);
	
	var accumulateInto = __webpack_require__(58);
	var forEachAccumulated = __webpack_require__(59);
	var invariant = __webpack_require__(23);
	
	/**
	 * Internal store for event listeners
	 */
	var listenerBank = {};
	
	/**
	 * Internal queue of events that have accumulated their dispatches and are
	 * waiting to have their dispatches executed.
	 */
	var eventQueue = null;
	
	/**
	 * Dispatches an event and releases it back into the pool, unless persistent.
	 *
	 * @param {?object} event Synthetic event to be dispatched.
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @private
	 */
	var executeDispatchesAndRelease = function (event, simulated) {
	  if (event) {
	    EventPluginUtils.executeDispatchesInOrder(event, simulated);
	
	    if (!event.isPersistent()) {
	      event.constructor.release(event);
	    }
	  }
	};
	var executeDispatchesAndReleaseSimulated = function (e) {
	  return executeDispatchesAndRelease(e, true);
	};
	var executeDispatchesAndReleaseTopLevel = function (e) {
	  return executeDispatchesAndRelease(e, false);
	};
	
	var getDictionaryKey = function (inst) {
	  // Prevents V8 performance issue:
	  // https://github.com/facebook/react/pull/7232
	  return '.' + inst._rootNodeID;
	};
	
	function isInteractive(tag) {
	  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
	}
	
	function shouldPreventMouseEvent(name, type, props) {
	  switch (name) {
	    case 'onClick':
	    case 'onClickCapture':
	    case 'onDoubleClick':
	    case 'onDoubleClickCapture':
	    case 'onMouseDown':
	    case 'onMouseDownCapture':
	    case 'onMouseMove':
	    case 'onMouseMoveCapture':
	    case 'onMouseUp':
	    case 'onMouseUpCapture':
	      return !!(props.disabled && isInteractive(type));
	    default:
	      return false;
	  }
	}
	
	/**
	 * This is a unified interface for event plugins to be installed and configured.
	 *
	 * Event plugins can implement the following properties:
	 *
	 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
	 *     Required. When a top-level event is fired, this method is expected to
	 *     extract synthetic events that will in turn be queued and dispatched.
	 *
	 *   `eventTypes` {object}
	 *     Optional, plugins that fire events must publish a mapping of registration
	 *     names that are used to register listeners. Values of this mapping must
	 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
	 *
	 *   `executeDispatch` {function(object, function, string)}
	 *     Optional, allows plugins to override how an event gets dispatched. By
	 *     default, the listener is simply invoked.
	 *
	 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
	 *
	 * @public
	 */
	var EventPluginHub = {
	
	  /**
	   * Methods for injecting dependencies.
	   */
	  injection: {
	
	    /**
	     * @param {array} InjectedEventPluginOrder
	     * @public
	     */
	    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,
	
	    /**
	     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	     */
	    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName
	
	  },
	
	  /**
	   * Stores `listener` at `listenerBank[registrationName][key]`. Is idempotent.
	   *
	   * @param {object} inst The instance, which is the source of events.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {function} listener The callback to store.
	   */
	  putListener: function (inst, registrationName, listener) {
	    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : _prodInvariant('94', registrationName, typeof listener) : void 0;
	
	    var key = getDictionaryKey(inst);
	    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
	    bankForRegistrationName[key] = listener;
	
	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.didPutListener) {
	      PluginModule.didPutListener(inst, registrationName, listener);
	    }
	  },
	
	  /**
	   * @param {object} inst The instance, which is the source of events.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @return {?function} The stored callback.
	   */
	  getListener: function (inst, registrationName) {
	    // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
	    // live here; needs to be moved to a better place soon
	    var bankForRegistrationName = listenerBank[registrationName];
	    if (shouldPreventMouseEvent(registrationName, inst._currentElement.type, inst._currentElement.props)) {
	      return null;
	    }
	    var key = getDictionaryKey(inst);
	    return bankForRegistrationName && bankForRegistrationName[key];
	  },
	
	  /**
	   * Deletes a listener from the registration bank.
	   *
	   * @param {object} inst The instance, which is the source of events.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   */
	  deleteListener: function (inst, registrationName) {
	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.willDeleteListener) {
	      PluginModule.willDeleteListener(inst, registrationName);
	    }
	
	    var bankForRegistrationName = listenerBank[registrationName];
	    // TODO: This should never be null -- when is it?
	    if (bankForRegistrationName) {
	      var key = getDictionaryKey(inst);
	      delete bankForRegistrationName[key];
	    }
	  },
	
	  /**
	   * Deletes all listeners for the DOM element with the supplied ID.
	   *
	   * @param {object} inst The instance, which is the source of events.
	   */
	  deleteAllListeners: function (inst) {
	    var key = getDictionaryKey(inst);
	    for (var registrationName in listenerBank) {
	      if (!listenerBank.hasOwnProperty(registrationName)) {
	        continue;
	      }
	
	      if (!listenerBank[registrationName][key]) {
	        continue;
	      }
	
	      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	      if (PluginModule && PluginModule.willDeleteListener) {
	        PluginModule.willDeleteListener(inst, registrationName);
	      }
	
	      delete listenerBank[registrationName][key];
	    }
	  },
	
	  /**
	   * Allows registered plugins an opportunity to extract events from top-level
	   * native browser events.
	   *
	   * @return {*} An accumulation of synthetic events.
	   * @internal
	   */
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var events;
	    var plugins = EventPluginRegistry.plugins;
	    for (var i = 0; i < plugins.length; i++) {
	      // Not every plugin in the ordering may be loaded at runtime.
	      var possiblePlugin = plugins[i];
	      if (possiblePlugin) {
	        var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
	        if (extractedEvents) {
	          events = accumulateInto(events, extractedEvents);
	        }
	      }
	    }
	    return events;
	  },
	
	  /**
	   * Enqueues a synthetic event that should be dispatched when
	   * `processEventQueue` is invoked.
	   *
	   * @param {*} events An accumulation of synthetic events.
	   * @internal
	   */
	  enqueueEvents: function (events) {
	    if (events) {
	      eventQueue = accumulateInto(eventQueue, events);
	    }
	  },
	
	  /**
	   * Dispatches all synthetic events on the event queue.
	   *
	   * @internal
	   */
	  processEventQueue: function (simulated) {
	    // Set `eventQueue` to null before processing it so that we can tell if more
	    // events get enqueued while processing.
	    var processingEventQueue = eventQueue;
	    eventQueue = null;
	    if (simulated) {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
	    } else {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
	    }
	    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.') : _prodInvariant('95') : void 0;
	    // This would be a good time to rethrow if any of the event handlers threw.
	    ReactErrorUtils.rethrowCaughtError();
	  },
	
	  /**
	   * These are needed for tests only. Do not use!
	   */
	  __purge: function () {
	    listenerBank = {};
	  },
	
	  __getListenerBank: function () {
	    return listenerBank;
	  }
	
	};
	
	module.exports = EventPluginHub;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(14);
	
	var ReactErrorUtils = __webpack_require__(57);
	
	var invariant = __webpack_require__(23);
	var warning = __webpack_require__(31);
	
	/**
	 * Injected dependencies:
	 */
	
	/**
	 * - `ComponentTree`: [required] Module that can convert between React instances
	 *   and actual node references.
	 */
	var ComponentTree;
	var TreeTraversal;
	var injection = {
	  injectComponentTree: function (Injected) {
	    ComponentTree = Injected;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.getNodeFromInstance && Injected.getInstanceFromNode, 'EventPluginUtils.injection.injectComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.') : void 0;
	    }
	  },
	  injectTreeTraversal: function (Injected) {
	    TreeTraversal = Injected;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.isAncestor && Injected.getLowestCommonAncestor, 'EventPluginUtils.injection.injectTreeTraversal(...): Injected ' + 'module is missing isAncestor or getLowestCommonAncestor.') : void 0;
	    }
	  }
	};
	
	function isEndish(topLevelType) {
	  return topLevelType === 'topMouseUp' || topLevelType === 'topTouchEnd' || topLevelType === 'topTouchCancel';
	}
	
	function isMoveish(topLevelType) {
	  return topLevelType === 'topMouseMove' || topLevelType === 'topTouchMove';
	}
	function isStartish(topLevelType) {
	  return topLevelType === 'topMouseDown' || topLevelType === 'topTouchStart';
	}
	
	var validateEventDispatches;
	if (process.env.NODE_ENV !== 'production') {
	  validateEventDispatches = function (event) {
	    var dispatchListeners = event._dispatchListeners;
	    var dispatchInstances = event._dispatchInstances;
	
	    var listenersIsArr = Array.isArray(dispatchListeners);
	    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;
	
	    var instancesIsArr = Array.isArray(dispatchInstances);
	    var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;
	
	    process.env.NODE_ENV !== 'production' ? warning(instancesIsArr === listenersIsArr && instancesLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : void 0;
	  };
	}
	
	/**
	 * Dispatch the event to the listener.
	 * @param {SyntheticEvent} event SyntheticEvent to handle
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @param {function} listener Application-level callback
	 * @param {*} inst Internal component instance
	 */
	function executeDispatch(event, simulated, listener, inst) {
	  var type = event.type || 'unknown-event';
	  event.currentTarget = EventPluginUtils.getNodeFromInstance(inst);
	  if (simulated) {
	    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event);
	  } else {
	    ReactErrorUtils.invokeGuardedCallback(type, listener, event);
	  }
	  event.currentTarget = null;
	}
	
	/**
	 * Standard/simple iteration through an event's collected dispatches.
	 */
	function executeDispatchesInOrder(event, simulated) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchInstances = event._dispatchInstances;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and Instances are two parallel arrays that are always in sync.
	      executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
	    }
	  } else if (dispatchListeners) {
	    executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
	  }
	  event._dispatchListeners = null;
	  event._dispatchInstances = null;
	}
	
	/**
	 * Standard/simple iteration through an event's collected dispatches, but stops
	 * at the first dispatch execution returning true, and returns that id.
	 *
	 * @return {?string} id of the first dispatch execution who's listener returns
	 * true, or null if no listener returned true.
	 */
	function executeDispatchesInOrderStopAtTrueImpl(event) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchInstances = event._dispatchInstances;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and Instances are two parallel arrays that are always in sync.
	      if (dispatchListeners[i](event, dispatchInstances[i])) {
	        return dispatchInstances[i];
	      }
	    }
	  } else if (dispatchListeners) {
	    if (dispatchListeners(event, dispatchInstances)) {
	      return dispatchInstances;
	    }
	  }
	  return null;
	}
	
	/**
	 * @see executeDispatchesInOrderStopAtTrueImpl
	 */
	function executeDispatchesInOrderStopAtTrue(event) {
	  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
	  event._dispatchInstances = null;
	  event._dispatchListeners = null;
	  return ret;
	}
	
	/**
	 * Execution of a "direct" dispatch - there must be at most one dispatch
	 * accumulated on the event or it is considered an error. It doesn't really make
	 * sense for an event with multiple dispatches (bubbled) to keep track of the
	 * return values at each dispatch execution, but it does tend to make sense when
	 * dealing with "direct" dispatches.
	 *
	 * @return {*} The return value of executing the single dispatch.
	 */
	function executeDirectDispatch(event) {
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  var dispatchListener = event._dispatchListeners;
	  var dispatchInstance = event._dispatchInstances;
	  !!Array.isArray(dispatchListener) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : _prodInvariant('103') : void 0;
	  event.currentTarget = dispatchListener ? EventPluginUtils.getNodeFromInstance(dispatchInstance) : null;
	  var res = dispatchListener ? dispatchListener(event) : null;
	  event.currentTarget = null;
	  event._dispatchListeners = null;
	  event._dispatchInstances = null;
	  return res;
	}
	
	/**
	 * @param {SyntheticEvent} event
	 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
	 */
	function hasDispatches(event) {
	  return !!event._dispatchListeners;
	}
	
	/**
	 * General utilities that are useful in creating custom Event Plugins.
	 */
	var EventPluginUtils = {
	  isEndish: isEndish,
	  isMoveish: isMoveish,
	  isStartish: isStartish,
	
	  executeDirectDispatch: executeDirectDispatch,
	  executeDispatchesInOrder: executeDispatchesInOrder,
	  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
	  hasDispatches: hasDispatches,
	
	  getInstanceFromNode: function (node) {
	    return ComponentTree.getInstanceFromNode(node);
	  },
	  getNodeFromInstance: function (node) {
	    return ComponentTree.getNodeFromInstance(node);
	  },
	  isAncestor: function (a, b) {
	    return TreeTraversal.isAncestor(a, b);
	  },
	  getLowestCommonAncestor: function (a, b) {
	    return TreeTraversal.getLowestCommonAncestor(a, b);
	  },
	  getParentInstance: function (inst) {
	    return TreeTraversal.getParentInstance(inst);
	  },
	  traverseTwoPhase: function (target, fn, arg) {
	    return TreeTraversal.traverseTwoPhase(target, fn, arg);
	  },
	  traverseEnterLeave: function (from, to, fn, argFrom, argTo) {
	    return TreeTraversal.traverseEnterLeave(from, to, fn, argFrom, argTo);
	  },
	
	  injection: injection
	};
	
	module.exports = EventPluginUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var caughtError = null;
	
	/**
	 * Call a function while guarding against errors that happens within it.
	 *
	 * @param {String} name of the guard to use for logging or debugging
	 * @param {Function} func The function to invoke
	 * @param {*} a First argument
	 * @param {*} b Second argument
	 */
	function invokeGuardedCallback(name, func, a) {
	  try {
	    func(a);
	  } catch (x) {
	    if (caughtError === null) {
	      caughtError = x;
	    }
	  }
	}
	
	var ReactErrorUtils = {
	  invokeGuardedCallback: invokeGuardedCallback,
	
	  /**
	   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
	   * handler are sure to be rethrown by rethrowCaughtError.
	   */
	  invokeGuardedCallbackWithCatch: invokeGuardedCallback,
	
	  /**
	   * During execution of guarded functions we will capture the first error which
	   * we will rethrow to be handled by the top level error handler.
	   */
	  rethrowCaughtError: function () {
	    if (caughtError) {
	      var error = caughtError;
	      caughtError = null;
	      throw error;
	    }
	  }
	};
	
	if (process.env.NODE_ENV !== 'production') {
	  /**
	   * To help development we can get better devtools integration by simulating a
	   * real browser event.
	   */
	  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
	    var fakeNode = document.createElement('react');
	    ReactErrorUtils.invokeGuardedCallback = function (name, func, a) {
	      var boundFunc = func.bind(null, a);
	      var evtType = 'react-' + name;
	      fakeNode.addEventListener(evtType, boundFunc, false);
	      var evt = document.createEvent('Event');
	      // $FlowFixMe https://github.com/facebook/flow/issues/2336
	      evt.initEvent(evtType, false, false);
	      fakeNode.dispatchEvent(evt);
	      fakeNode.removeEventListener(evtType, boundFunc, false);
	    };
	  }
	}
	
	module.exports = ReactErrorUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(14);
	
	var invariant = __webpack_require__(23);
	
	/**
	 * Accumulates items that must not be null or undefined into the first one. This
	 * is used to conserve memory by avoiding array allocations, and thus sacrifices
	 * API cleanness. Since `current` can be null before being passed in and not
	 * null after this function, make sure to assign it back to `current`:
	 *
	 * `a = accumulateInto(a, b);`
	 *
	 * This API should be sparingly used. Try `accumulate` for something cleaner.
	 *
	 * @return {*|array<*>} An accumulation of items.
	 */
	
	function accumulateInto(current, next) {
	  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : _prodInvariant('30') : void 0;
	
	  if (current == null) {
	    return next;
	  }
	
	  // Both are not empty. Warning: Never call x.concat(y) when you are not
	  // certain that x is an Array (x could be a string with concat method).
	  if (Array.isArray(current)) {
	    if (Array.isArray(next)) {
	      current.push.apply(current, next);
	      return current;
	    }
	    current.push(next);
	    return current;
	  }
	
	  if (Array.isArray(next)) {
	    // A bit too dangerous to mutate `next`.
	    return [current].concat(next);
	  }
	
	  return [current, next];
	}
	
	module.exports = accumulateInto;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 59 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	/**
	 * @param {array} arr an "accumulation" of items which is either an Array or
	 * a single item. Useful when paired with the `accumulate` module. This is a
	 * simple utility that allows us to reason about a collection of items, but
	 * handling the case when there is exactly one item (and we do not need to
	 * allocate an array).
	 */
	
	function forEachAccumulated(arr, cb, scope) {
	  if (Array.isArray(arr)) {
	    arr.forEach(cb, scope);
	  } else if (arr) {
	    cb.call(scope, arr);
	  }
	}
	
	module.exports = forEachAccumulated;

/***/ },
/* 60 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ViewportMetrics = {
	
	  currentScrollLeft: 0,
	
	  currentScrollTop: 0,
	
	  refreshScrollValues: function (scrollPosition) {
	    ViewportMetrics.currentScrollLeft = scrollPosition.x;
	    ViewportMetrics.currentScrollTop = scrollPosition.y;
	  }
	
	};
	
	module.exports = ViewportMetrics;

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(18);
	
	/**
	 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
	 *
	 * @param {string} styleProp
	 * @param {string} eventName
	 * @returns {object}
	 */
	function makePrefixMap(styleProp, eventName) {
	  var prefixes = {};
	
	  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
	  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
	  prefixes['Moz' + styleProp] = 'moz' + eventName;
	  prefixes['ms' + styleProp] = 'MS' + eventName;
	  prefixes['O' + styleProp] = 'o' + eventName.toLowerCase();
	
	  return prefixes;
	}
	
	/**
	 * A list of event names to a configurable list of vendor prefixes.
	 */
	var vendorPrefixes = {
	  animationend: makePrefixMap('Animation', 'AnimationEnd'),
	  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
	  animationstart: makePrefixMap('Animation', 'AnimationStart'),
	  transitionend: makePrefixMap('Transition', 'TransitionEnd')
	};
	
	/**
	 * Event names that have already been detected and prefixed (if applicable).
	 */
	var prefixedEventNames = {};
	
	/**
	 * Element to check for prefixes on.
	 */
	var style = {};
	
	/**
	 * Bootstrap if a DOM exists.
	 */
	if (ExecutionEnvironment.canUseDOM) {
	  style = document.createElement('div').style;
	
	  // On some platforms, in particular some releases of Android 4.x,
	  // the un-prefixed "animation" and "transition" properties are defined on the
	  // style object but the events that fire will still be prefixed, so we need
	  // to check if the un-prefixed events are usable, and if not remove them from the map.
	  if (!('AnimationEvent' in window)) {
	    delete vendorPrefixes.animationend.animation;
	    delete vendorPrefixes.animationiteration.animation;
	    delete vendorPrefixes.animationstart.animation;
	  }
	
	  // Same as above
	  if (!('TransitionEvent' in window)) {
	    delete vendorPrefixes.transitionend.transition;
	  }
	}
	
	/**
	 * Attempts to determine the correct vendor prefixed event name.
	 *
	 * @param {string} eventName
	 * @returns {string}
	 */
	function getVendorPrefixedEventName(eventName) {
	  if (prefixedEventNames[eventName]) {
	    return prefixedEventNames[eventName];
	  } else if (!vendorPrefixes[eventName]) {
	    return eventName;
	  }
	
	  var prefixMap = vendorPrefixes[eventName];
	
	  for (var styleProp in prefixMap) {
	    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
	      return prefixedEventNames[eventName] = prefixMap[styleProp];
	    }
	  }
	
	  return '';
	}
	
	module.exports = getVendorPrefixedEventName;

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(18);
	
	var useHasFeature;
	if (ExecutionEnvironment.canUseDOM) {
	  useHasFeature = document.implementation && document.implementation.hasFeature &&
	  // always returns true in newer browsers as per the standard.
	  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
	  document.implementation.hasFeature('', '') !== true;
	}
	
	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @param {?boolean} capture Check if the capture phase is supported.
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */
	function isEventSupported(eventNameSuffix, capture) {
	  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
	    return false;
	  }
	
	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = eventName in document;
	
	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }
	
	  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
	    // This is the only way to test support for the `wheel` event in IE9+.
	    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
	  }
	
	  return isSupported;
	}
	
	module.exports = isEventSupported;

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(14);
	
	var DOMProperty = __webpack_require__(22);
	var ReactDOMComponentFlags = __webpack_require__(64);
	
	var invariant = __webpack_require__(23);
	
	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var Flags = ReactDOMComponentFlags;
	
	var internalInstanceKey = '__reactInternalInstance$' + Math.random().toString(36).slice(2);
	
	/**
	 * Drill down (through composites and empty components) until we get a host or
	 * host text component.
	 *
	 * This is pretty polymorphic but unavoidable with the current structure we have
	 * for `_renderedChildren`.
	 */
	function getRenderedHostOrTextFromComponent(component) {
	  var rendered;
	  while (rendered = component._renderedComponent) {
	    component = rendered;
	  }
	  return component;
	}
	
	/**
	 * Populate `_hostNode` on the rendered host/text component with the given
	 * DOM node. The passed `inst` can be a composite.
	 */
	function precacheNode(inst, node) {
	  var hostInst = getRenderedHostOrTextFromComponent(inst);
	  hostInst._hostNode = node;
	  node[internalInstanceKey] = hostInst;
	}
	
	function uncacheNode(inst) {
	  var node = inst._hostNode;
	  if (node) {
	    delete node[internalInstanceKey];
	    inst._hostNode = null;
	  }
	}
	
	/**
	 * Populate `_hostNode` on each child of `inst`, assuming that the children
	 * match up with the DOM (element) children of `node`.
	 *
	 * We cache entire levels at once to avoid an n^2 problem where we access the
	 * children of a node sequentially and have to walk from the start to our target
	 * node every time.
	 *
	 * Since we update `_renderedChildren` and the actual DOM at (slightly)
	 * different times, we could race here and see a newer `_renderedChildren` than
	 * the DOM nodes we see. To avoid this, ReactMultiChild calls
	 * `prepareToManageChildren` before we change `_renderedChildren`, at which
	 * time the container's child nodes are always cached (until it unmounts).
	 */
	function precacheChildNodes(inst, node) {
	  if (inst._flags & Flags.hasCachedChildNodes) {
	    return;
	  }
	  var children = inst._renderedChildren;
	  var childNode = node.firstChild;
	  outer: for (var name in children) {
	    if (!children.hasOwnProperty(name)) {
	      continue;
	    }
	    var childInst = children[name];
	    var childID = getRenderedHostOrTextFromComponent(childInst)._domID;
	    if (childID === 0) {
	      // We're currently unmounting this child in ReactMultiChild; skip it.
	      continue;
	    }
	    // We assume the child nodes are in the same order as the child instances.
	    for (; childNode !== null; childNode = childNode.nextSibling) {
	      if (childNode.nodeType === 1 && childNode.getAttribute(ATTR_NAME) === String(childID) || childNode.nodeType === 8 && childNode.nodeValue === ' react-text: ' + childID + ' ' || childNode.nodeType === 8 && childNode.nodeValue === ' react-empty: ' + childID + ' ') {
	        precacheNode(childInst, childNode);
	        continue outer;
	      }
	    }
	    // We reached the end of the DOM children without finding an ID match.
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unable to find element with ID %s.', childID) : _prodInvariant('32', childID) : void 0;
	  }
	  inst._flags |= Flags.hasCachedChildNodes;
	}
	
	/**
	 * Given a DOM node, return the closest ReactDOMComponent or
	 * ReactDOMTextComponent instance ancestor.
	 */
	function getClosestInstanceFromNode(node) {
	  if (node[internalInstanceKey]) {
	    return node[internalInstanceKey];
	  }
	
	  // Walk up the tree until we find an ancestor whose instance we have cached.
	  var parents = [];
	  while (!node[internalInstanceKey]) {
	    parents.push(node);
	    if (node.parentNode) {
	      node = node.parentNode;
	    } else {
	      // Top of the tree. This node must not be part of a React tree (or is
	      // unmounted, potentially).
	      return null;
	    }
	  }
	
	  var closest;
	  var inst;
	  for (; node && (inst = node[internalInstanceKey]); node = parents.pop()) {
	    closest = inst;
	    if (parents.length) {
	      precacheChildNodes(inst, node);
	    }
	  }
	
	  return closest;
	}
	
	/**
	 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
	 * instance, or null if the node was not rendered by this React.
	 */
	function getInstanceFromNode(node) {
	  var inst = getClosestInstanceFromNode(node);
	  if (inst != null && inst._hostNode === node) {
	    return inst;
	  } else {
	    return null;
	  }
	}
	
	/**
	 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
	 * DOM node.
	 */
	function getNodeFromInstance(inst) {
	  // Without this first invariant, passing a non-DOM-component triggers the next
	  // invariant for a missing parent, which is super confusing.
	  !(inst._hostNode !== undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;
	
	  if (inst._hostNode) {
	    return inst._hostNode;
	  }
	
	  // Walk up the tree until we find an ancestor whose DOM node we have cached.
	  var parents = [];
	  while (!inst._hostNode) {
	    parents.push(inst);
	    !inst._hostParent ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React DOM tree root should always have a node reference.') : _prodInvariant('34') : void 0;
	    inst = inst._hostParent;
	  }
	
	  // Now parents contains each ancestor that does *not* have a cached native
	  // node, and `inst` is the deepest ancestor that does.
	  for (; parents.length; inst = parents.pop()) {
	    precacheChildNodes(inst, inst._hostNode);
	  }
	
	  return inst._hostNode;
	}
	
	var ReactDOMComponentTree = {
	  getClosestInstanceFromNode: getClosestInstanceFromNode,
	  getInstanceFromNode: getInstanceFromNode,
	  getNodeFromInstance: getNodeFromInstance,
	  precacheChildNodes: precacheChildNodes,
	  precacheNode: precacheNode,
	  uncacheNode: uncacheNode
	};
	
	module.exports = ReactDOMComponentTree;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 64 */
/***/ function(module, exports) {

	/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactDOMComponentFlags = {
	  hasCachedChildNodes: 1 << 0
	};
	
	module.exports = ReactDOMComponentFlags;

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var validateDOMNesting = __webpack_require__(66);
	
	var DOC_NODE_TYPE = 9;
	
	function ReactDOMContainerInfo(topLevelWrapper, node) {
	  var info = {
	    _topLevelWrapper: topLevelWrapper,
	    _idCounter: 1,
	    _ownerDocument: node ? node.nodeType === DOC_NODE_TYPE ? node : node.ownerDocument : null,
	    _node: node,
	    _tag: node ? node.nodeName.toLowerCase() : null,
	    _namespaceURI: node ? node.namespaceURI : null
	  };
	  if (process.env.NODE_ENV !== 'production') {
	    info._ancestorInfo = node ? validateDOMNesting.updatedAncestorInfo(null, info._tag, null) : null;
	  }
	  return info;
	}
	
	module.exports = ReactDOMContainerInfo;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(25);
	
	var emptyFunction = __webpack_require__(32);
	var warning = __webpack_require__(31);
	
	var validateDOMNesting = emptyFunction;
	
	if (process.env.NODE_ENV !== 'production') {
	  // This validation code was written based on the HTML5 parsing spec:
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  //
	  // Note: this does not catch all invalid nesting, nor does it try to (as it's
	  // not clear what practical benefit doing so provides); instead, we warn only
	  // for cases where the parser will give a parse tree differing from what React
	  // intended. For example, <b><div></div></b> is invalid but we don't warn
	  // because it still parses correctly; we do warn for other cases like nested
	  // <p> tags where the beginning of the second element implicitly closes the
	  // first, causing a confusing mess.
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#special
	  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
	  // TODO: Distinguish by namespace here -- for <title>, including it here
	  // errs on the side of fewer warnings
	  'foreignObject', 'desc', 'title'];
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
	  var buttonScopeTags = inScopeTags.concat(['button']);
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
	  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];
	
	  var emptyAncestorInfo = {
	    current: null,
	
	    formTag: null,
	    aTagInScope: null,
	    buttonTagInScope: null,
	    nobrTagInScope: null,
	    pTagInButtonScope: null,
	
	    listItemTagAutoclosing: null,
	    dlItemTagAutoclosing: null
	  };
	
	  var updatedAncestorInfo = function (oldInfo, tag, instance) {
	    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
	    var info = { tag: tag, instance: instance };
	
	    if (inScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.aTagInScope = null;
	      ancestorInfo.buttonTagInScope = null;
	      ancestorInfo.nobrTagInScope = null;
	    }
	    if (buttonScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.pTagInButtonScope = null;
	    }
	
	    // See rules for 'li', 'dd', 'dt' start tags in
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
	      ancestorInfo.listItemTagAutoclosing = null;
	      ancestorInfo.dlItemTagAutoclosing = null;
	    }
	
	    ancestorInfo.current = info;
	
	    if (tag === 'form') {
	      ancestorInfo.formTag = info;
	    }
	    if (tag === 'a') {
	      ancestorInfo.aTagInScope = info;
	    }
	    if (tag === 'button') {
	      ancestorInfo.buttonTagInScope = info;
	    }
	    if (tag === 'nobr') {
	      ancestorInfo.nobrTagInScope = info;
	    }
	    if (tag === 'p') {
	      ancestorInfo.pTagInButtonScope = info;
	    }
	    if (tag === 'li') {
	      ancestorInfo.listItemTagAutoclosing = info;
	    }
	    if (tag === 'dd' || tag === 'dt') {
	      ancestorInfo.dlItemTagAutoclosing = info;
	    }
	
	    return ancestorInfo;
	  };
	
	  /**
	   * Returns whether
	   */
	  var isTagValidWithParent = function (tag, parentTag) {
	    // First, let's check if we're in an unusual parsing mode...
	    switch (parentTag) {
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
	      case 'select':
	        return tag === 'option' || tag === 'optgroup' || tag === '#text';
	      case 'optgroup':
	        return tag === 'option' || tag === '#text';
	      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
	      // but
	      case 'option':
	        return tag === '#text';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
	      // No special behavior since these rules fall back to "in body" mode for
	      // all except special table nodes which cause bad parsing behavior anyway.
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
	      case 'tr':
	        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
	      case 'tbody':
	      case 'thead':
	      case 'tfoot':
	        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
	      case 'colgroup':
	        return tag === 'col' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
	      case 'table':
	        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
	      case 'head':
	        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
	      case 'html':
	        return tag === 'head' || tag === 'body';
	      case '#document':
	        return tag === 'html';
	    }
	
	    // Probably in the "in body" parsing mode, so we outlaw only tag combos
	    // where the parsing rules cause implicit opens or closes to be added.
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    switch (tag) {
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';
	
	      case 'rp':
	      case 'rt':
	        return impliedEndTags.indexOf(parentTag) === -1;
	
	      case 'body':
	      case 'caption':
	      case 'col':
	      case 'colgroup':
	      case 'frame':
	      case 'head':
	      case 'html':
	      case 'tbody':
	      case 'td':
	      case 'tfoot':
	      case 'th':
	      case 'thead':
	      case 'tr':
	        // These tags are only valid with a few parents that have special child
	        // parsing rules -- if we're down here, then none of those matched and
	        // so we allow it only if we don't know what the parent is, as all other
	        // cases are invalid.
	        return parentTag == null;
	    }
	
	    return true;
	  };
	
	  /**
	   * Returns whether
	   */
	  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
	    switch (tag) {
	      case 'address':
	      case 'article':
	      case 'aside':
	      case 'blockquote':
	      case 'center':
	      case 'details':
	      case 'dialog':
	      case 'dir':
	      case 'div':
	      case 'dl':
	      case 'fieldset':
	      case 'figcaption':
	      case 'figure':
	      case 'footer':
	      case 'header':
	      case 'hgroup':
	      case 'main':
	      case 'menu':
	      case 'nav':
	      case 'ol':
	      case 'p':
	      case 'section':
	      case 'summary':
	      case 'ul':
	
	      case 'pre':
	      case 'listing':
	
	      case 'table':
	
	      case 'hr':
	
	      case 'xmp':
	
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return ancestorInfo.pTagInButtonScope;
	
	      case 'form':
	        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
	
	      case 'li':
	        return ancestorInfo.listItemTagAutoclosing;
	
	      case 'dd':
	      case 'dt':
	        return ancestorInfo.dlItemTagAutoclosing;
	
	      case 'button':
	        return ancestorInfo.buttonTagInScope;
	
	      case 'a':
	        // Spec says something about storing a list of markers, but it sounds
	        // equivalent to this check.
	        return ancestorInfo.aTagInScope;
	
	      case 'nobr':
	        return ancestorInfo.nobrTagInScope;
	    }
	
	    return null;
	  };
	
	  /**
	   * Given a ReactCompositeComponent instance, return a list of its recursive
	   * owners, starting at the root and ending with the instance itself.
	   */
	  var findOwnerStack = function (instance) {
	    if (!instance) {
	      return [];
	    }
	
	    var stack = [];
	    do {
	      stack.push(instance);
	    } while (instance = instance._currentElement._owner);
	    stack.reverse();
	    return stack;
	  };
	
	  var didWarn = {};
	
	  validateDOMNesting = function (childTag, childText, childInstance, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.current;
	    var parentTag = parentInfo && parentInfo.tag;
	
	    if (childText != null) {
	      process.env.NODE_ENV !== 'production' ? warning(childTag == null, 'validateDOMNesting: when childText is passed, childTag should be null') : void 0;
	      childTag = '#text';
	    }
	
	    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
	    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
	    var problematic = invalidParent || invalidAncestor;
	
	    if (problematic) {
	      var ancestorTag = problematic.tag;
	      var ancestorInstance = problematic.instance;
	
	      var childOwner = childInstance && childInstance._currentElement._owner;
	      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;
	
	      var childOwners = findOwnerStack(childOwner);
	      var ancestorOwners = findOwnerStack(ancestorOwner);
	
	      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
	      var i;
	
	      var deepestCommon = -1;
	      for (i = 0; i < minStackLen; i++) {
	        if (childOwners[i] === ancestorOwners[i]) {
	          deepestCommon = i;
	        } else {
	          break;
	        }
	      }
	
	      var UNKNOWN = '(unknown)';
	      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ownerInfo = [].concat(
	      // If the parent and child instances have a common owner ancestor, start
	      // with that -- otherwise we just start with the parent's owners.
	      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
	      // If we're warning about an invalid (non-parent) ancestry, add '...'
	      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');
	
	      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
	      if (didWarn[warnKey]) {
	        return;
	      }
	      didWarn[warnKey] = true;
	
	      var tagDisplayName = childTag;
	      var whitespaceInfo = '';
	      if (childTag === '#text') {
	        if (/\S/.test(childText)) {
	          tagDisplayName = 'Text nodes';
	        } else {
	          tagDisplayName = 'Whitespace text nodes';
	          whitespaceInfo = ' Make sure you don\'t have any extra whitespace between tags on ' + 'each line of your source code.';
	        }
	      } else {
	        tagDisplayName = '<' + childTag + '>';
	      }
	
	      if (invalidParent) {
	        var info = '';
	        if (ancestorTag === 'table' && childTag === 'tr') {
	          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
	        }
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s ' + 'See %s.%s', tagDisplayName, ancestorTag, whitespaceInfo, ownerInfo, info) : void 0;
	      } else {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>. See %s.', tagDisplayName, ancestorTag, ownerInfo) : void 0;
	      }
	    }
	  };
	
	  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;
	
	  // For testing
	  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.current;
	    var parentTag = parentInfo && parentInfo.tag;
	    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
	  };
	}
	
	module.exports = validateDOMNesting;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 67 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactDOMFeatureFlags = {
	  useCreateElement: true,
	  useFiber: false
	};
	
	module.exports = ReactDOMFeatureFlags;

/***/ },
/* 68 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var ReactFeatureFlags = {
	  // When true, call console.time() before and .timeEnd() after each top-level
	  // render (both initial renders and updates). Useful when looking at prod-mode
	  // timeline profiles in Chrome, for example.
	  logTopLevelRenders: false
	};
	
	module.exports = ReactFeatureFlags;

/***/ },
/* 69 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * `ReactInstanceMap` maintains a mapping from a public facing stateful
	 * instance (key) and the internal representation (value). This allows public
	 * methods to accept the user facing instance as an argument and map them back
	 * to internal methods.
	 */
	
	// TODO: Replace this with ES6: var ReactInstanceMap = new Map();
	
	var ReactInstanceMap = {
	
	  /**
	   * This API should be called `delete` but we'd have to make sure to always
	   * transform these to strings for IE support. When this transform is fully
	   * supported we can rename it.
	   */
	  remove: function (key) {
	    key._reactInternalInstance = undefined;
	  },
	
	  get: function (key) {
	    return key._reactInternalInstance;
	  },
	
	  has: function (key) {
	    return key._reactInternalInstance !== undefined;
	  },
	
	  set: function (key, value) {
	    key._reactInternalInstance = value;
	  }
	
	};
	
	module.exports = ReactInstanceMap;

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	// Trust the developer to only use ReactInstrumentation with a __DEV__ check
	
	var debugTool = null;
	
	if (process.env.NODE_ENV !== 'production') {
	  var ReactDebugTool = __webpack_require__(71);
	  debugTool = ReactDebugTool;
	}
	
	module.exports = { debugTool: debugTool };
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var ReactInvalidSetStateWarningHook = __webpack_require__(72);
	var ReactHostOperationHistoryHook = __webpack_require__(73);
	var ReactComponentTreeHook = __webpack_require__(46);
	var ExecutionEnvironment = __webpack_require__(18);
	
	var performanceNow = __webpack_require__(74);
	var warning = __webpack_require__(31);
	
	var hooks = [];
	var didHookThrowForEvent = {};
	
	function callHook(event, fn, context, arg1, arg2, arg3, arg4, arg5) {
	  try {
	    fn.call(context, arg1, arg2, arg3, arg4, arg5);
	  } catch (e) {
	    process.env.NODE_ENV !== 'production' ? warning(didHookThrowForEvent[event], 'Exception thrown by hook while handling %s: %s', event, e + '\n' + e.stack) : void 0;
	    didHookThrowForEvent[event] = true;
	  }
	}
	
	function emitEvent(event, arg1, arg2, arg3, arg4, arg5) {
	  for (var i = 0; i < hooks.length; i++) {
	    var hook = hooks[i];
	    var fn = hook[event];
	    if (fn) {
	      callHook(event, fn, hook, arg1, arg2, arg3, arg4, arg5);
	    }
	  }
	}
	
	var isProfiling = false;
	var flushHistory = [];
	var lifeCycleTimerStack = [];
	var currentFlushNesting = 0;
	var currentFlushMeasurements = [];
	var currentFlushStartTime = 0;
	var currentTimerDebugID = null;
	var currentTimerStartTime = 0;
	var currentTimerNestedFlushDuration = 0;
	var currentTimerType = null;
	
	var lifeCycleTimerHasWarned = false;
	
	function clearHistory() {
	  ReactComponentTreeHook.purgeUnmountedComponents();
	  ReactHostOperationHistoryHook.clearHistory();
	}
	
	function getTreeSnapshot(registeredIDs) {
	  return registeredIDs.reduce(function (tree, id) {
	    var ownerID = ReactComponentTreeHook.getOwnerID(id);
	    var parentID = ReactComponentTreeHook.getParentID(id);
	    tree[id] = {
	      displayName: ReactComponentTreeHook.getDisplayName(id),
	      text: ReactComponentTreeHook.getText(id),
	      updateCount: ReactComponentTreeHook.getUpdateCount(id),
	      childIDs: ReactComponentTreeHook.getChildIDs(id),
	      // Text nodes don't have owners but this is close enough.
	      ownerID: ownerID || parentID && ReactComponentTreeHook.getOwnerID(parentID) || 0,
	      parentID: parentID
	    };
	    return tree;
	  }, {});
	}
	
	function resetMeasurements() {
	  var previousStartTime = currentFlushStartTime;
	  var previousMeasurements = currentFlushMeasurements;
	  var previousOperations = ReactHostOperationHistoryHook.getHistory();
	
	  if (currentFlushNesting === 0) {
	    currentFlushStartTime = 0;
	    currentFlushMeasurements = [];
	    clearHistory();
	    return;
	  }
	
	  if (previousMeasurements.length || previousOperations.length) {
	    var registeredIDs = ReactComponentTreeHook.getRegisteredIDs();
	    flushHistory.push({
	      duration: performanceNow() - previousStartTime,
	      measurements: previousMeasurements || [],
	      operations: previousOperations || [],
	      treeSnapshot: getTreeSnapshot(registeredIDs)
	    });
	  }
	
	  clearHistory();
	  currentFlushStartTime = performanceNow();
	  currentFlushMeasurements = [];
	}
	
	function checkDebugID(debugID) {
	  var allowRoot = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	
	  if (allowRoot && debugID === 0) {
	    return;
	  }
	  if (!debugID) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDebugTool: debugID may not be empty.') : void 0;
	  }
	}
	
	function beginLifeCycleTimer(debugID, timerType) {
	  if (currentFlushNesting === 0) {
	    return;
	  }
	  if (currentTimerType && !lifeCycleTimerHasWarned) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'Did not expect %s timer to start while %s timer is still in ' + 'progress for %s instance.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
	    lifeCycleTimerHasWarned = true;
	  }
	  currentTimerStartTime = performanceNow();
	  currentTimerNestedFlushDuration = 0;
	  currentTimerDebugID = debugID;
	  currentTimerType = timerType;
	}
	
	function endLifeCycleTimer(debugID, timerType) {
	  if (currentFlushNesting === 0) {
	    return;
	  }
	  if (currentTimerType !== timerType && !lifeCycleTimerHasWarned) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'We did not expect %s timer to stop while %s timer is still in ' + 'progress for %s instance. Please report this as a bug in React.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
	    lifeCycleTimerHasWarned = true;
	  }
	  if (isProfiling) {
	    currentFlushMeasurements.push({
	      timerType: timerType,
	      instanceID: debugID,
	      duration: performanceNow() - currentTimerStartTime - currentTimerNestedFlushDuration
	    });
	  }
	  currentTimerStartTime = 0;
	  currentTimerNestedFlushDuration = 0;
	  currentTimerDebugID = null;
	  currentTimerType = null;
	}
	
	function pauseCurrentLifeCycleTimer() {
	  var currentTimer = {
	    startTime: currentTimerStartTime,
	    nestedFlushStartTime: performanceNow(),
	    debugID: currentTimerDebugID,
	    timerType: currentTimerType
	  };
	  lifeCycleTimerStack.push(currentTimer);
	  currentTimerStartTime = 0;
	  currentTimerNestedFlushDuration = 0;
	  currentTimerDebugID = null;
	  currentTimerType = null;
	}
	
	function resumeCurrentLifeCycleTimer() {
	  var _lifeCycleTimerStack$ = lifeCycleTimerStack.pop(),
	      startTime = _lifeCycleTimerStack$.startTime,
	      nestedFlushStartTime = _lifeCycleTimerStack$.nestedFlushStartTime,
	      debugID = _lifeCycleTimerStack$.debugID,
	      timerType = _lifeCycleTimerStack$.timerType;
	
	  var nestedFlushDuration = performanceNow() - nestedFlushStartTime;
	  currentTimerStartTime = startTime;
	  currentTimerNestedFlushDuration += nestedFlushDuration;
	  currentTimerDebugID = debugID;
	  currentTimerType = timerType;
	}
	
	var lastMarkTimeStamp = 0;
	var canUsePerformanceMeasure =
	// $FlowFixMe https://github.com/facebook/flow/issues/2345
	typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function';
	
	function shouldMark(debugID) {
	  if (!isProfiling || !canUsePerformanceMeasure) {
	    return false;
	  }
	  var element = ReactComponentTreeHook.getElement(debugID);
	  if (element == null || typeof element !== 'object') {
	    return false;
	  }
	  var isHostElement = typeof element.type === 'string';
	  if (isHostElement) {
	    return false;
	  }
	  return true;
	}
	
	function markBegin(debugID, markType) {
	  if (!shouldMark(debugID)) {
	    return;
	  }
	
	  var markName = debugID + '::' + markType;
	  lastMarkTimeStamp = performanceNow();
	  performance.mark(markName);
	}
	
	function markEnd(debugID, markType) {
	  if (!shouldMark(debugID)) {
	    return;
	  }
	
	  var markName = debugID + '::' + markType;
	  var displayName = ReactComponentTreeHook.getDisplayName(debugID) || 'Unknown';
	
	  // Chrome has an issue of dropping markers recorded too fast:
	  // https://bugs.chromium.org/p/chromium/issues/detail?id=640652
	  // To work around this, we will not report very small measurements.
	  // I determined the magic number by tweaking it back and forth.
	  // 0.05ms was enough to prevent the issue, but I set it to 0.1ms to be safe.
	  // When the bug is fixed, we can `measure()` unconditionally if we want to.
	  var timeStamp = performanceNow();
	  if (timeStamp - lastMarkTimeStamp > 0.1) {
	    var measurementName = displayName + ' [' + markType + ']';
	    performance.measure(measurementName, markName);
	  }
	
	  performance.clearMarks(markName);
	  performance.clearMeasures(measurementName);
	}
	
	var ReactDebugTool = {
	  addHook: function (hook) {
	    hooks.push(hook);
	  },
	  removeHook: function (hook) {
	    for (var i = 0; i < hooks.length; i++) {
	      if (hooks[i] === hook) {
	        hooks.splice(i, 1);
	        i--;
	      }
	    }
	  },
	  isProfiling: function () {
	    return isProfiling;
	  },
	  beginProfiling: function () {
	    if (isProfiling) {
	      return;
	    }
	
	    isProfiling = true;
	    flushHistory.length = 0;
	    resetMeasurements();
	    ReactDebugTool.addHook(ReactHostOperationHistoryHook);
	  },
	  endProfiling: function () {
	    if (!isProfiling) {
	      return;
	    }
	
	    isProfiling = false;
	    resetMeasurements();
	    ReactDebugTool.removeHook(ReactHostOperationHistoryHook);
	  },
	  getFlushHistory: function () {
	    return flushHistory;
	  },
	  onBeginFlush: function () {
	    currentFlushNesting++;
	    resetMeasurements();
	    pauseCurrentLifeCycleTimer();
	    emitEvent('onBeginFlush');
	  },
	  onEndFlush: function () {
	    resetMeasurements();
	    currentFlushNesting--;
	    resumeCurrentLifeCycleTimer();
	    emitEvent('onEndFlush');
	  },
	  onBeginLifeCycleTimer: function (debugID, timerType) {
	    checkDebugID(debugID);
	    emitEvent('onBeginLifeCycleTimer', debugID, timerType);
	    markBegin(debugID, timerType);
	    beginLifeCycleTimer(debugID, timerType);
	  },
	  onEndLifeCycleTimer: function (debugID, timerType) {
	    checkDebugID(debugID);
	    endLifeCycleTimer(debugID, timerType);
	    markEnd(debugID, timerType);
	    emitEvent('onEndLifeCycleTimer', debugID, timerType);
	  },
	  onBeginProcessingChildContext: function () {
	    emitEvent('onBeginProcessingChildContext');
	  },
	  onEndProcessingChildContext: function () {
	    emitEvent('onEndProcessingChildContext');
	  },
	  onHostOperation: function (operation) {
	    checkDebugID(operation.instanceID);
	    emitEvent('onHostOperation', operation);
	  },
	  onSetState: function () {
	    emitEvent('onSetState');
	  },
	  onSetChildren: function (debugID, childDebugIDs) {
	    checkDebugID(debugID);
	    childDebugIDs.forEach(checkDebugID);
	    emitEvent('onSetChildren', debugID, childDebugIDs);
	  },
	  onBeforeMountComponent: function (debugID, element, parentDebugID) {
	    checkDebugID(debugID);
	    checkDebugID(parentDebugID, true);
	    emitEvent('onBeforeMountComponent', debugID, element, parentDebugID);
	    markBegin(debugID, 'mount');
	  },
	  onMountComponent: function (debugID) {
	    checkDebugID(debugID);
	    markEnd(debugID, 'mount');
	    emitEvent('onMountComponent', debugID);
	  },
	  onBeforeUpdateComponent: function (debugID, element) {
	    checkDebugID(debugID);
	    emitEvent('onBeforeUpdateComponent', debugID, element);
	    markBegin(debugID, 'update');
	  },
	  onUpdateComponent: function (debugID) {
	    checkDebugID(debugID);
	    markEnd(debugID, 'update');
	    emitEvent('onUpdateComponent', debugID);
	  },
	  onBeforeUnmountComponent: function (debugID) {
	    checkDebugID(debugID);
	    emitEvent('onBeforeUnmountComponent', debugID);
	    markBegin(debugID, 'unmount');
	  },
	  onUnmountComponent: function (debugID) {
	    checkDebugID(debugID);
	    markEnd(debugID, 'unmount');
	    emitEvent('onUnmountComponent', debugID);
	  },
	  onTestEvent: function () {
	    emitEvent('onTestEvent');
	  }
	};
	
	// TODO remove these when RN/www gets updated
	ReactDebugTool.addDevtool = ReactDebugTool.addHook;
	ReactDebugTool.removeDevtool = ReactDebugTool.removeHook;
	
	ReactDebugTool.addHook(ReactInvalidSetStateWarningHook);
	ReactDebugTool.addHook(ReactComponentTreeHook);
	var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
	if (/[?&]react_perf\b/.test(url)) {
	  ReactDebugTool.beginProfiling();
	}
	
	module.exports = ReactDebugTool;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var warning = __webpack_require__(31);
	
	if (process.env.NODE_ENV !== 'production') {
	  var processingChildContext = false;
	
	  var warnInvalidSetState = function () {
	    process.env.NODE_ENV !== 'production' ? warning(!processingChildContext, 'setState(...): Cannot call setState() inside getChildContext()') : void 0;
	  };
	}
	
	var ReactInvalidSetStateWarningHook = {
	  onBeginProcessingChildContext: function () {
	    processingChildContext = true;
	  },
	  onEndProcessingChildContext: function () {
	    processingChildContext = false;
	  },
	  onSetState: function () {
	    warnInvalidSetState();
	  }
	};
	
	module.exports = ReactInvalidSetStateWarningHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 73 */
/***/ function(module, exports) {

	/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var history = [];
	
	var ReactHostOperationHistoryHook = {
	  onHostOperation: function (operation) {
	    history.push(operation);
	  },
	  clearHistory: function () {
	    if (ReactHostOperationHistoryHook._preventClearing) {
	      // Should only be used for tests.
	      return;
	    }
	
	    history = [];
	  },
	  getHistory: function () {
	    return history;
	  }
	};
	
	module.exports = ReactHostOperationHistoryHook;

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	var performance = __webpack_require__(75);
	
	var performanceNow;
	
	/**
	 * Detect if we can use `window.performance.now()` and gracefully fallback to
	 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
	 * because of Facebook's testing infrastructure.
	 */
	if (performance.now) {
	  performanceNow = function performanceNow() {
	    return performance.now();
	  };
	} else {
	  performanceNow = function performanceNow() {
	    return Date.now();
	  };
	}
	
	module.exports = performanceNow;

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(18);
	
	var performance;
	
	if (ExecutionEnvironment.canUseDOM) {
	  performance = window.performance || window.msPerformance || window.webkitPerformance;
	}
	
	module.exports = performance || {};

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var adler32 = __webpack_require__(77);
	
	var TAG_END = /\/?>/;
	var COMMENT_START = /^<\!\-\-/;
	
	var ReactMarkupChecksum = {
	  CHECKSUM_ATTR_NAME: 'data-react-checksum',
	
	  /**
	   * @param {string} markup Markup string
	   * @return {string} Markup string with checksum attribute attached
	   */
	  addChecksumToMarkup: function (markup) {
	    var checksum = adler32(markup);
	
	    // Add checksum (handle both parent tags, comments and self-closing tags)
	    if (COMMENT_START.test(markup)) {
	      return markup;
	    } else {
	      return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
	    }
	  },
	
	  /**
	   * @param {string} markup to use
	   * @param {DOMElement} element root React element
	   * @returns {boolean} whether or not the markup is the same
	   */
	  canReuseMarkup: function (markup, element) {
	    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
	    var markupChecksum = adler32(markup);
	    return markupChecksum === existingChecksum;
	  }
	};
	
	module.exports = ReactMarkupChecksum;

/***/ },
/* 77 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var MOD = 65521;
	
	// adler32 is not cryptographically strong, and is only used to sanity check that
	// markup generated on the server matches the markup generated on the client.
	// This implementation (a modified version of the SheetJS version) has been optimized
	// for our use case, at the expense of conforming to the adler32 specification
	// for non-ascii inputs.
	function adler32(data) {
	  var a = 1;
	  var b = 0;
	  var i = 0;
	  var l = data.length;
	  var m = l & ~0x3;
	  while (i < m) {
	    var n = Math.min(i + 4096, m);
	    for (; i < n; i += 4) {
	      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
	    }
	    a %= MOD;
	    b %= MOD;
	  }
	  for (; i < l; i++) {
	    b += a += data.charCodeAt(i);
	  }
	  a %= MOD;
	  b %= MOD;
	  return a | b << 16;
	}
	
	module.exports = adler32;

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactRef = __webpack_require__(79);
	var ReactInstrumentation = __webpack_require__(70);
	
	var warning = __webpack_require__(31);
	
	/**
	 * Helper to call ReactRef.attachRefs with this composite component, split out
	 * to avoid allocations in the transaction mount-ready queue.
	 */
	function attachRefs() {
	  ReactRef.attachRefs(this, this._currentElement);
	}
	
	var ReactReconciler = {
	
	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {?object} the containing host component instance
	   * @param {?object} info about the host container
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (internalInstance, transaction, hostParent, hostContainerInfo, context, parentDebugID // 0 in production and for roots
	  ) {
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeMountComponent(internalInstance._debugID, internalInstance._currentElement, parentDebugID);
	      }
	    }
	    var markup = internalInstance.mountComponent(transaction, hostParent, hostContainerInfo, context, parentDebugID);
	    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onMountComponent(internalInstance._debugID);
	      }
	    }
	    return markup;
	  },
	
	  /**
	   * Returns a value that can be passed to
	   * ReactComponentEnvironment.replaceNodeWithMarkup.
	   */
	  getHostNode: function (internalInstance) {
	    return internalInstance.getHostNode();
	  },
	
	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function (internalInstance, safely) {
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeUnmountComponent(internalInstance._debugID);
	      }
	    }
	    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
	    internalInstance.unmountComponent(safely);
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onUnmountComponent(internalInstance._debugID);
	      }
	    }
	  },
	
	  /**
	   * Update a component using a new element.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @internal
	   */
	  receiveComponent: function (internalInstance, nextElement, transaction, context) {
	    var prevElement = internalInstance._currentElement;
	
	    if (nextElement === prevElement && context === internalInstance._context) {
	      // Since elements are immutable after the owner is rendered,
	      // we can do a cheap identity compare here to determine if this is a
	      // superfluous reconcile. It's possible for state to be mutable but such
	      // change should trigger an update of the owner which would recreate
	      // the element. We explicitly check for the existence of an owner since
	      // it's possible for an element created outside a composite to be
	      // deeply mutated and reused.
	
	      // TODO: Bailing out early is just a perf optimization right?
	      // TODO: Removing the return statement should affect correctness?
	      return;
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, nextElement);
	      }
	    }
	
	    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);
	
	    if (refsChanged) {
	      ReactRef.detachRefs(internalInstance, prevElement);
	    }
	
	    internalInstance.receiveComponent(nextElement, transaction, context);
	
	    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
	      }
	    }
	  },
	
	  /**
	   * Flush any dirty changes in a component.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (internalInstance, transaction, updateBatchNumber) {
	    if (internalInstance._updateBatchNumber !== updateBatchNumber) {
	      // The component's enqueued batch number should always be the current
	      // batch or the following one.
	      process.env.NODE_ENV !== 'production' ? warning(internalInstance._updateBatchNumber == null || internalInstance._updateBatchNumber === updateBatchNumber + 1, 'performUpdateIfNecessary: Unexpected batch number (current %s, ' + 'pending %s)', updateBatchNumber, internalInstance._updateBatchNumber) : void 0;
	      return;
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, internalInstance._currentElement);
	      }
	    }
	    internalInstance.performUpdateIfNecessary(transaction);
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
	      }
	    }
	  }
	
	};
	
	module.exports = ReactReconciler;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var ReactOwner = __webpack_require__(80);
	
	var ReactRef = {};
	
	function attachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(component.getPublicInstance());
	  } else {
	    // Legacy ref
	    ReactOwner.addComponentAsRefTo(component, ref, owner);
	  }
	}
	
	function detachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(null);
	  } else {
	    // Legacy ref
	    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
	  }
	}
	
	ReactRef.attachRefs = function (instance, element) {
	  if (element === null || typeof element !== 'object') {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    attachRef(ref, instance, element._owner);
	  }
	};
	
	ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
	  // If either the owner or a `ref` has changed, make sure the newest owner
	  // has stored a reference to `this`, and the previous owner (if different)
	  // has forgotten the reference to `this`. We use the element instead
	  // of the public this.props because the post processing cannot determine
	  // a ref. The ref conceptually lives on the element.
	
	  // TODO: Should this even be possible? The owner cannot change because
	  // it's forbidden by shouldUpdateReactComponent. The ref can change
	  // if you swap the keys of but not the refs. Reconsider where this check
	  // is made. It probably belongs where the key checking and
	  // instantiateReactComponent is done.
	
	  var prevRef = null;
	  var prevOwner = null;
	  if (prevElement !== null && typeof prevElement === 'object') {
	    prevRef = prevElement.ref;
	    prevOwner = prevElement._owner;
	  }
	
	  var nextRef = null;
	  var nextOwner = null;
	  if (nextElement !== null && typeof nextElement === 'object') {
	    nextRef = nextElement.ref;
	    nextOwner = nextElement._owner;
	  }
	
	  return prevRef !== nextRef ||
	  // If owner changes but we have an unchanged function ref, don't update refs
	  typeof nextRef === 'string' && nextOwner !== prevOwner;
	};
	
	ReactRef.detachRefs = function (instance, element) {
	  if (element === null || typeof element !== 'object') {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    detachRef(ref, instance, element._owner);
	  }
	};
	
	module.exports = ReactRef;

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(14);
	
	var invariant = __webpack_require__(23);
	
	/**
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid owner.
	 * @final
	 */
	function isValidOwner(object) {
	  return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
	}
	
	/**
	 * ReactOwners are capable of storing references to owned components.
	 *
	 * All components are capable of //being// referenced by owner components, but
	 * only ReactOwner components are capable of //referencing// owned components.
	 * The named reference is known as a "ref".
	 *
	 * Refs are available when mounted and updated during reconciliation.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return (
	 *         <div onClick={this.handleClick}>
	 *           <CustomComponent ref="custom" />
	 *         </div>
	 *       );
	 *     },
	 *     handleClick: function() {
	 *       this.refs.custom.handleClick();
	 *     },
	 *     componentDidMount: function() {
	 *       this.refs.custom.initialize();
	 *     }
	 *   });
	 *
	 * Refs should rarely be used. When refs are used, they should only be done to
	 * control data that is not handled by React's data flow.
	 *
	 * @class ReactOwner
	 */
	var ReactOwner = {
	  /**
	   * Adds a component by ref to an owner component.
	   *
	   * @param {ReactComponent} component Component to reference.
	   * @param {string} ref Name by which to refer to the component.
	   * @param {ReactOwner} owner Component on which to record the ref.
	   * @final
	   * @internal
	   */
	  addComponentAsRefTo: function (component, ref, owner) {
	    !isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might be adding a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('119') : void 0;
	    owner.attachRef(ref, component);
	  },
	
	  /**
	   * Removes a component by ref from an owner component.
	   *
	   * @param {ReactComponent} component Component to dereference.
	   * @param {string} ref Name of the ref to remove.
	   * @param {ReactOwner} owner Component on which the ref is recorded.
	   * @final
	   * @internal
	   */
	  removeComponentAsRefFrom: function (component, ref, owner) {
	    !isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might be removing a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('120') : void 0;
	    var ownerPublicInstance = owner.getPublicInstance();
	    // Check that `component`'s owner is still alive and that `component` is still the current ref
	    // because we do not want to detach the ref if another component stole it.
	    if (ownerPublicInstance && ownerPublicInstance.refs[ref] === component.getPublicInstance()) {
	      owner.detachRef(ref);
	    }
	  }
	
	};
	
	module.exports = ReactOwner;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(14);
	
	var ReactCurrentOwner = __webpack_require__(30);
	var ReactInstanceMap = __webpack_require__(69);
	var ReactInstrumentation = __webpack_require__(70);
	var ReactUpdates = __webpack_require__(82);
	
	var invariant = __webpack_require__(23);
	var warning = __webpack_require__(31);
	
	function enqueueUpdate(internalInstance) {
	  ReactUpdates.enqueueUpdate(internalInstance);
	}
	
	function formatUnexpectedArgument(arg) {
	  var type = typeof arg;
	  if (type !== 'object') {
	    return type;
	  }
	  var displayName = arg.constructor && arg.constructor.name || type;
	  var keys = Object.keys(arg);
	  if (keys.length > 0 && keys.length < 20) {
	    return displayName + ' (keys: ' + keys.join(', ') + ')';
	  }
	  return displayName;
	}
	
	function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
	  var internalInstance = ReactInstanceMap.get(publicInstance);
	  if (!internalInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      var ctor = publicInstance.constructor;
	      // Only warn when we have a callerName. Otherwise we should be silent.
	      // We're probably calling from enqueueCallback. We don't want to warn
	      // there because we already warned for the corresponding lifecycle method.
	      process.env.NODE_ENV !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, ctor && (ctor.displayName || ctor.name) || 'ReactClass') : void 0;
	    }
	    return null;
	  }
	
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition (such as ' + 'within `render` or another component\'s constructor). Render methods ' + 'should be a pure function of props and state; constructor ' + 'side-effects are an anti-pattern, but can be moved to ' + '`componentWillMount`.', callerName) : void 0;
	  }
	
	  return internalInstance;
	}
	
	/**
	 * ReactUpdateQueue allows for state updates to be scheduled into a later
	 * reconciliation step.
	 */
	var ReactUpdateQueue = {
	
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      var owner = ReactCurrentOwner.current;
	      if (owner !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
	        owner._warnedAboutRefsInRender = true;
	      }
	    }
	    var internalInstance = ReactInstanceMap.get(publicInstance);
	    if (internalInstance) {
	      // During componentWillMount and render this will still be null but after
	      // that will always render to something. At least for now. So we can use
	      // this hack.
	      return !!internalInstance._renderedComponent;
	    } else {
	      return false;
	    }
	  },
	
	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @param {string} callerName Name of the calling function in the public API.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback, callerName) {
	    ReactUpdateQueue.validateCallback(callback, callerName);
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);
	
	    // Previously we would throw an error if we didn't have an internal
	    // instance. Since we want to make it a no-op instead, we mirror the same
	    // behavior we have in other enqueue* methods.
	    // We also need to ignore callbacks in componentWillMount. See
	    // enqueueUpdates.
	    if (!internalInstance) {
	      return null;
	    }
	
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    // TODO: The callback here is ignored when setState is called from
	    // componentWillMount. Either fix it or disallow doing so completely in
	    // favor of getInitialState. Alternatively, we can disallow
	    // componentWillMount during server-side rendering.
	    enqueueUpdate(internalInstance);
	  },
	
	  enqueueCallbackInternal: function (internalInstance, callback) {
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    enqueueUpdate(internalInstance);
	  },
	
	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');
	
	    if (!internalInstance) {
	      return;
	    }
	
	    internalInstance._pendingForceUpdate = true;
	
	    enqueueUpdate(internalInstance);
	  },
	
	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');
	
	    if (!internalInstance) {
	      return;
	    }
	
	    internalInstance._pendingStateQueue = [completeState];
	    internalInstance._pendingReplaceState = true;
	
	    enqueueUpdate(internalInstance);
	  },
	
	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onSetState();
	      process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : void 0;
	    }
	
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');
	
	    if (!internalInstance) {
	      return;
	    }
	
	    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
	    queue.push(partialState);
	
	    enqueueUpdate(internalInstance);
	  },
	
	  enqueueElementInternal: function (internalInstance, nextElement, nextContext) {
	    internalInstance._pendingElement = nextElement;
	    // TODO: introduce _pendingContext instead of setting it directly.
	    internalInstance._context = nextContext;
	    enqueueUpdate(internalInstance);
	  },
	
	  validateCallback: function (callback, callerName) {
	    !(!callback || typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.', callerName, formatUnexpectedArgument(callback)) : _prodInvariant('122', callerName, formatUnexpectedArgument(callback)) : void 0;
	  }
	
	};
	
	module.exports = ReactUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(14),
	    _assign = __webpack_require__(25);
	
	var CallbackQueue = __webpack_require__(83);
	var PooledClass = __webpack_require__(84);
	var ReactFeatureFlags = __webpack_require__(68);
	var ReactReconciler = __webpack_require__(78);
	var Transaction = __webpack_require__(85);
	
	var invariant = __webpack_require__(23);
	
	var dirtyComponents = [];
	var updateBatchNumber = 0;
	var asapCallbackQueue = CallbackQueue.getPooled();
	var asapEnqueued = false;
	
	var batchingStrategy = null;
	
	function ensureInjected() {
	  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching strategy') : _prodInvariant('123') : void 0;
	}
	
	var NESTED_UPDATES = {
	  initialize: function () {
	    this.dirtyComponentsLength = dirtyComponents.length;
	  },
	  close: function () {
	    if (this.dirtyComponentsLength !== dirtyComponents.length) {
	      // Additional updates were enqueued by componentDidUpdate handlers or
	      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
	      // these new updates so that if A's componentDidUpdate calls setState on
	      // B, B will update before the callback A's updater provided when calling
	      // setState.
	      dirtyComponents.splice(0, this.dirtyComponentsLength);
	      flushBatchedUpdates();
	    } else {
	      dirtyComponents.length = 0;
	    }
	  }
	};
	
	var UPDATE_QUEUEING = {
	  initialize: function () {
	    this.callbackQueue.reset();
	  },
	  close: function () {
	    this.callbackQueue.notifyAll();
	  }
	};
	
	var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];
	
	function ReactUpdatesFlushTransaction() {
	  this.reinitializeTransaction();
	  this.dirtyComponentsLength = null;
	  this.callbackQueue = CallbackQueue.getPooled();
	  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled(
	  /* useCreateElement */true);
	}
	
	_assign(ReactUpdatesFlushTransaction.prototype, Transaction, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },
	
	  destructor: function () {
	    this.dirtyComponentsLength = null;
	    CallbackQueue.release(this.callbackQueue);
	    this.callbackQueue = null;
	    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
	    this.reconcileTransaction = null;
	  },
	
	  perform: function (method, scope, a) {
	    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
	    // with this transaction's wrappers around it.
	    return Transaction.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
	  }
	});
	
	PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);
	
	function batchedUpdates(callback, a, b, c, d, e) {
	  ensureInjected();
	  return batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
	}
	
	/**
	 * Array comparator for ReactComponents by mount ordering.
	 *
	 * @param {ReactComponent} c1 first component you're comparing
	 * @param {ReactComponent} c2 second component you're comparing
	 * @return {number} Return value usable by Array.prototype.sort().
	 */
	function mountOrderComparator(c1, c2) {
	  return c1._mountOrder - c2._mountOrder;
	}
	
	function runBatchedUpdates(transaction) {
	  var len = transaction.dirtyComponentsLength;
	  !(len === dirtyComponents.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to match dirty-components array length (%s).', len, dirtyComponents.length) : _prodInvariant('124', len, dirtyComponents.length) : void 0;
	
	  // Since reconciling a component higher in the owner hierarchy usually (not
	  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
	  // them before their children by sorting the array.
	  dirtyComponents.sort(mountOrderComparator);
	
	  // Any updates enqueued while reconciling must be performed after this entire
	  // batch. Otherwise, if dirtyComponents is [A, B] where A has children B and
	  // C, B could update twice in a single batch if C's render enqueues an update
	  // to B (since B would have already updated, we should skip it, and the only
	  // way we can know to do so is by checking the batch counter).
	  updateBatchNumber++;
	
	  for (var i = 0; i < len; i++) {
	    // If a component is unmounted before pending changes apply, it will still
	    // be here, but we assume that it has cleared its _pendingCallbacks and
	    // that performUpdateIfNecessary is a noop.
	    var component = dirtyComponents[i];
	
	    // If performUpdateIfNecessary happens to enqueue any new updates, we
	    // shouldn't execute the callbacks until the next render happens, so
	    // stash the callbacks first
	    var callbacks = component._pendingCallbacks;
	    component._pendingCallbacks = null;
	
	    var markerName;
	    if (ReactFeatureFlags.logTopLevelRenders) {
	      var namedComponent = component;
	      // Duck type TopLevelWrapper. This is probably always true.
	      if (component._currentElement.type.isReactTopLevelWrapper) {
	        namedComponent = component._renderedComponent;
	      }
	      markerName = 'React update: ' + namedComponent.getName();
	      console.time(markerName);
	    }
	
	    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction, updateBatchNumber);
	
	    if (markerName) {
	      console.timeEnd(markerName);
	    }
	
	    if (callbacks) {
	      for (var j = 0; j < callbacks.length; j++) {
	        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
	      }
	    }
	  }
	}
	
	var flushBatchedUpdates = function () {
	  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
	  // array and perform any updates enqueued by mount-ready handlers (i.e.,
	  // componentDidUpdate) but we need to check here too in order to catch
	  // updates enqueued by setState callbacks and asap calls.
	  while (dirtyComponents.length || asapEnqueued) {
	    if (dirtyComponents.length) {
	      var transaction = ReactUpdatesFlushTransaction.getPooled();
	      transaction.perform(runBatchedUpdates, null, transaction);
	      ReactUpdatesFlushTransaction.release(transaction);
	    }
	
	    if (asapEnqueued) {
	      asapEnqueued = false;
	      var queue = asapCallbackQueue;
	      asapCallbackQueue = CallbackQueue.getPooled();
	      queue.notifyAll();
	      CallbackQueue.release(queue);
	    }
	  }
	};
	
	/**
	 * Mark a component as needing a rerender, adding an optional callback to a
	 * list of functions which will be executed once the rerender occurs.
	 */
	function enqueueUpdate(component) {
	  ensureInjected();
	
	  // Various parts of our code (such as ReactCompositeComponent's
	  // _renderValidatedComponent) assume that calls to render aren't nested;
	  // verify that that's the case. (This is called by each top-level update
	  // function, like setState, forceUpdate, etc.; creation and
	  // destruction of top-level components is guarded in ReactMount.)
	
	  if (!batchingStrategy.isBatchingUpdates) {
	    batchingStrategy.batchedUpdates(enqueueUpdate, component);
	    return;
	  }
	
	  dirtyComponents.push(component);
	  if (component._updateBatchNumber == null) {
	    component._updateBatchNumber = updateBatchNumber + 1;
	  }
	}
	
	/**
	 * Enqueue a callback to be run at the end of the current batching cycle. Throws
	 * if no updates are currently being performed.
	 */
	function asap(callback, context) {
	  !batchingStrategy.isBatchingUpdates ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context whereupdates are not being batched.') : _prodInvariant('125') : void 0;
	  asapCallbackQueue.enqueue(callback, context);
	  asapEnqueued = true;
	}
	
	var ReactUpdatesInjection = {
	  injectReconcileTransaction: function (ReconcileTransaction) {
	    !ReconcileTransaction ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : _prodInvariant('126') : void 0;
	    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
	  },
	
	  injectBatchingStrategy: function (_batchingStrategy) {
	    !_batchingStrategy ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : _prodInvariant('127') : void 0;
	    !(typeof _batchingStrategy.batchedUpdates === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : _prodInvariant('128') : void 0;
	    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : _prodInvariant('129') : void 0;
	    batchingStrategy = _batchingStrategy;
	  }
	};
	
	var ReactUpdates = {
	  /**
	   * React references `ReactReconcileTransaction` using this property in order
	   * to allow dependency injection.
	   *
	   * @internal
	   */
	  ReactReconcileTransaction: null,
	
	  batchedUpdates: batchedUpdates,
	  enqueueUpdate: enqueueUpdate,
	  flushBatchedUpdates: flushBatchedUpdates,
	  injection: ReactUpdatesInjection,
	  asap: asap
	};
	
	module.exports = ReactUpdates;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(14);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var PooledClass = __webpack_require__(84);
	
	var invariant = __webpack_require__(23);
	
	/**
	 * A specialized pseudo-event module to help keep track of components waiting to
	 * be notified when their DOM representations are available for use.
	 *
	 * This implements `PooledClass`, so you should never need to instantiate this.
	 * Instead, use `CallbackQueue.getPooled()`.
	 *
	 * @class ReactMountReady
	 * @implements PooledClass
	 * @internal
	 */
	
	var CallbackQueue = function () {
	  function CallbackQueue(arg) {
	    _classCallCheck(this, CallbackQueue);
	
	    this._callbacks = null;
	    this._contexts = null;
	    this._arg = arg;
	  }
	
	  /**
	   * Enqueues a callback to be invoked when `notifyAll` is invoked.
	   *
	   * @param {function} callback Invoked when `notifyAll` is invoked.
	   * @param {?object} context Context to call `callback` with.
	   * @internal
	   */
	
	
	  CallbackQueue.prototype.enqueue = function enqueue(callback, context) {
	    this._callbacks = this._callbacks || [];
	    this._callbacks.push(callback);
	    this._contexts = this._contexts || [];
	    this._contexts.push(context);
	  };
	
	  /**
	   * Invokes all enqueued callbacks and clears the queue. This is invoked after
	   * the DOM representation of a component has been created or updated.
	   *
	   * @internal
	   */
	
	
	  CallbackQueue.prototype.notifyAll = function notifyAll() {
	    var callbacks = this._callbacks;
	    var contexts = this._contexts;
	    var arg = this._arg;
	    if (callbacks && contexts) {
	      !(callbacks.length === contexts.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : _prodInvariant('24') : void 0;
	      this._callbacks = null;
	      this._contexts = null;
	      for (var i = 0; i < callbacks.length; i++) {
	        callbacks[i].call(contexts[i], arg);
	      }
	      callbacks.length = 0;
	      contexts.length = 0;
	    }
	  };
	
	  CallbackQueue.prototype.checkpoint = function checkpoint() {
	    return this._callbacks ? this._callbacks.length : 0;
	  };
	
	  CallbackQueue.prototype.rollback = function rollback(len) {
	    if (this._callbacks && this._contexts) {
	      this._callbacks.length = len;
	      this._contexts.length = len;
	    }
	  };
	
	  /**
	   * Resets the internal queue.
	   *
	   * @internal
	   */
	
	
	  CallbackQueue.prototype.reset = function reset() {
	    this._callbacks = null;
	    this._contexts = null;
	  };
	
	  /**
	   * `PooledClass` looks for this.
	   */
	
	
	  CallbackQueue.prototype.destructor = function destructor() {
	    this.reset();
	  };
	
	  return CallbackQueue;
	}();
	
	module.exports = PooledClass.addPoolingTo(CallbackQueue);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(14);
	
	var invariant = __webpack_require__(23);
	
	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function (copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};
	
	var twoArgumentPooler = function (a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};
	
	var threeArgumentPooler = function (a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};
	
	var fourArgumentPooler = function (a1, a2, a3, a4) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4);
	  }
	};
	
	var fiveArgumentPooler = function (a1, a2, a3, a4, a5) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4, a5);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4, a5);
	  }
	};
	
	var standardReleaser = function (instance) {
	  var Klass = this;
	  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
	  instance.destructor();
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};
	
	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;
	
	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances.
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function (CopyConstructor, pooler) {
	  // Casting as any so that flow ignores the actual implementation and trusts
	  // it to match the type we declared
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};
	
	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fourArgumentPooler: fourArgumentPooler,
	  fiveArgumentPooler: fiveArgumentPooler
	};
	
	module.exports = PooledClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(14);
	
	var invariant = __webpack_require__(23);
	
	var OBSERVED_ERROR = {};
	
	/**
	 * `Transaction` creates a black box that is able to wrap any method such that
	 * certain invariants are maintained before and after the method is invoked
	 * (Even if an exception is thrown while invoking the wrapped method). Whoever
	 * instantiates a transaction can provide enforcers of the invariants at
	 * creation time. The `Transaction` class itself will supply one additional
	 * automatic invariant for you - the invariant that any transaction instance
	 * should not be run while it is already being run. You would typically create a
	 * single instance of a `Transaction` for reuse multiple times, that potentially
	 * is used to wrap several different methods. Wrappers are extremely simple -
	 * they only require implementing two methods.
	 *
	 * <pre>
	 *                       wrappers (injected at creation time)
	 *                                      +        +
	 *                                      |        |
	 *                    +-----------------|--------|--------------+
	 *                    |                 v        |              |
	 *                    |      +---------------+   |              |
	 *                    |   +--|    wrapper1   |---|----+         |
	 *                    |   |  +---------------+   v    |         |
	 *                    |   |          +-------------+  |         |
	 *                    |   |     +----|   wrapper2  |--------+   |
	 *                    |   |     |    +-------------+  |     |   |
	 *                    |   |     |                     |     |   |
	 *                    |   v     v                     v     v   | wrapper
	 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
	 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
	 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | +---+ +---+   +---------+   +---+ +---+ |
	 *                    |  initialize                    close    |
	 *                    +-----------------------------------------+
	 * </pre>
	 *
	 * Use cases:
	 * - Preserving the input selection ranges before/after reconciliation.
	 *   Restoring selection even in the event of an unexpected error.
	 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
	 *   while guaranteeing that afterwards, the event system is reactivated.
	 * - Flushing a queue of collected DOM mutations to the main UI thread after a
	 *   reconciliation takes place in a worker thread.
	 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
	 *   content.
	 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
	 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
	 * - (Future use case): Layout calculations before and after DOM updates.
	 *
	 * Transactional plugin API:
	 * - A module that has an `initialize` method that returns any precomputation.
	 * - and a `close` method that accepts the precomputation. `close` is invoked
	 *   when the wrapped process is completed, or has failed.
	 *
	 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
	 * that implement `initialize` and `close`.
	 * @return {Transaction} Single transaction for reuse in thread.
	 *
	 * @class Transaction
	 */
	var TransactionImpl = {
	  /**
	   * Sets up this instance so that it is prepared for collecting metrics. Does
	   * so such that this setup method may be used on an instance that is already
	   * initialized, in a way that does not consume additional memory upon reuse.
	   * That can be useful if you decide to make your subclass of this mixin a
	   * "PooledClass".
	   */
	  reinitializeTransaction: function () {
	    this.transactionWrappers = this.getTransactionWrappers();
	    if (this.wrapperInitData) {
	      this.wrapperInitData.length = 0;
	    } else {
	      this.wrapperInitData = [];
	    }
	    this._isInTransaction = false;
	  },
	
	  _isInTransaction: false,
	
	  /**
	   * @abstract
	   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
	   */
	  getTransactionWrappers: null,
	
	  isInTransaction: function () {
	    return !!this._isInTransaction;
	  },
	
	  /**
	   * Executes the function within a safety window. Use this for the top level
	   * methods that result in large amounts of computation/mutations that would
	   * need to be safety checked. The optional arguments helps prevent the need
	   * to bind in many cases.
	   *
	   * @param {function} method Member of scope to call.
	   * @param {Object} scope Scope to invoke from.
	   * @param {Object?=} a Argument to pass to the method.
	   * @param {Object?=} b Argument to pass to the method.
	   * @param {Object?=} c Argument to pass to the method.
	   * @param {Object?=} d Argument to pass to the method.
	   * @param {Object?=} e Argument to pass to the method.
	   * @param {Object?=} f Argument to pass to the method.
	   *
	   * @return {*} Return value from `method`.
	   */
	  perform: function (method, scope, a, b, c, d, e, f) {
	    !!this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there is already an outstanding transaction.') : _prodInvariant('27') : void 0;
	    var errorThrown;
	    var ret;
	    try {
	      this._isInTransaction = true;
	      // Catching errors makes debugging more difficult, so we start with
	      // errorThrown set to true before setting it to false after calling
	      // close -- if it's still set to true in the finally block, it means
	      // one of these calls threw.
	      errorThrown = true;
	      this.initializeAll(0);
	      ret = method.call(scope, a, b, c, d, e, f);
	      errorThrown = false;
	    } finally {
	      try {
	        if (errorThrown) {
	          // If `method` throws, prefer to show that stack trace over any thrown
	          // by invoking `closeAll`.
	          try {
	            this.closeAll(0);
	          } catch (err) {}
	        } else {
	          // Since `method` didn't throw, we don't want to silence the exception
	          // here.
	          this.closeAll(0);
	        }
	      } finally {
	        this._isInTransaction = false;
	      }
	    }
	    return ret;
	  },
	
	  initializeAll: function (startIndex) {
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      try {
	        // Catching errors makes debugging more difficult, so we start with the
	        // OBSERVED_ERROR state before overwriting it with the real return value
	        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
	        // block, it means wrapper.initialize threw.
	        this.wrapperInitData[i] = OBSERVED_ERROR;
	        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
	      } finally {
	        if (this.wrapperInitData[i] === OBSERVED_ERROR) {
	          // The initializer for wrapper i threw an error; initialize the
	          // remaining wrappers but silence any exceptions from them to ensure
	          // that the first error is the one to bubble up.
	          try {
	            this.initializeAll(i + 1);
	          } catch (err) {}
	        }
	      }
	    }
	  },
	
	  /**
	   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
	   * them the respective return values of `this.transactionWrappers.init[i]`
	   * (`close`rs that correspond to initializers that failed will not be
	   * invoked).
	   */
	  closeAll: function (startIndex) {
	    !this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : _prodInvariant('28') : void 0;
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      var initData = this.wrapperInitData[i];
	      var errorThrown;
	      try {
	        // Catching errors makes debugging more difficult, so we start with
	        // errorThrown set to true before setting it to false after calling
	        // close -- if it's still set to true in the finally block, it means
	        // wrapper.close threw.
	        errorThrown = true;
	        if (initData !== OBSERVED_ERROR && wrapper.close) {
	          wrapper.close.call(this, initData);
	        }
	        errorThrown = false;
	      } finally {
	        if (errorThrown) {
	          // The closer for wrapper i threw an error; close the remaining
	          // wrappers but silence any exceptions from them to ensure that the
	          // first error is the one to bubble up.
	          try {
	            this.closeAll(i + 1);
	          } catch (e) {}
	        }
	      }
	    }
	    this.wrapperInitData.length = 0;
	  }
	};
	
	module.exports = TransactionImpl;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(14),
	    _assign = __webpack_require__(25);
	
	var ReactCompositeComponent = __webpack_require__(87);
	var ReactEmptyComponent = __webpack_require__(95);
	var ReactHostComponent = __webpack_require__(96);
	
	var getNextDebugID = __webpack_require__(97);
	var invariant = __webpack_require__(23);
	var warning = __webpack_require__(31);
	
	// To avoid a cyclic dependency, we create the final class in this module
	var ReactCompositeComponentWrapper = function (element) {
	  this.construct(element);
	};
	_assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent, {
	  _instantiateReactComponent: instantiateReactComponent
	});
	
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}
	
	/**
	 * Check if the type reference is a known internal type. I.e. not a user
	 * provided composite type.
	 *
	 * @param {function} type
	 * @return {boolean} Returns true if this is a valid internal type.
	 */
	function isInternalComponentType(type) {
	  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
	}
	
	/**
	 * Given a ReactNode, create an instance that will actually be mounted.
	 *
	 * @param {ReactNode} node
	 * @param {boolean} shouldHaveDebugID
	 * @return {object} A new instance of the element's constructor.
	 * @protected
	 */
	function instantiateReactComponent(node, shouldHaveDebugID) {
	  var instance;
	
	  if (node === null || node === false) {
	    instance = ReactEmptyComponent.create(instantiateReactComponent);
	  } else if (typeof node === 'object') {
	    var element = node;
	    !(element && (typeof element.type === 'function' || typeof element.type === 'string')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s', element.type == null ? element.type : typeof element.type, getDeclarationErrorAddendum(element._owner)) : _prodInvariant('130', element.type == null ? element.type : typeof element.type, getDeclarationErrorAddendum(element._owner)) : void 0;
	
	    // Special case string values
	    if (typeof element.type === 'string') {
	      instance = ReactHostComponent.createInternalComponent(element);
	    } else if (isInternalComponentType(element.type)) {
	      // This is temporarily available for custom components that are not string
	      // representations. I.e. ART. Once those are updated to use the string
	      // representation, we can drop this code path.
	      instance = new element.type(element);
	
	      // We renamed this. Allow the old name for compat. :(
	      if (!instance.getHostNode) {
	        instance.getHostNode = instance.getNativeNode;
	      }
	    } else {
	      instance = new ReactCompositeComponentWrapper(element);
	    }
	  } else if (typeof node === 'string' || typeof node === 'number') {
	    instance = ReactHostComponent.createInstanceForText(node);
	  } else {
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : _prodInvariant('131', typeof node) : void 0;
	  }
	
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.getHostNode === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : void 0;
	  }
	
	  // These two fields are used by the DOM and ART diffing algorithms
	  // respectively. Instead of using expandos on components, we should be
	  // storing the state needed by the diffing algorithms elsewhere.
	  instance._mountIndex = 0;
	  instance._mountImage = null;
	
	  if (process.env.NODE_ENV !== 'production') {
	    instance._debugID = shouldHaveDebugID ? getNextDebugID() : 0;
	  }
	
	  // Internal instances should fully constructed at this point, so they should
	  // not get any new fields added to them at this point.
	  if (process.env.NODE_ENV !== 'production') {
	    if (Object.preventExtensions) {
	      Object.preventExtensions(instance);
	    }
	  }
	
	  return instance;
	}
	
	module.exports = instantiateReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(14),
	    _assign = __webpack_require__(25);
	
	var React = __webpack_require__(24);
	var ReactComponentEnvironment = __webpack_require__(88);
	var ReactCurrentOwner = __webpack_require__(30);
	var ReactErrorUtils = __webpack_require__(57);
	var ReactInstanceMap = __webpack_require__(69);
	var ReactInstrumentation = __webpack_require__(70);
	var ReactNodeTypes = __webpack_require__(89);
	var ReactReconciler = __webpack_require__(78);
	
	if (process.env.NODE_ENV !== 'production') {
	  var checkReactTypeSpec = __webpack_require__(90);
	}
	
	var emptyObject = __webpack_require__(40);
	var invariant = __webpack_require__(23);
	var shallowEqual = __webpack_require__(93);
	var shouldUpdateReactComponent = __webpack_require__(94);
	var warning = __webpack_require__(31);
	
	var CompositeTypes = {
	  ImpureClass: 0,
	  PureClass: 1,
	  StatelessFunctional: 2
	};
	
	function StatelessComponent(Component) {}
	StatelessComponent.prototype.render = function () {
	  var Component = ReactInstanceMap.get(this)._currentElement.type;
	  var element = Component(this.props, this.context, this.updater);
	  warnIfInvalidElement(Component, element);
	  return element;
	};
	
	function warnIfInvalidElement(Component, element) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(element === null || element === false || React.isValidElement(element), '%s(...): A valid React element (or null) must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : void 0;
	    process.env.NODE_ENV !== 'production' ? warning(!Component.childContextTypes, '%s(...): childContextTypes cannot be defined on a functional component.', Component.displayName || Component.name || 'Component') : void 0;
	  }
	}
	
	function shouldConstruct(Component) {
	  return !!(Component.prototype && Component.prototype.isReactComponent);
	}
	
	function isPureComponent(Component) {
	  return !!(Component.prototype && Component.prototype.isPureReactComponent);
	}
	
	// Separated into a function to contain deoptimizations caused by try/finally.
	function measureLifeCyclePerf(fn, debugID, timerType) {
	  if (debugID === 0) {
	    // Top-level wrappers (see ReactMount) and empty components (see
	    // ReactDOMEmptyComponent) are invisible to hooks and devtools.
	    // Both are implementation details that should go away in the future.
	    return fn();
	  }
	
	  ReactInstrumentation.debugTool.onBeginLifeCycleTimer(debugID, timerType);
	  try {
	    return fn();
	  } finally {
	    ReactInstrumentation.debugTool.onEndLifeCycleTimer(debugID, timerType);
	  }
	}
	
	/**
	 * ------------------ The Life-Cycle of a Composite Component ------------------
	 *
	 * - constructor: Initialization of state. The instance is now retained.
	 *   - componentWillMount
	 *   - render
	 *   - [children's constructors]
	 *     - [children's componentWillMount and render]
	 *     - [children's componentDidMount]
	 *     - componentDidMount
	 *
	 *       Update Phases:
	 *       - componentWillReceiveProps (only called if parent updated)
	 *       - shouldComponentUpdate
	 *         - componentWillUpdate
	 *           - render
	 *           - [children's constructors or receive props phases]
	 *         - componentDidUpdate
	 *
	 *     - componentWillUnmount
	 *     - [children's componentWillUnmount]
	 *   - [children destroyed]
	 * - (destroyed): The instance is now blank, released by React and ready for GC.
	 *
	 * -----------------------------------------------------------------------------
	 */
	
	/**
	 * An incrementing ID assigned to each component when it is mounted. This is
	 * used to enforce the order in which `ReactUpdates` updates dirty components.
	 *
	 * @private
	 */
	var nextMountID = 1;
	
	/**
	 * @lends {ReactCompositeComponent.prototype}
	 */
	var ReactCompositeComponent = {
	
	  /**
	   * Base constructor for all composite component.
	   *
	   * @param {ReactElement} element
	   * @final
	   * @internal
	   */
	  construct: function (element) {
	    this._currentElement = element;
	    this._rootNodeID = 0;
	    this._compositeType = null;
	    this._instance = null;
	    this._hostParent = null;
	    this._hostContainerInfo = null;
	
	    // See ReactUpdateQueue
	    this._updateBatchNumber = null;
	    this._pendingElement = null;
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	
	    this._renderedNodeType = null;
	    this._renderedComponent = null;
	    this._context = null;
	    this._mountOrder = 0;
	    this._topLevelWrapper = null;
	
	    // See ReactUpdates and ReactUpdateQueue.
	    this._pendingCallbacks = null;
	
	    // ComponentWillUnmount shall only be called once
	    this._calledComponentWillUnmount = false;
	
	    if (process.env.NODE_ENV !== 'production') {
	      this._warnedAboutRefsInRender = false;
	    }
	  },
	
	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {?object} hostParent
	   * @param {?object} hostContainerInfo
	   * @param {?object} context
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    var _this = this;
	
	    this._context = context;
	    this._mountOrder = nextMountID++;
	    this._hostParent = hostParent;
	    this._hostContainerInfo = hostContainerInfo;
	
	    var publicProps = this._currentElement.props;
	    var publicContext = this._processContext(context);
	
	    var Component = this._currentElement.type;
	
	    var updateQueue = transaction.getUpdateQueue();
	
	    // Initialize the public class
	    var doConstruct = shouldConstruct(Component);
	    var inst = this._constructComponent(doConstruct, publicProps, publicContext, updateQueue);
	    var renderedElement;
	
	    // Support functional components
	    if (!doConstruct && (inst == null || inst.render == null)) {
	      renderedElement = inst;
	      warnIfInvalidElement(Component, renderedElement);
	      !(inst === null || inst === false || React.isValidElement(inst)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s(...): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : _prodInvariant('105', Component.displayName || Component.name || 'Component') : void 0;
	      inst = new StatelessComponent(Component);
	      this._compositeType = CompositeTypes.StatelessFunctional;
	    } else {
	      if (isPureComponent(Component)) {
	        this._compositeType = CompositeTypes.PureClass;
	      } else {
	        this._compositeType = CompositeTypes.ImpureClass;
	      }
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      // This will throw later in _renderValidatedComponent, but add an early
	      // warning now to help debugging
	      if (inst.render == null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', Component.displayName || Component.name || 'Component') : void 0;
	      }
	
	      var propsMutated = inst.props !== publicProps;
	      var componentName = Component.displayName || Component.name || 'Component';
	
	      process.env.NODE_ENV !== 'production' ? warning(inst.props === undefined || !propsMutated, '%s(...): When calling super() in `%s`, make sure to pass ' + 'up the same props that your component\'s constructor was passed.', componentName, componentName) : void 0;
	    }
	
	    // These should be set up in the constructor, but as a convenience for
	    // simpler class abstractions, we set them up after the fact.
	    inst.props = publicProps;
	    inst.context = publicContext;
	    inst.refs = emptyObject;
	    inst.updater = updateQueue;
	
	    this._instance = inst;
	
	    // Store a reference from the instance back to the internal representation
	    ReactInstanceMap.set(inst, this);
	
	    if (process.env.NODE_ENV !== 'production') {
	      // Since plain JS classes are defined without any special initialization
	      // logic, we can not catch common errors early. Therefore, we have to
	      // catch them here, at initialization time, instead.
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : void 0;
	    }
	
	    var initialState = inst.state;
	    if (initialState === undefined) {
	      inst.state = initialState = null;
	    }
	    !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : _prodInvariant('106', this.getName() || 'ReactCompositeComponent') : void 0;
	
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	
	    var markup;
	    if (inst.unstable_handleError) {
	      markup = this.performInitialMountWithErrorHandling(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    } else {
	      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    }
	
	    if (inst.componentDidMount) {
	      if (process.env.NODE_ENV !== 'production') {
	        transaction.getReactMountReady().enqueue(function () {
	          measureLifeCyclePerf(function () {
	            return inst.componentDidMount();
	          }, _this._debugID, 'componentDidMount');
	        });
	      } else {
	        transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
	      }
	    }
	
	    return markup;
	  },
	
	  _constructComponent: function (doConstruct, publicProps, publicContext, updateQueue) {
	    if (process.env.NODE_ENV !== 'production') {
	      ReactCurrentOwner.current = this;
	      try {
	        return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
	      } finally {
	        ReactCurrentOwner.current = null;
	      }
	    } else {
	      return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
	    }
	  },
	
	  _constructComponentWithoutOwner: function (doConstruct, publicProps, publicContext, updateQueue) {
	    var Component = this._currentElement.type;
	
	    if (doConstruct) {
	      if (process.env.NODE_ENV !== 'production') {
	        return measureLifeCyclePerf(function () {
	          return new Component(publicProps, publicContext, updateQueue);
	        }, this._debugID, 'ctor');
	      } else {
	        return new Component(publicProps, publicContext, updateQueue);
	      }
	    }
	
	    // This can still be an instance in case of factory components
	    // but we'll count this as time spent rendering as the more common case.
	    if (process.env.NODE_ENV !== 'production') {
	      return measureLifeCyclePerf(function () {
	        return Component(publicProps, publicContext, updateQueue);
	      }, this._debugID, 'render');
	    } else {
	      return Component(publicProps, publicContext, updateQueue);
	    }
	  },
	
	  performInitialMountWithErrorHandling: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
	    var markup;
	    var checkpoint = transaction.checkpoint();
	    try {
	      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    } catch (e) {
	      // Roll back to checkpoint, handle error (which may add items to the transaction), and take a new checkpoint
	      transaction.rollback(checkpoint);
	      this._instance.unstable_handleError(e);
	      if (this._pendingStateQueue) {
	        this._instance.state = this._processPendingState(this._instance.props, this._instance.context);
	      }
	      checkpoint = transaction.checkpoint();
	
	      this._renderedComponent.unmountComponent(true);
	      transaction.rollback(checkpoint);
	
	      // Try again - we've informed the component about the error, so they can render an error message this time.
	      // If this throws again, the error will bubble up (and can be caught by a higher error boundary).
	      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    }
	    return markup;
	  },
	
	  performInitialMount: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
	    var inst = this._instance;
	
	    var debugID = 0;
	    if (process.env.NODE_ENV !== 'production') {
	      debugID = this._debugID;
	    }
	
	    if (inst.componentWillMount) {
	      if (process.env.NODE_ENV !== 'production') {
	        measureLifeCyclePerf(function () {
	          return inst.componentWillMount();
	        }, debugID, 'componentWillMount');
	      } else {
	        inst.componentWillMount();
	      }
	      // When mounting, calls to `setState` by `componentWillMount` will set
	      // `this._pendingStateQueue` without triggering a re-render.
	      if (this._pendingStateQueue) {
	        inst.state = this._processPendingState(inst.props, inst.context);
	      }
	    }
	
	    // If not a stateless component, we now render
	    if (renderedElement === undefined) {
	      renderedElement = this._renderValidatedComponent();
	    }
	
	    var nodeType = ReactNodeTypes.getType(renderedElement);
	    this._renderedNodeType = nodeType;
	    var child = this._instantiateReactComponent(renderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
	    );
	    this._renderedComponent = child;
	
	    var markup = ReactReconciler.mountComponent(child, transaction, hostParent, hostContainerInfo, this._processChildContext(context), debugID);
	
	    if (process.env.NODE_ENV !== 'production') {
	      if (debugID !== 0) {
	        var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
	        ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
	      }
	    }
	
	    return markup;
	  },
	
	  getHostNode: function () {
	    return ReactReconciler.getHostNode(this._renderedComponent);
	  },
	
	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function (safely) {
	    if (!this._renderedComponent) {
	      return;
	    }
	
	    var inst = this._instance;
	
	    if (inst.componentWillUnmount && !inst._calledComponentWillUnmount) {
	      inst._calledComponentWillUnmount = true;
	
	      if (safely) {
	        var name = this.getName() + '.componentWillUnmount()';
	        ReactErrorUtils.invokeGuardedCallback(name, inst.componentWillUnmount.bind(inst));
	      } else {
	        if (process.env.NODE_ENV !== 'production') {
	          measureLifeCyclePerf(function () {
	            return inst.componentWillUnmount();
	          }, this._debugID, 'componentWillUnmount');
	        } else {
	          inst.componentWillUnmount();
	        }
	      }
	    }
	
	    if (this._renderedComponent) {
	      ReactReconciler.unmountComponent(this._renderedComponent, safely);
	      this._renderedNodeType = null;
	      this._renderedComponent = null;
	      this._instance = null;
	    }
	
	    // Reset pending fields
	    // Even if this component is scheduled for another update in ReactUpdates,
	    // it would still be ignored because these fields are reset.
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	    this._pendingCallbacks = null;
	    this._pendingElement = null;
	
	    // These fields do not really need to be reset since this object is no
	    // longer accessible.
	    this._context = null;
	    this._rootNodeID = 0;
	    this._topLevelWrapper = null;
	
	    // Delete the reference from the instance to this internal representation
	    // which allow the internals to be properly cleaned up even if the user
	    // leaks a reference to the public instance.
	    ReactInstanceMap.remove(inst);
	
	    // Some existing components rely on inst.props even after they've been
	    // destroyed (in event handlers).
	    // TODO: inst.props = null;
	    // TODO: inst.state = null;
	    // TODO: inst.context = null;
	  },
	
	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _maskContext: function (context) {
	    var Component = this._currentElement.type;
	    var contextTypes = Component.contextTypes;
	    if (!contextTypes) {
	      return emptyObject;
	    }
	    var maskedContext = {};
	    for (var contextName in contextTypes) {
	      maskedContext[contextName] = context[contextName];
	    }
	    return maskedContext;
	  },
	
	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`, and asserts that they are valid.
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _processContext: function (context) {
	    var maskedContext = this._maskContext(context);
	    if (process.env.NODE_ENV !== 'production') {
	      var Component = this._currentElement.type;
	      if (Component.contextTypes) {
	        this._checkContextTypes(Component.contextTypes, maskedContext, 'context');
	      }
	    }
	    return maskedContext;
	  },
	
	  /**
	   * @param {object} currentContext
	   * @return {object}
	   * @private
	   */
	  _processChildContext: function (currentContext) {
	    var Component = this._currentElement.type;
	    var inst = this._instance;
	    var childContext;
	
	    if (inst.getChildContext) {
	      if (process.env.NODE_ENV !== 'production') {
	        ReactInstrumentation.debugTool.onBeginProcessingChildContext();
	        try {
	          childContext = inst.getChildContext();
	        } finally {
	          ReactInstrumentation.debugTool.onEndProcessingChildContext();
	        }
	      } else {
	        childContext = inst.getChildContext();
	      }
	    }
	
	    if (childContext) {
	      !(typeof Component.childContextTypes === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().', this.getName() || 'ReactCompositeComponent') : _prodInvariant('107', this.getName() || 'ReactCompositeComponent') : void 0;
	      if (process.env.NODE_ENV !== 'production') {
	        this._checkContextTypes(Component.childContextTypes, childContext, 'childContext');
	      }
	      for (var name in childContext) {
	        !(name in Component.childContextTypes) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : _prodInvariant('108', this.getName() || 'ReactCompositeComponent', name) : void 0;
	      }
	      return _assign({}, currentContext, childContext);
	    }
	    return currentContext;
	  },
	
	  /**
	   * Assert that the context types are valid
	   *
	   * @param {object} typeSpecs Map of context field to a ReactPropType
	   * @param {object} values Runtime values that need to be type-checked
	   * @param {string} location e.g. "prop", "context", "child context"
	   * @private
	   */
	  _checkContextTypes: function (typeSpecs, values, location) {
	    if (process.env.NODE_ENV !== 'production') {
	      checkReactTypeSpec(typeSpecs, values, location, this.getName(), null, this._debugID);
	    }
	  },
	
	  receiveComponent: function (nextElement, transaction, nextContext) {
	    var prevElement = this._currentElement;
	    var prevContext = this._context;
	
	    this._pendingElement = null;
	
	    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
	  },
	
	  /**
	   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
	   * is set, update the component.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (transaction) {
	    if (this._pendingElement != null) {
	      ReactReconciler.receiveComponent(this, this._pendingElement, transaction, this._context);
	    } else if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
	      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
	    } else {
	      this._updateBatchNumber = null;
	    }
	  },
	
	  /**
	   * Perform an update to a mounted component. The componentWillReceiveProps and
	   * shouldComponentUpdate methods are called, then (assuming the update isn't
	   * skipped) the remaining update lifecycle methods are called and the DOM
	   * representation is updated.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevParentElement
	   * @param {ReactElement} nextParentElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
	    var inst = this._instance;
	    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Attempted to update component `%s` that has already been unmounted (or failed to mount).', this.getName() || 'ReactCompositeComponent') : _prodInvariant('136', this.getName() || 'ReactCompositeComponent') : void 0;
	
	    var willReceive = false;
	    var nextContext;
	
	    // Determine if the context has changed or not
	    if (this._context === nextUnmaskedContext) {
	      nextContext = inst.context;
	    } else {
	      nextContext = this._processContext(nextUnmaskedContext);
	      willReceive = true;
	    }
	
	    var prevProps = prevParentElement.props;
	    var nextProps = nextParentElement.props;
	
	    // Not a simple state update but a props update
	    if (prevParentElement !== nextParentElement) {
	      willReceive = true;
	    }
	
	    // An update here will schedule an update but immediately set
	    // _pendingStateQueue which will ensure that any state updates gets
	    // immediately reconciled instead of waiting for the next batch.
	    if (willReceive && inst.componentWillReceiveProps) {
	      if (process.env.NODE_ENV !== 'production') {
	        measureLifeCyclePerf(function () {
	          return inst.componentWillReceiveProps(nextProps, nextContext);
	        }, this._debugID, 'componentWillReceiveProps');
	      } else {
	        inst.componentWillReceiveProps(nextProps, nextContext);
	      }
	    }
	
	    var nextState = this._processPendingState(nextProps, nextContext);
	    var shouldUpdate = true;
	
	    if (!this._pendingForceUpdate) {
	      if (inst.shouldComponentUpdate) {
	        if (process.env.NODE_ENV !== 'production') {
	          shouldUpdate = measureLifeCyclePerf(function () {
	            return inst.shouldComponentUpdate(nextProps, nextState, nextContext);
	          }, this._debugID, 'shouldComponentUpdate');
	        } else {
	          shouldUpdate = inst.shouldComponentUpdate(nextProps, nextState, nextContext);
	        }
	      } else {
	        if (this._compositeType === CompositeTypes.PureClass) {
	          shouldUpdate = !shallowEqual(prevProps, nextProps) || !shallowEqual(inst.state, nextState);
	        }
	      }
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(shouldUpdate !== undefined, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : void 0;
	    }
	
	    this._updateBatchNumber = null;
	    if (shouldUpdate) {
	      this._pendingForceUpdate = false;
	      // Will set `this.props`, `this.state` and `this.context`.
	      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
	    } else {
	      // If it's determined that a component should not update, we still want
	      // to set props and state but we shortcut the rest of the update.
	      this._currentElement = nextParentElement;
	      this._context = nextUnmaskedContext;
	      inst.props = nextProps;
	      inst.state = nextState;
	      inst.context = nextContext;
	    }
	  },
	
	  _processPendingState: function (props, context) {
	    var inst = this._instance;
	    var queue = this._pendingStateQueue;
	    var replace = this._pendingReplaceState;
	    this._pendingReplaceState = false;
	    this._pendingStateQueue = null;
	
	    if (!queue) {
	      return inst.state;
	    }
	
	    if (replace && queue.length === 1) {
	      return queue[0];
	    }
	
	    var nextState = _assign({}, replace ? queue[0] : inst.state);
	    for (var i = replace ? 1 : 0; i < queue.length; i++) {
	      var partial = queue[i];
	      _assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
	    }
	
	    return nextState;
	  },
	
	  /**
	   * Merges new props and state, notifies delegate methods of update and
	   * performs update.
	   *
	   * @param {ReactElement} nextElement Next element
	   * @param {object} nextProps Next public object to set as properties.
	   * @param {?object} nextState Next object to set as state.
	   * @param {?object} nextContext Next public object to set as context.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?object} unmaskedContext
	   * @private
	   */
	  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
	    var _this2 = this;
	
	    var inst = this._instance;
	
	    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
	    var prevProps;
	    var prevState;
	    var prevContext;
	    if (hasComponentDidUpdate) {
	      prevProps = inst.props;
	      prevState = inst.state;
	      prevContext = inst.context;
	    }
	
	    if (inst.componentWillUpdate) {
	      if (process.env.NODE_ENV !== 'production') {
	        measureLifeCyclePerf(function () {
	          return inst.componentWillUpdate(nextProps, nextState, nextContext);
	        }, this._debugID, 'componentWillUpdate');
	      } else {
	        inst.componentWillUpdate(nextProps, nextState, nextContext);
	      }
	    }
	
	    this._currentElement = nextElement;
	    this._context = unmaskedContext;
	    inst.props = nextProps;
	    inst.state = nextState;
	    inst.context = nextContext;
	
	    this._updateRenderedComponent(transaction, unmaskedContext);
	
	    if (hasComponentDidUpdate) {
	      if (process.env.NODE_ENV !== 'production') {
	        transaction.getReactMountReady().enqueue(function () {
	          measureLifeCyclePerf(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), _this2._debugID, 'componentDidUpdate');
	        });
	      } else {
	        transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
	      }
	    }
	  },
	
	  /**
	   * Call the component's `render` method and update the DOM accordingly.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  _updateRenderedComponent: function (transaction, context) {
	    var prevComponentInstance = this._renderedComponent;
	    var prevRenderedElement = prevComponentInstance._currentElement;
	    var nextRenderedElement = this._renderValidatedComponent();
	
	    var debugID = 0;
	    if (process.env.NODE_ENV !== 'production') {
	      debugID = this._debugID;
	    }
	
	    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
	      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
	    } else {
	      var oldHostNode = ReactReconciler.getHostNode(prevComponentInstance);
	      ReactReconciler.unmountComponent(prevComponentInstance, false);
	
	      var nodeType = ReactNodeTypes.getType(nextRenderedElement);
	      this._renderedNodeType = nodeType;
	      var child = this._instantiateReactComponent(nextRenderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
	      );
	      this._renderedComponent = child;
	
	      var nextMarkup = ReactReconciler.mountComponent(child, transaction, this._hostParent, this._hostContainerInfo, this._processChildContext(context), debugID);
	
	      if (process.env.NODE_ENV !== 'production') {
	        if (debugID !== 0) {
	          var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
	          ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
	        }
	      }
	
	      this._replaceNodeWithMarkup(oldHostNode, nextMarkup, prevComponentInstance);
	    }
	  },
	
	  /**
	   * Overridden in shallow rendering.
	   *
	   * @protected
	   */
	  _replaceNodeWithMarkup: function (oldHostNode, nextMarkup, prevInstance) {
	    ReactComponentEnvironment.replaceNodeWithMarkup(oldHostNode, nextMarkup, prevInstance);
	  },
	
	  /**
	   * @protected
	   */
	  _renderValidatedComponentWithoutOwnerOrContext: function () {
	    var inst = this._instance;
	    var renderedElement;
	
	    if (process.env.NODE_ENV !== 'production') {
	      renderedElement = measureLifeCyclePerf(function () {
	        return inst.render();
	      }, this._debugID, 'render');
	    } else {
	      renderedElement = inst.render();
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      // We allow auto-mocks to proceed as if they're returning null.
	      if (renderedElement === undefined && inst.render._isMockFunction) {
	        // This is probably bad practice. Consider warning here and
	        // deprecating this convenience.
	        renderedElement = null;
	      }
	    }
	
	    return renderedElement;
	  },
	
	  /**
	   * @private
	   */
	  _renderValidatedComponent: function () {
	    var renderedElement;
	    if (process.env.NODE_ENV !== 'production' || this._compositeType !== CompositeTypes.StatelessFunctional) {
	      ReactCurrentOwner.current = this;
	      try {
	        renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
	      } finally {
	        ReactCurrentOwner.current = null;
	      }
	    } else {
	      renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
	    }
	    !(
	    // TODO: An `isValidNode` function would probably be more appropriate
	    renderedElement === null || renderedElement === false || React.isValidElement(renderedElement)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.render(): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : _prodInvariant('109', this.getName() || 'ReactCompositeComponent') : void 0;
	
	    return renderedElement;
	  },
	
	  /**
	   * Lazily allocates the refs object and stores `component` as `ref`.
	   *
	   * @param {string} ref Reference name.
	   * @param {component} component Component to store as `ref`.
	   * @final
	   * @private
	   */
	  attachRef: function (ref, component) {
	    var inst = this.getPublicInstance();
	    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : _prodInvariant('110') : void 0;
	    var publicComponentInstance = component.getPublicInstance();
	    if (process.env.NODE_ENV !== 'production') {
	      var componentName = component && component.getName ? component.getName() : 'a component';
	      process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null || component._compositeType !== CompositeTypes.StatelessFunctional, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : void 0;
	    }
	    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
	    refs[ref] = publicComponentInstance;
	  },
	
	  /**
	   * Detaches a reference name.
	   *
	   * @param {string} ref Name to dereference.
	   * @final
	   * @private
	   */
	  detachRef: function (ref) {
	    var refs = this.getPublicInstance().refs;
	    delete refs[ref];
	  },
	
	  /**
	   * Get a text description of the component that can be used to identify it
	   * in error messages.
	   * @return {string} The name or null.
	   * @internal
	   */
	  getName: function () {
	    var type = this._currentElement.type;
	    var constructor = this._instance && this._instance.constructor;
	    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
	  },
	
	  /**
	   * Get the publicly accessible representation of this component - i.e. what
	   * is exposed by refs and returned by render. Can be null for stateless
	   * components.
	   *
	   * @return {ReactComponent} the public component instance.
	   * @internal
	   */
	  getPublicInstance: function () {
	    var inst = this._instance;
	    if (this._compositeType === CompositeTypes.StatelessFunctional) {
	      return null;
	    }
	    return inst;
	  },
	
	  // Stub
	  _instantiateReactComponent: null
	
	};
	
	module.exports = ReactCompositeComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(14);
	
	var invariant = __webpack_require__(23);
	
	var injected = false;
	
	var ReactComponentEnvironment = {
	
	  /**
	   * Optionally injectable hook for swapping out mount images in the middle of
	   * the tree.
	   */
	  replaceNodeWithMarkup: null,
	
	  /**
	   * Optionally injectable hook for processing a queue of child updates. Will
	   * later move into MultiChildComponents.
	   */
	  processChildrenUpdates: null,
	
	  injection: {
	    injectEnvironment: function (environment) {
	      !!injected ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : _prodInvariant('104') : void 0;
	      ReactComponentEnvironment.replaceNodeWithMarkup = environment.replaceNodeWithMarkup;
	      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
	      injected = true;
	    }
	  }
	
	};
	
	module.exports = ReactComponentEnvironment;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(14);
	
	var React = __webpack_require__(24);
	
	var invariant = __webpack_require__(23);
	
	var ReactNodeTypes = {
	  HOST: 0,
	  COMPOSITE: 1,
	  EMPTY: 2,
	
	  getType: function (node) {
	    if (node === null || node === false) {
	      return ReactNodeTypes.EMPTY;
	    } else if (React.isValidElement(node)) {
	      if (typeof node.type === 'function') {
	        return ReactNodeTypes.COMPOSITE;
	      } else {
	        return ReactNodeTypes.HOST;
	      }
	    }
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unexpected node: %s', node) : _prodInvariant('26', node) : void 0;
	  }
	};
	
	module.exports = ReactNodeTypes;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(14);
	
	var ReactPropTypeLocationNames = __webpack_require__(91);
	var ReactPropTypesSecret = __webpack_require__(92);
	
	var invariant = __webpack_require__(23);
	var warning = __webpack_require__(31);
	
	var ReactComponentTreeHook;
	
	if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(46);
	}
	
	var loggedTypeFailures = {};
	
	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?object} element The React element that is being type-checked
	 * @param {?number} debugID The React component instance that is being type-checked
	 * @private
	 */
	function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
	  for (var typeSpecName in typeSpecs) {
	    if (typeSpecs.hasOwnProperty(typeSpecName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
	        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
	      } catch (ex) {
	        error = ex;
	      }
	      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;
	
	        var componentStackInfo = '';
	
	        if (process.env.NODE_ENV !== 'production') {
	          if (!ReactComponentTreeHook) {
	            ReactComponentTreeHook = __webpack_require__(46);
	          }
	          if (debugID !== null) {
	            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
	          } else if (element !== null) {
	            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
	          }
	        }
	
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
	      }
	    }
	  }
	}
	
	module.exports = checkReactTypeSpec;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var ReactPropTypeLocationNames = {};
	
	if (process.env.NODE_ENV !== 'production') {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}
	
	module.exports = ReactPropTypeLocationNames;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 92 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
	
	module.exports = ReactPropTypesSecret;

/***/ },
/* 93 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 * 
	 */
	
	/*eslint-disable no-self-compare */
	
	'use strict';
	
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	
	/**
	 * inlined Object.is polyfill to avoid requiring consumers ship their own
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	 */
	function is(x, y) {
	  // SameValue algorithm
	  if (x === y) {
	    // Steps 1-5, 7-10
	    // Steps 6.b-6.e: +0 != -0
	    // Added the nonzero y check to make Flow happy, but it is redundant
	    return x !== 0 || y !== 0 || 1 / x === 1 / y;
	  } else {
	    // Step 6.a: NaN == NaN
	    return x !== x && y !== y;
	  }
	}
	
	/**
	 * Performs equality by iterating through keys on an object and returning false
	 * when any key has values which are not strictly equal between the arguments.
	 * Returns true when the values of all keys are strictly equal.
	 */
	function shallowEqual(objA, objB) {
	  if (is(objA, objB)) {
	    return true;
	  }
	
	  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
	    return false;
	  }
	
	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);
	
	  if (keysA.length !== keysB.length) {
	    return false;
	  }
	
	  // Test for A's keys different from B.
	  for (var i = 0; i < keysA.length; i++) {
	    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
	      return false;
	    }
	  }
	
	  return true;
	}
	
	module.exports = shallowEqual;

/***/ },
/* 94 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * Given a `prevElement` and `nextElement`, determines if the existing
	 * instance should be updated as opposed to being destroyed or replaced by a new
	 * instance. Both arguments are elements. This ensures that this logic can
	 * operate on stateless trees without any backing instance.
	 *
	 * @param {?object} prevElement
	 * @param {?object} nextElement
	 * @return {boolean} True if the existing instance should be updated.
	 * @protected
	 */
	
	function shouldUpdateReactComponent(prevElement, nextElement) {
	  var prevEmpty = prevElement === null || prevElement === false;
	  var nextEmpty = nextElement === null || nextElement === false;
	  if (prevEmpty || nextEmpty) {
	    return prevEmpty === nextEmpty;
	  }
	
	  var prevType = typeof prevElement;
	  var nextType = typeof nextElement;
	  if (prevType === 'string' || prevType === 'number') {
	    return nextType === 'string' || nextType === 'number';
	  } else {
	    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
	  }
	}
	
	module.exports = shouldUpdateReactComponent;

/***/ },
/* 95 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var emptyComponentFactory;
	
	var ReactEmptyComponentInjection = {
	  injectEmptyComponentFactory: function (factory) {
	    emptyComponentFactory = factory;
	  }
	};
	
	var ReactEmptyComponent = {
	  create: function (instantiate) {
	    return emptyComponentFactory(instantiate);
	  }
	};
	
	ReactEmptyComponent.injection = ReactEmptyComponentInjection;
	
	module.exports = ReactEmptyComponent;

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(14),
	    _assign = __webpack_require__(25);
	
	var invariant = __webpack_require__(23);
	
	var genericComponentClass = null;
	// This registry keeps track of wrapper classes around host tags.
	var tagToComponentClass = {};
	var textComponentClass = null;
	
	var ReactHostComponentInjection = {
	  // This accepts a class that receives the tag string. This is a catch all
	  // that can render any kind of tag.
	  injectGenericComponentClass: function (componentClass) {
	    genericComponentClass = componentClass;
	  },
	  // This accepts a text component class that takes the text string to be
	  // rendered as props.
	  injectTextComponentClass: function (componentClass) {
	    textComponentClass = componentClass;
	  },
	  // This accepts a keyed object with classes as values. Each key represents a
	  // tag. That particular tag will use this class instead of the generic one.
	  injectComponentClasses: function (componentClasses) {
	    _assign(tagToComponentClass, componentClasses);
	  }
	};
	
	/**
	 * Get a host internal component class for a specific tag.
	 *
	 * @param {ReactElement} element The element to create.
	 * @return {function} The internal class constructor function.
	 */
	function createInternalComponent(element) {
	  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : _prodInvariant('111', element.type) : void 0;
	  return new genericComponentClass(element);
	}
	
	/**
	 * @param {ReactText} text
	 * @return {ReactComponent}
	 */
	function createInstanceForText(text) {
	  return new textComponentClass(text);
	}
	
	/**
	 * @param {ReactComponent} component
	 * @return {boolean}
	 */
	function isTextComponent(component) {
	  return component instanceof textComponentClass;
	}
	
	var ReactHostComponent = {
	  createInternalComponent: createInternalComponent,
	  createInstanceForText: createInstanceForText,
	  isTextComponent: isTextComponent,
	  injection: ReactHostComponentInjection
	};
	
	module.exports = ReactHostComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 97 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var nextDebugID = 1;
	
	function getNextDebugID() {
	  return nextDebugID++;
	}
	
	module.exports = getNextDebugID;

/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(24);


/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {/* REACT HOT LOADER */ if (true) { (function () { var ReactHotAPI = __webpack_require__(2), RootInstanceProvider = __webpack_require__(10), ReactMount = __webpack_require__(12), React = __webpack_require__(98); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {
	
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.OpenSeadragonControls = undefined;
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _reactOpenseadragonControls = __webpack_require__(100);
	
	Object.defineProperty(exports, 'OpenSeadragonControls', {
	  enumerable: true,
	  get: function get() {
	    return _reactOpenseadragonControls.OpenSeadragonControls;
	  }
	});
	
	var _react = __webpack_require__(98);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactRouterDom = __webpack_require__(104);
	
	__webpack_require__(150);
	
	var _reactOpenseadragonViewer = __webpack_require__(154);
	
	var _reactOpenseadragonViewer2 = _interopRequireDefault(_reactOpenseadragonViewer);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var ReactOpenSeadragonRoute = function (_React$Component) {
	  _inherits(ReactOpenSeadragonRoute, _React$Component);
	
	  function ReactOpenSeadragonRoute(props) {
	    _classCallCheck(this, ReactOpenSeadragonRoute);
	
	    var _this = _possibleConstructorReturn(this, (ReactOpenSeadragonRoute.__proto__ || Object.getPrototypeOf(ReactOpenSeadragonRoute)).call(this, props));
	
	    _this.state = { viewer: {}, id: 0 };
	    _this._app = _this._app.bind(_this);
	    _this.viewer = _this.viewer.bind(_this);
	    return _this;
	  }
	
	  _createClass(ReactOpenSeadragonRoute, [{
	    key: '_app',
	    value: function _app() {
	      var osprops = this.props;
	      return function () {
	        return _react2.default.createElement(
	          'div',
	          null,
	          _react2.default.createElement(_reactRouterDom.Route, {
	            render: function render(props) {
	              return _react2.default.createElement(_reactOpenseadragonViewer2.default, _extends({}, osprops, props));
	            }
	          })
	        );
	      };
	    }
	  }, {
	    key: 'viewer',
	    value: function viewer() {
	      var App = this._app();
	      return _react2.default.createElement(
	        'div',
	        null,
	        _react2.default.createElement(_reactRouterDom.Route, { path: '/image/:id', component: App })
	      );
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2.default.createElement(
	        'div',
	        null,
	        this.viewer()
	      );
	    }
	  }]);
	
	  return ReactOpenSeadragonRoute;
	}(_react2.default.Component);
	
	ReactOpenSeadragonRoute.propTypes = {
	  config: _react2.default.PropTypes.object.isRequired
	};
	
	exports.default = ReactOpenSeadragonRoute;
	
	/* REACT HOT LOADER */ }).call(this); } finally { if (true) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = __webpack_require__(101); if (makeExportsHot(module, __webpack_require__(98))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "react-openseadragon-route.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)(module)))

/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {/* REACT HOT LOADER */ if (true) { (function () { var ReactHotAPI = __webpack_require__(2), RootInstanceProvider = __webpack_require__(10), ReactMount = __webpack_require__(12), React = __webpack_require__(98); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {
	
	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(98);
	
	var _react2 = _interopRequireDefault(_react);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var OpenSeadragonControls = function OpenSeadragonControls(props) {
	  return _react2.default.createElement(
	    "ul",
	    { className: "osd-toolbar" },
	    _react2.default.createElement(
	      "li",
	      null,
	      _react2.default.createElement(
	        "a",
	        { id: "zoom-in" },
	        _react2.default.createElement("i", { className: "glyphicon glyphicon-zoom-in" })
	      )
	    ),
	    _react2.default.createElement(
	      "li",
	      null,
	      _react2.default.createElement(
	        "a",
	        { id: "zoom-out" },
	        _react2.default.createElement("i", { className: "glyphicon glyphicon-zoom-out" })
	      )
	    ),
	    _react2.default.createElement(
	      "li",
	      null,
	      _react2.default.createElement(
	        "a",
	        { id: "reset" },
	        _react2.default.createElement("i", { className: "glyphicon glyphicon-home" })
	      )
	    ),
	    _react2.default.createElement(
	      "li",
	      null,
	      _react2.default.createElement(
	        "a",
	        { id: "full-page" },
	        _react2.default.createElement("i", { className: "glyphicon glyphicon-resize-full" })
	      )
	    ),
	    _react2.default.createElement(
	      "li",
	      null,
	      _react2.default.createElement(
	        "a",
	        { id: "previous" },
	        _react2.default.createElement("i", { className: "glyphicon glyphicon-arrow-left" })
	      )
	    ),
	    _react2.default.createElement(
	      "li",
	      null,
	      _react2.default.createElement(
	        "a",
	        { id: "next" },
	        _react2.default.createElement("i", { className: "glyphicon glyphicon-arrow-right" })
	      )
	    )
	  );
	};
	
	exports.default = OpenSeadragonControls;
	
	/* REACT HOT LOADER */ }).call(this); } finally { if (true) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = __webpack_require__(101); if (makeExportsHot(module, __webpack_require__(98))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "react-openseadragon-controls.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)(module)))

/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var isReactClassish = __webpack_require__(102),
	    isReactElementish = __webpack_require__(103);
	
	function makeExportsHot(m, React) {
	  if (isReactElementish(m.exports, React)) {
	    // React elements are never valid React classes
	    return false;
	  }
	
	  var freshExports = m.exports,
	      exportsReactClass = isReactClassish(m.exports, React),
	      foundReactClasses = false;
	
	  if (exportsReactClass) {
	    m.exports = m.makeHot(m.exports, '__MODULE_EXPORTS');
	    foundReactClasses = true;
	  }
	
	  for (var key in m.exports) {
	    if (!Object.prototype.hasOwnProperty.call(freshExports, key)) {
	      continue;
	    }
	
	    if (exportsReactClass && key === 'type') {
	      // React 0.12 also puts classes under `type` property for compat.
	      // Skip to avoid updating twice.
	      continue;
	    }
	
	    var value;
	    try {
	      value = freshExports[key];
	    } catch (err) {
	      continue;
	    }
	
	    if (!isReactClassish(value, React)) {
	      continue;
	    }
	
	    if (Object.getOwnPropertyDescriptor(m.exports, key).writable) {
	      m.exports[key] = m.makeHot(value, '__MODULE_EXPORTS_' + key);
	      foundReactClasses = true;
	    } else {
	      console.warn("Can't make class " + key + " hot reloadable due to being read-only. To fix this you can try two solutions. First, you can exclude files or directories (for example, /node_modules/) using 'exclude' option in loader configuration. Second, if you are using Babel, you can enable loose mode for `es6.modules` using the 'loose' option. See: http://babeljs.io/docs/plugins/transform-es2015-modules-commonjs/#options-loose and http://babeljs.io/docs/usage/options/");
	    }
	  }
	
	  return foundReactClasses;
	}
	
	module.exports = makeExportsHot;


/***/ },
/* 102 */
/***/ function(module, exports) {

	function hasRender(Class) {
	  var prototype = Class.prototype;
	  if (!prototype) {
	    return false;
	  }
	
	  return typeof prototype.render === 'function';
	}
	
	function descendsFromReactComponent(Class, React) {
	  if (!React.Component) {
	    return false;
	  }
	
	  var Base = Object.getPrototypeOf(Class);
	  while (Base) {
	    if (Base === React.Component) {
	      return true;
	    }
	
	    Base = Object.getPrototypeOf(Base);
	  }
	
	  return false;
	}
	
	function isReactClassish(Class, React) {
	  if (typeof Class !== 'function') {
	    return false;
	  }
	
	  // React 0.13
	  if (hasRender(Class) || descendsFromReactComponent(Class, React)) {
	    return true;
	  }
	
	  // React 0.12 and earlier
	  if (Class.type && hasRender(Class.type)) {
	    return true;
	  }
	
	  return false;
	}
	
	module.exports = isReactClassish;

/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	var isReactClassish = __webpack_require__(102);
	
	function isReactElementish(obj, React) {
	  if (!obj) {
	    return false;
	  }
	
	  return Object.prototype.toString.call(obj.props) === '[object Object]' &&
	         isReactClassish(obj.type, React);
	}
	
	module.exports = isReactElementish;

/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.withRouter = exports.matchPath = exports.Switch = exports.StaticRouter = exports.Router = exports.Route = exports.Redirect = exports.Prompt = exports.NavLink = exports.MemoryRouter = exports.Link = exports.HashRouter = exports.BrowserRouter = undefined;
	
	var _BrowserRouter2 = __webpack_require__(105);
	
	var _BrowserRouter3 = _interopRequireDefault(_BrowserRouter2);
	
	var _HashRouter2 = __webpack_require__(137);
	
	var _HashRouter3 = _interopRequireDefault(_HashRouter2);
	
	var _Link2 = __webpack_require__(139);
	
	var _Link3 = _interopRequireDefault(_Link2);
	
	var _MemoryRouter2 = __webpack_require__(140);
	
	var _MemoryRouter3 = _interopRequireDefault(_MemoryRouter2);
	
	var _NavLink2 = __webpack_require__(141);
	
	var _NavLink3 = _interopRequireDefault(_NavLink2);
	
	var _Prompt2 = __webpack_require__(142);
	
	var _Prompt3 = _interopRequireDefault(_Prompt2);
	
	var _Redirect2 = __webpack_require__(143);
	
	var _Redirect3 = _interopRequireDefault(_Redirect2);
	
	var _Route2 = __webpack_require__(144);
	
	var _Route3 = _interopRequireDefault(_Route2);
	
	var _Router2 = __webpack_require__(145);
	
	var _Router3 = _interopRequireDefault(_Router2);
	
	var _StaticRouter2 = __webpack_require__(146);
	
	var _StaticRouter3 = _interopRequireDefault(_StaticRouter2);
	
	var _Switch2 = __webpack_require__(147);
	
	var _Switch3 = _interopRequireDefault(_Switch2);
	
	var _matchPath2 = __webpack_require__(148);
	
	var _matchPath3 = _interopRequireDefault(_matchPath2);
	
	var _withRouter2 = __webpack_require__(149);
	
	var _withRouter3 = _interopRequireDefault(_withRouter2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.BrowserRouter = _BrowserRouter3.default;
	exports.HashRouter = _HashRouter3.default;
	exports.Link = _Link3.default;
	exports.MemoryRouter = _MemoryRouter3.default;
	exports.NavLink = _NavLink3.default;
	exports.Prompt = _Prompt3.default;
	exports.Redirect = _Redirect3.default;
	exports.Route = _Route3.default;
	exports.Router = _Router3.default;
	exports.StaticRouter = _StaticRouter3.default;
	exports.Switch = _Switch3.default;
	exports.matchPath = _matchPath3.default;
	exports.withRouter = _withRouter3.default;

/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _react = __webpack_require__(98);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(106);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _createBrowserHistory = __webpack_require__(114);
	
	var _createBrowserHistory2 = _interopRequireDefault(_createBrowserHistory);
	
	var _reactRouter = __webpack_require__(123);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * The public API for a <Router> that uses HTML5 history.
	 */
	var BrowserRouter = function (_React$Component) {
	  _inherits(BrowserRouter, _React$Component);
	
	  function BrowserRouter() {
	    var _temp, _this, _ret;
	
	    _classCallCheck(this, BrowserRouter);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.history = (0, _createBrowserHistory2.default)(_this.props), _temp), _possibleConstructorReturn(_this, _ret);
	  }
	
	  BrowserRouter.prototype.render = function render() {
	    return _react2.default.createElement(_reactRouter.Router, { history: this.history, children: this.props.children });
	  };
	
	  return BrowserRouter;
	}(_react2.default.Component);
	
	BrowserRouter.propTypes = {
	  basename: _propTypes2.default.string,
	  forceRefresh: _propTypes2.default.bool,
	  getUserConfirmation: _propTypes2.default.func,
	  keyLength: _propTypes2.default.number,
	  children: _propTypes2.default.node
	};
	exports.default = BrowserRouter;

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */
	
	if (process.env.NODE_ENV !== 'production') {
	  var REACT_ELEMENT_TYPE = (typeof Symbol === 'function' &&
	    Symbol.for &&
	    Symbol.for('react.element')) ||
	    0xeac7;
	
	  var isValidElement = function(object) {
	    return typeof object === 'object' &&
	      object !== null &&
	      object.$$typeof === REACT_ELEMENT_TYPE;
	  };
	
	  // By explicitly using `prop-types` you are opting into new development behavior.
	  // http://fb.me/prop-types-in-prod
	  var throwOnDirectAccess = true;
	  module.exports = __webpack_require__(107)(isValidElement, throwOnDirectAccess);
	} else {
	  // By explicitly using `prop-types` you are opting into new production behavior.
	  // http://fb.me/prop-types-in-prod
	  module.exports = __webpack_require__(113)();
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */
	
	'use strict';
	
	var emptyFunction = __webpack_require__(108);
	var invariant = __webpack_require__(109);
	var warning = __webpack_require__(110);
	
	var ReactPropTypesSecret = __webpack_require__(111);
	var checkPropTypes = __webpack_require__(112);
	
	module.exports = function(isValidElement, throwOnDirectAccess) {
	  /* global Symbol */
	  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.
	
	  /**
	   * Returns the iterator method function contained on the iterable object.
	   *
	   * Be sure to invoke the function with the iterable as context:
	   *
	   *     var iteratorFn = getIteratorFn(myIterable);
	   *     if (iteratorFn) {
	   *       var iterator = iteratorFn.call(myIterable);
	   *       ...
	   *     }
	   *
	   * @param {?object} maybeIterable
	   * @return {?function}
	   */
	  function getIteratorFn(maybeIterable) {
	    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	    if (typeof iteratorFn === 'function') {
	      return iteratorFn;
	    }
	  }
	
	  /**
	   * Collection of methods that allow declaration and validation of props that are
	   * supplied to React components. Example usage:
	   *
	   *   var Props = require('ReactPropTypes');
	   *   var MyArticle = React.createClass({
	   *     propTypes: {
	   *       // An optional string prop named "description".
	   *       description: Props.string,
	   *
	   *       // A required enum prop named "category".
	   *       category: Props.oneOf(['News','Photos']).isRequired,
	   *
	   *       // A prop named "dialog" that requires an instance of Dialog.
	   *       dialog: Props.instanceOf(Dialog).isRequired
	   *     },
	   *     render: function() { ... }
	   *   });
	   *
	   * A more formal specification of how these methods are used:
	   *
	   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	   *   decl := ReactPropTypes.{type}(.isRequired)?
	   *
	   * Each and every declaration produces a function with the same signature. This
	   * allows the creation of custom validation functions. For example:
	   *
	   *  var MyLink = React.createClass({
	   *    propTypes: {
	   *      // An optional string or URI prop named "href".
	   *      href: function(props, propName, componentName) {
	   *        var propValue = props[propName];
	   *        if (propValue != null && typeof propValue !== 'string' &&
	   *            !(propValue instanceof URI)) {
	   *          return new Error(
	   *            'Expected a string or an URI for ' + propName + ' in ' +
	   *            componentName
	   *          );
	   *        }
	   *      }
	   *    },
	   *    render: function() {...}
	   *  });
	   *
	   * @internal
	   */
	
	  var ANONYMOUS = '<<anonymous>>';
	
	  // Important!
	  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
	  var ReactPropTypes = {
	    array: createPrimitiveTypeChecker('array'),
	    bool: createPrimitiveTypeChecker('boolean'),
	    func: createPrimitiveTypeChecker('function'),
	    number: createPrimitiveTypeChecker('number'),
	    object: createPrimitiveTypeChecker('object'),
	    string: createPrimitiveTypeChecker('string'),
	    symbol: createPrimitiveTypeChecker('symbol'),
	
	    any: createAnyTypeChecker(),
	    arrayOf: createArrayOfTypeChecker,
	    element: createElementTypeChecker(),
	    instanceOf: createInstanceTypeChecker,
	    node: createNodeChecker(),
	    objectOf: createObjectOfTypeChecker,
	    oneOf: createEnumTypeChecker,
	    oneOfType: createUnionTypeChecker,
	    shape: createShapeTypeChecker
	  };
	
	  /**
	   * inlined Object.is polyfill to avoid requiring consumers ship their own
	   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	   */
	  /*eslint-disable no-self-compare*/
	  function is(x, y) {
	    // SameValue algorithm
	    if (x === y) {
	      // Steps 1-5, 7-10
	      // Steps 6.b-6.e: +0 != -0
	      return x !== 0 || 1 / x === 1 / y;
	    } else {
	      // Step 6.a: NaN == NaN
	      return x !== x && y !== y;
	    }
	  }
	  /*eslint-enable no-self-compare*/
	
	  /**
	   * We use an Error-like object for backward compatibility as people may call
	   * PropTypes directly and inspect their output. However, we don't use real
	   * Errors anymore. We don't inspect their stack anyway, and creating them
	   * is prohibitively expensive if they are created too often, such as what
	   * happens in oneOfType() for any type before the one that matched.
	   */
	  function PropTypeError(message) {
	    this.message = message;
	    this.stack = '';
	  }
	  // Make `instanceof Error` still work for returned errors.
	  PropTypeError.prototype = Error.prototype;
	
	  function createChainableTypeChecker(validate) {
	    if (process.env.NODE_ENV !== 'production') {
	      var manualPropTypeCallCache = {};
	      var manualPropTypeWarningCount = 0;
	    }
	    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
	      componentName = componentName || ANONYMOUS;
	      propFullName = propFullName || propName;
	
	      if (secret !== ReactPropTypesSecret) {
	        if (throwOnDirectAccess) {
	          // New behavior only for users of `prop-types` package
	          invariant(
	            false,
	            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
	            'Use `PropTypes.checkPropTypes()` to call them. ' +
	            'Read more at http://fb.me/use-check-prop-types'
	          );
	        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
	          // Old behavior for people using React.PropTypes
	          var cacheKey = componentName + ':' + propName;
	          if (
	            !manualPropTypeCallCache[cacheKey] &&
	            // Avoid spamming the console because they are often not actionable except for lib authors
	            manualPropTypeWarningCount < 3
	          ) {
	            warning(
	              false,
	              'You are manually calling a React.PropTypes validation ' +
	              'function for the `%s` prop on `%s`. This is deprecated ' +
	              'and will throw in the standalone `prop-types` package. ' +
	              'You may be seeing this warning due to a third-party PropTypes ' +
	              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.',
	              propFullName,
	              componentName
	            );
	            manualPropTypeCallCache[cacheKey] = true;
	            manualPropTypeWarningCount++;
	          }
	        }
	      }
	      if (props[propName] == null) {
	        if (isRequired) {
	          if (props[propName] === null) {
	            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
	          }
	          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
	        }
	        return null;
	      } else {
	        return validate(props, propName, componentName, location, propFullName);
	      }
	    }
	
	    var chainedCheckType = checkType.bind(null, false);
	    chainedCheckType.isRequired = checkType.bind(null, true);
	
	    return chainedCheckType;
	  }
	
	  function createPrimitiveTypeChecker(expectedType) {
	    function validate(props, propName, componentName, location, propFullName, secret) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== expectedType) {
	        // `propValue` being instance of, say, date/regexp, pass the 'object'
	        // check, but we can offer a more precise error message here rather than
	        // 'of type `object`'.
	        var preciseType = getPreciseType(propValue);
	
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	
	  function createAnyTypeChecker() {
	    return createChainableTypeChecker(emptyFunction.thatReturnsNull);
	  }
	
	  function createArrayOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
	      }
	      var propValue = props[propName];
	      if (!Array.isArray(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	      }
	      for (var i = 0; i < propValue.length; i++) {
	        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	
	  function createElementTypeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      if (!isValidElement(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	
	  function createInstanceTypeChecker(expectedClass) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!(props[propName] instanceof expectedClass)) {
	        var expectedClassName = expectedClass.name || ANONYMOUS;
	        var actualClassName = getClassName(props[propName]);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	
	  function createEnumTypeChecker(expectedValues) {
	    if (!Array.isArray(expectedValues)) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
	      return emptyFunction.thatReturnsNull;
	    }
	
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      for (var i = 0; i < expectedValues.length; i++) {
	        if (is(propValue, expectedValues[i])) {
	          return null;
	        }
	      }
	
	      var valuesString = JSON.stringify(expectedValues);
	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	    }
	    return createChainableTypeChecker(validate);
	  }
	
	  function createObjectOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
	      }
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	      }
	      for (var key in propValue) {
	        if (propValue.hasOwnProperty(key)) {
	          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	          if (error instanceof Error) {
	            return error;
	          }
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	
	  function createUnionTypeChecker(arrayOfTypeCheckers) {
	    if (!Array.isArray(arrayOfTypeCheckers)) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
	      return emptyFunction.thatReturnsNull;
	    }
	
	    function validate(props, propName, componentName, location, propFullName) {
	      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	        var checker = arrayOfTypeCheckers[i];
	        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
	          return null;
	        }
	      }
	
	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
	    }
	    return createChainableTypeChecker(validate);
	  }
	
	  function createNodeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!isNode(props[propName])) {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	
	  function createShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      }
	      for (var key in shapeTypes) {
	        var checker = shapeTypes[key];
	        if (!checker) {
	          continue;
	        }
	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	        if (error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	
	  function isNode(propValue) {
	    switch (typeof propValue) {
	      case 'number':
	      case 'string':
	      case 'undefined':
	        return true;
	      case 'boolean':
	        return !propValue;
	      case 'object':
	        if (Array.isArray(propValue)) {
	          return propValue.every(isNode);
	        }
	        if (propValue === null || isValidElement(propValue)) {
	          return true;
	        }
	
	        var iteratorFn = getIteratorFn(propValue);
	        if (iteratorFn) {
	          var iterator = iteratorFn.call(propValue);
	          var step;
	          if (iteratorFn !== propValue.entries) {
	            while (!(step = iterator.next()).done) {
	              if (!isNode(step.value)) {
	                return false;
	              }
	            }
	          } else {
	            // Iterator will provide entry [k,v] tuples rather than values.
	            while (!(step = iterator.next()).done) {
	              var entry = step.value;
	              if (entry) {
	                if (!isNode(entry[1])) {
	                  return false;
	                }
	              }
	            }
	          }
	        } else {
	          return false;
	        }
	
	        return true;
	      default:
	        return false;
	    }
	  }
	
	  function isSymbol(propType, propValue) {
	    // Native Symbol.
	    if (propType === 'symbol') {
	      return true;
	    }
	
	    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
	    if (propValue['@@toStringTag'] === 'Symbol') {
	      return true;
	    }
	
	    // Fallback for non-spec compliant Symbols which are polyfilled.
	    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
	      return true;
	    }
	
	    return false;
	  }
	
	  // Equivalent of `typeof` but with special handling for array and regexp.
	  function getPropType(propValue) {
	    var propType = typeof propValue;
	    if (Array.isArray(propValue)) {
	      return 'array';
	    }
	    if (propValue instanceof RegExp) {
	      // Old webkits (at least until Android 4.0) return 'function' rather than
	      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	      // passes PropTypes.object.
	      return 'object';
	    }
	    if (isSymbol(propType, propValue)) {
	      return 'symbol';
	    }
	    return propType;
	  }
	
	  // This handles more types than `getPropType`. Only used for error messages.
	  // See `createPrimitiveTypeChecker`.
	  function getPreciseType(propValue) {
	    var propType = getPropType(propValue);
	    if (propType === 'object') {
	      if (propValue instanceof Date) {
	        return 'date';
	      } else if (propValue instanceof RegExp) {
	        return 'regexp';
	      }
	    }
	    return propType;
	  }
	
	  // Returns class name of the object, if any.
	  function getClassName(propValue) {
	    if (!propValue.constructor || !propValue.constructor.name) {
	      return ANONYMOUS;
	    }
	    return propValue.constructor.name;
	  }
	
	  ReactPropTypes.checkPropTypes = checkPropTypes;
	  ReactPropTypes.PropTypes = ReactPropTypes;
	
	  return ReactPropTypes;
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 108 */
/***/ function(module, exports) {

	"use strict";
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	function makeEmptyFunction(arg) {
	  return function () {
	    return arg;
	  };
	}
	
	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	var emptyFunction = function emptyFunction() {};
	
	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function () {
	  return this;
	};
	emptyFunction.thatReturnsArgument = function (arg) {
	  return arg;
	};
	
	module.exports = emptyFunction;

/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */
	
	var validateFormat = function validateFormat(format) {};
	
	if (process.env.NODE_ENV !== 'production') {
	  validateFormat = function validateFormat(format) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  };
	}
	
	function invariant(condition, format, a, b, c, d, e, f) {
	  validateFormat(format);
	
	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }
	
	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	}
	
	module.exports = invariant;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var emptyFunction = __webpack_require__(108);
	
	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */
	
	var warning = emptyFunction;
	
	if (process.env.NODE_ENV !== 'production') {
	  (function () {
	    var printWarning = function printWarning(format) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }
	
	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // --- Welcome to debugging React ---
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch (x) {}
	    };
	
	    warning = function warning(condition, format) {
	      if (format === undefined) {
	        throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	      }
	
	      if (format.indexOf('Failed Composite propType: ') === 0) {
	        return; // Ignore CompositeComponent proptype check.
	      }
	
	      if (!condition) {
	        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
	          args[_key2 - 2] = arguments[_key2];
	        }
	
	        printWarning.apply(undefined, [format].concat(args));
	      }
	    };
	  })();
	}
	
	module.exports = warning;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 111 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */
	
	'use strict';
	
	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
	
	module.exports = ReactPropTypesSecret;


/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */
	
	'use strict';
	
	if (process.env.NODE_ENV !== 'production') {
	  var invariant = __webpack_require__(109);
	  var warning = __webpack_require__(110);
	  var ReactPropTypesSecret = __webpack_require__(111);
	  var loggedTypeFailures = {};
	}
	
	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?Function} getStack Returns the component stack.
	 * @private
	 */
	function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
	  if (process.env.NODE_ENV !== 'production') {
	    for (var typeSpecName in typeSpecs) {
	      if (typeSpecs.hasOwnProperty(typeSpecName)) {
	        var error;
	        // Prop type validation may throw. In case they do, we don't want to
	        // fail the render phase where it didn't fail before. So we log it.
	        // After these have been cleaned up, we'll let them throw.
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          invariant(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', location, typeSpecName);
	          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
	        } catch (ex) {
	          error = ex;
	        }
	        warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error);
	        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	          // Only monitor this failure once because there tends to be a lot of the
	          // same error.
	          loggedTypeFailures[error.message] = true;
	
	          var stack = getStack ? getStack() : '';
	
	          warning(false, 'Failed %s type: %s%s', location, error.message, stack != null ? stack : '');
	        }
	      }
	    }
	  }
	}
	
	module.exports = checkPropTypes;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */
	
	'use strict';
	
	var emptyFunction = __webpack_require__(108);
	var invariant = __webpack_require__(109);
	
	module.exports = function() {
	  // Important!
	  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
	  function shim() {
	    invariant(
	      false,
	      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
	      'Use PropTypes.checkPropTypes() to call them. ' +
	      'Read more at http://fb.me/use-check-prop-types'
	    );
	  };
	  shim.isRequired = shim;
	  function getShim() {
	    return shim;
	  };
	  var ReactPropTypes = {
	    array: shim,
	    bool: shim,
	    func: shim,
	    number: shim,
	    object: shim,
	    string: shim,
	    symbol: shim,
	
	    any: shim,
	    arrayOf: getShim,
	    element: shim,
	    instanceOf: getShim,
	    node: shim,
	    objectOf: getShim,
	    oneOf: getShim,
	    oneOfType: getShim,
	    shape: getShim
	  };
	
	  ReactPropTypes.checkPropTypes = emptyFunction;
	  ReactPropTypes.PropTypes = ReactPropTypes;
	
	  return ReactPropTypes;
	};


/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _warning = __webpack_require__(115);
	
	var _warning2 = _interopRequireDefault(_warning);
	
	var _invariant = __webpack_require__(116);
	
	var _invariant2 = _interopRequireDefault(_invariant);
	
	var _LocationUtils = __webpack_require__(117);
	
	var _PathUtils = __webpack_require__(120);
	
	var _createTransitionManager = __webpack_require__(121);
	
	var _createTransitionManager2 = _interopRequireDefault(_createTransitionManager);
	
	var _DOMUtils = __webpack_require__(122);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var PopStateEvent = 'popstate';
	var HashChangeEvent = 'hashchange';
	
	var getHistoryState = function getHistoryState() {
	  try {
	    return window.history.state || {};
	  } catch (e) {
	    // IE 11 sometimes throws when accessing window.history.state
	    // See https://github.com/ReactTraining/history/pull/289
	    return {};
	  }
	};
	
	/**
	 * Creates a history object that uses the HTML5 history API including
	 * pushState, replaceState, and the popstate event.
	 */
	var createBrowserHistory = function createBrowserHistory() {
	  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
	  (0, _invariant2.default)(_DOMUtils.canUseDOM, 'Browser history needs a DOM');
	
	  var globalHistory = window.history;
	  var canUseHistory = (0, _DOMUtils.supportsHistory)();
	  var needsHashChangeListener = !(0, _DOMUtils.supportsPopStateOnHashChange)();
	
	  var _props$forceRefresh = props.forceRefresh,
	      forceRefresh = _props$forceRefresh === undefined ? false : _props$forceRefresh,
	      _props$getUserConfirm = props.getUserConfirmation,
	      getUserConfirmation = _props$getUserConfirm === undefined ? _DOMUtils.getConfirmation : _props$getUserConfirm,
	      _props$keyLength = props.keyLength,
	      keyLength = _props$keyLength === undefined ? 6 : _props$keyLength;
	
	  var basename = props.basename ? (0, _PathUtils.stripTrailingSlash)((0, _PathUtils.addLeadingSlash)(props.basename)) : '';
	
	  var getDOMLocation = function getDOMLocation(historyState) {
	    var _ref = historyState || {},
	        key = _ref.key,
	        state = _ref.state;
	
	    var _window$location = window.location,
	        pathname = _window$location.pathname,
	        search = _window$location.search,
	        hash = _window$location.hash;
	
	
	    var path = pathname + search + hash;
	
	    if (basename) path = (0, _PathUtils.stripPrefix)(path, basename);
	
	    return _extends({}, (0, _PathUtils.parsePath)(path), {
	      state: state,
	      key: key
	    });
	  };
	
	  var createKey = function createKey() {
	    return Math.random().toString(36).substr(2, keyLength);
	  };
	
	  var transitionManager = (0, _createTransitionManager2.default)();
	
	  var setState = function setState(nextState) {
	    _extends(history, nextState);
	
	    history.length = globalHistory.length;
	
	    transitionManager.notifyListeners(history.location, history.action);
	  };
	
	  var handlePopState = function handlePopState(event) {
	    // Ignore extraneous popstate events in WebKit.
	    if ((0, _DOMUtils.isExtraneousPopstateEvent)(event)) return;
	
	    handlePop(getDOMLocation(event.state));
	  };
	
	  var handleHashChange = function handleHashChange() {
	    handlePop(getDOMLocation(getHistoryState()));
	  };
	
	  var forceNextPop = false;
	
	  var handlePop = function handlePop(location) {
	    if (forceNextPop) {
	      forceNextPop = false;
	      setState();
	    } else {
	      var action = 'POP';
	
	      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	        if (ok) {
	          setState({ action: action, location: location });
	        } else {
	          revertPop(location);
	        }
	      });
	    }
	  };
	
	  var revertPop = function revertPop(fromLocation) {
	    var toLocation = history.location;
	
	    // TODO: We could probably make this more reliable by
	    // keeping a list of keys we've seen in sessionStorage.
	    // Instead, we just default to 0 for keys we don't know.
	
	    var toIndex = allKeys.indexOf(toLocation.key);
	
	    if (toIndex === -1) toIndex = 0;
	
	    var fromIndex = allKeys.indexOf(fromLocation.key);
	
	    if (fromIndex === -1) fromIndex = 0;
	
	    var delta = toIndex - fromIndex;
	
	    if (delta) {
	      forceNextPop = true;
	      go(delta);
	    }
	  };
	
	  var initialLocation = getDOMLocation(getHistoryState());
	  var allKeys = [initialLocation.key];
	
	  // Public interface
	
	  var createHref = function createHref(location) {
	    return basename + (0, _PathUtils.createPath)(location);
	  };
	
	  var push = function push(path, state) {
	    (0, _warning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored');
	
	    var action = 'PUSH';
	    var location = (0, _LocationUtils.createLocation)(path, state, createKey(), history.location);
	
	    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	      if (!ok) return;
	
	      var href = createHref(location);
	      var key = location.key,
	          state = location.state;
	
	
	      if (canUseHistory) {
	        globalHistory.pushState({ key: key, state: state }, null, href);
	
	        if (forceRefresh) {
	          window.location.href = href;
	        } else {
	          var prevIndex = allKeys.indexOf(history.location.key);
	          var nextKeys = allKeys.slice(0, prevIndex === -1 ? 0 : prevIndex + 1);
	
	          nextKeys.push(location.key);
	          allKeys = nextKeys;
	
	          setState({ action: action, location: location });
	        }
	      } else {
	        (0, _warning2.default)(state === undefined, 'Browser history cannot push state in browsers that do not support HTML5 history');
	
	        window.location.href = href;
	      }
	    });
	  };
	
	  var replace = function replace(path, state) {
	    (0, _warning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored');
	
	    var action = 'REPLACE';
	    var location = (0, _LocationUtils.createLocation)(path, state, createKey(), history.location);
	
	    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	      if (!ok) return;
	
	      var href = createHref(location);
	      var key = location.key,
	          state = location.state;
	
	
	      if (canUseHistory) {
	        globalHistory.replaceState({ key: key, state: state }, null, href);
	
	        if (forceRefresh) {
	          window.location.replace(href);
	        } else {
	          var prevIndex = allKeys.indexOf(history.location.key);
	
	          if (prevIndex !== -1) allKeys[prevIndex] = location.key;
	
	          setState({ action: action, location: location });
	        }
	      } else {
	        (0, _warning2.default)(state === undefined, 'Browser history cannot replace state in browsers that do not support HTML5 history');
	
	        window.location.replace(href);
	      }
	    });
	  };
	
	  var go = function go(n) {
	    globalHistory.go(n);
	  };
	
	  var goBack = function goBack() {
	    return go(-1);
	  };
	
	  var goForward = function goForward() {
	    return go(1);
	  };
	
	  var listenerCount = 0;
	
	  var checkDOMListeners = function checkDOMListeners(delta) {
	    listenerCount += delta;
	
	    if (listenerCount === 1) {
	      (0, _DOMUtils.addEventListener)(window, PopStateEvent, handlePopState);
	
	      if (needsHashChangeListener) (0, _DOMUtils.addEventListener)(window, HashChangeEvent, handleHashChange);
	    } else if (listenerCount === 0) {
	      (0, _DOMUtils.removeEventListener)(window, PopStateEvent, handlePopState);
	
	      if (needsHashChangeListener) (0, _DOMUtils.removeEventListener)(window, HashChangeEvent, handleHashChange);
	    }
	  };
	
	  var isBlocked = false;
	
	  var block = function block() {
	    var prompt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	
	    var unblock = transitionManager.setPrompt(prompt);
	
	    if (!isBlocked) {
	      checkDOMListeners(1);
	      isBlocked = true;
	    }
	
	    return function () {
	      if (isBlocked) {
	        isBlocked = false;
	        checkDOMListeners(-1);
	      }
	
	      return unblock();
	    };
	  };
	
	  var listen = function listen(listener) {
	    var unlisten = transitionManager.appendListener(listener);
	    checkDOMListeners(1);
	
	    return function () {
	      checkDOMListeners(-1);
	      unlisten();
	    };
	  };
	
	  var history = {
	    length: globalHistory.length,
	    action: 'POP',
	    location: initialLocation,
	    createHref: createHref,
	    push: push,
	    replace: replace,
	    go: go,
	    goBack: goBack,
	    goForward: goForward,
	    block: block,
	    listen: listen
	  };
	
	  return history;
	};
	
	exports.default = createBrowserHistory;

/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */
	
	'use strict';
	
	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */
	
	var warning = function() {};
	
	if (process.env.NODE_ENV !== 'production') {
	  warning = function(condition, format, args) {
	    var len = arguments.length;
	    args = new Array(len > 2 ? len - 2 : 0);
	    for (var key = 2; key < len; key++) {
	      args[key - 2] = arguments[key];
	    }
	    if (format === undefined) {
	      throw new Error(
	        '`warning(condition, format, ...args)` requires a warning ' +
	        'message argument'
	      );
	    }
	
	    if (format.length < 10 || (/^[s\W]*$/).test(format)) {
	      throw new Error(
	        'The warning format should be able to uniquely identify this ' +
	        'warning. Please, use a more descriptive format than: ' + format
	      );
	    }
	
	    if (!condition) {
	      var argIndex = 0;
	      var message = 'Warning: ' +
	        format.replace(/%s/g, function() {
	          return args[argIndex++];
	        });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch(x) {}
	    }
	  };
	}
	
	module.exports = warning;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */
	
	'use strict';
	
	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */
	
	var invariant = function(condition, format, a, b, c, d, e, f) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }
	
	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error(
	        'Minified exception occurred; use the non-minified dev environment ' +
	        'for the full error message and additional helpful warnings.'
	      );
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(
	        format.replace(/%s/g, function() { return args[argIndex++]; })
	      );
	      error.name = 'Invariant Violation';
	    }
	
	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	};
	
	module.exports = invariant;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13)))

/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.locationsAreEqual = exports.createLocation = undefined;
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _resolvePathname = __webpack_require__(118);
	
	var _resolvePathname2 = _interopRequireDefault(_resolvePathname);
	
	var _valueEqual = __webpack_require__(119);
	
	var _valueEqual2 = _interopRequireDefault(_valueEqual);
	
	var _PathUtils = __webpack_require__(120);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var createLocation = exports.createLocation = function createLocation(path, state, key, currentLocation) {
	  var location = void 0;
	  if (typeof path === 'string') {
	    // Two-arg form: push(path, state)
	    location = (0, _PathUtils.parsePath)(path);
	    location.state = state;
	  } else {
	    // One-arg form: push(location)
	    location = _extends({}, path);
	
	    if (location.pathname === undefined) location.pathname = '';
	
	    if (location.search) {
	      if (location.search.charAt(0) !== '?') location.search = '?' + location.search;
	    } else {
	      location.search = '';
	    }
	
	    if (location.hash) {
	      if (location.hash.charAt(0) !== '#') location.hash = '#' + location.hash;
	    } else {
	      location.hash = '';
	    }
	
	    if (state !== undefined && location.state === undefined) location.state = state;
	  }
	
	  location.key = key;
	
	  if (currentLocation) {
	    // Resolve incomplete/relative pathname relative to current location.
	    if (!location.pathname) {
	      location.pathname = currentLocation.pathname;
	    } else if (location.pathname.charAt(0) !== '/') {
	      location.pathname = (0, _resolvePathname2.default)(location.pathname, currentLocation.pathname);
	    }
	  }
	
	  return location;
	};
	
	var locationsAreEqual = exports.locationsAreEqual = function locationsAreEqual(a, b) {
	  return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash && a.key === b.key && (0, _valueEqual2.default)(a.state, b.state);
	};

/***/ },
/* 118 */
/***/ function(module, exports) {

	'use strict';
	
	var isAbsolute = function isAbsolute(pathname) {
	  return pathname.charAt(0) === '/';
	};
	
	// About 1.5x faster than the two-arg version of Array#splice()
	var spliceOne = function spliceOne(list, index) {
	  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {
	    list[i] = list[k];
	  }list.pop();
	};
	
	// This implementation is based heavily on node's url.parse
	var resolvePathname = function resolvePathname(to) {
	  var from = arguments.length <= 1 || arguments[1] === undefined ? '' : arguments[1];
	
	  var toParts = to && to.split('/') || [];
	  var fromParts = from && from.split('/') || [];
	
	  var isToAbs = to && isAbsolute(to);
	  var isFromAbs = from && isAbsolute(from);
	  var mustEndAbs = isToAbs || isFromAbs;
	
	  if (to && isAbsolute(to)) {
	    // to is absolute
	    fromParts = toParts;
	  } else if (toParts.length) {
	    // to is relative, drop the filename
	    fromParts.pop();
	    fromParts = fromParts.concat(toParts);
	  }
	
	  if (!fromParts.length) return '/';
	
	  var hasTrailingSlash = void 0;
	  if (fromParts.length) {
	    var last = fromParts[fromParts.length - 1];
	    hasTrailingSlash = last === '.' || last === '..' || last === '';
	  } else {
	    hasTrailingSlash = false;
	  }
	
	  var up = 0;
	  for (var i = fromParts.length; i >= 0; i--) {
	    var part = fromParts[i];
	
	    if (part === '.') {
	      spliceOne(fromParts, i);
	    } else if (part === '..') {
	      spliceOne(fromParts, i);
	      up++;
	    } else if (up) {
	      spliceOne(fromParts, i);
	      up--;
	    }
	  }
	
	  if (!mustEndAbs) for (; up--; up) {
	    fromParts.unshift('..');
	  }if (mustEndAbs && fromParts[0] !== '' && (!fromParts[0] || !isAbsolute(fromParts[0]))) fromParts.unshift('');
	
	  var result = fromParts.join('/');
	
	  if (hasTrailingSlash && result.substr(-1) !== '/') result += '/';
	
	  return result;
	};
	
	module.exports = resolvePathname;

/***/ },
/* 119 */
/***/ function(module, exports) {

	'use strict';
	
	exports.__esModule = true;
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var valueEqual = function valueEqual(a, b) {
	  if (a === b) return true;
	
	  if (a == null || b == null) return false;
	
	  if (Array.isArray(a)) {
	    if (!Array.isArray(b) || a.length !== b.length) return false;
	
	    return a.every(function (item, index) {
	      return valueEqual(item, b[index]);
	    });
	  }
	
	  var aType = typeof a === 'undefined' ? 'undefined' : _typeof(a);
	  var bType = typeof b === 'undefined' ? 'undefined' : _typeof(b);
	
	  if (aType !== bType) return false;
	
	  if (aType === 'object') {
	    var aValue = a.valueOf();
	    var bValue = b.valueOf();
	
	    if (aValue !== a || bValue !== b) return valueEqual(aValue, bValue);
	
	    var aKeys = Object.keys(a);
	    var bKeys = Object.keys(b);
	
	    if (aKeys.length !== bKeys.length) return false;
	
	    return aKeys.every(function (key) {
	      return valueEqual(a[key], b[key]);
	    });
	  }
	
	  return false;
	};
	
	exports.default = valueEqual;

/***/ },
/* 120 */
/***/ function(module, exports) {

	'use strict';
	
	exports.__esModule = true;
	var addLeadingSlash = exports.addLeadingSlash = function addLeadingSlash(path) {
	  return path.charAt(0) === '/' ? path : '/' + path;
	};
	
	var stripLeadingSlash = exports.stripLeadingSlash = function stripLeadingSlash(path) {
	  return path.charAt(0) === '/' ? path.substr(1) : path;
	};
	
	var stripPrefix = exports.stripPrefix = function stripPrefix(path, prefix) {
	  return path.indexOf(prefix) === 0 ? path.substr(prefix.length) : path;
	};
	
	var stripTrailingSlash = exports.stripTrailingSlash = function stripTrailingSlash(path) {
	  return path.charAt(path.length - 1) === '/' ? path.slice(0, -1) : path;
	};
	
	var parsePath = exports.parsePath = function parsePath(path) {
	  var pathname = path || '/';
	  var search = '';
	  var hash = '';
	
	  var hashIndex = pathname.indexOf('#');
	  if (hashIndex !== -1) {
	    hash = pathname.substr(hashIndex);
	    pathname = pathname.substr(0, hashIndex);
	  }
	
	  var searchIndex = pathname.indexOf('?');
	  if (searchIndex !== -1) {
	    search = pathname.substr(searchIndex);
	    pathname = pathname.substr(0, searchIndex);
	  }
	
	  pathname = decodeURI(pathname);
	
	  return {
	    pathname: pathname,
	    search: search === '?' ? '' : search,
	    hash: hash === '#' ? '' : hash
	  };
	};
	
	var createPath = exports.createPath = function createPath(location) {
	  var pathname = location.pathname,
	      search = location.search,
	      hash = location.hash;
	
	
	  var path = encodeURI(pathname || '/');
	
	  if (search && search !== '?') path += search.charAt(0) === '?' ? search : '?' + search;
	
	  if (hash && hash !== '#') path += hash.charAt(0) === '#' ? hash : '#' + hash;
	
	  return path;
	};

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _warning = __webpack_require__(115);
	
	var _warning2 = _interopRequireDefault(_warning);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var createTransitionManager = function createTransitionManager() {
	  var prompt = null;
	
	  var setPrompt = function setPrompt(nextPrompt) {
	    (0, _warning2.default)(prompt == null, 'A history supports only one prompt at a time');
	
	    prompt = nextPrompt;
	
	    return function () {
	      if (prompt === nextPrompt) prompt = null;
	    };
	  };
	
	  var confirmTransitionTo = function confirmTransitionTo(location, action, getUserConfirmation, callback) {
	    // TODO: If another transition starts while we're still confirming
	    // the previous one, we may end up in a weird state. Figure out the
	    // best way to handle this.
	    if (prompt != null) {
	      var result = typeof prompt === 'function' ? prompt(location, action) : prompt;
	
	      if (typeof result === 'string') {
	        if (typeof getUserConfirmation === 'function') {
	          getUserConfirmation(result, callback);
	        } else {
	          (0, _warning2.default)(false, 'A history needs a getUserConfirmation function in order to use a prompt message');
	
	          callback(true);
	        }
	      } else {
	        // Return false from a transition hook to cancel the transition.
	        callback(result !== false);
	      }
	    } else {
	      callback(true);
	    }
	  };
	
	  var listeners = [];
	
	  var appendListener = function appendListener(fn) {
	    var isActive = true;
	
	    var listener = function listener() {
	      if (isActive) fn.apply(undefined, arguments);
	    };
	
	    listeners.push(listener);
	
	    return function () {
	      isActive = false;
	      listeners = listeners.filter(function (item) {
	        return item !== listener;
	      });
	    };
	  };
	
	  var notifyListeners = function notifyListeners() {
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    listeners.forEach(function (listener) {
	      return listener.apply(undefined, args);
	    });
	  };
	
	  return {
	    setPrompt: setPrompt,
	    confirmTransitionTo: confirmTransitionTo,
	    appendListener: appendListener,
	    notifyListeners: notifyListeners
	  };
	};
	
	exports.default = createTransitionManager;

/***/ },
/* 122 */
/***/ function(module, exports) {

	'use strict';
	
	exports.__esModule = true;
	var canUseDOM = exports.canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
	
	var addEventListener = exports.addEventListener = function addEventListener(node, event, listener) {
	  return node.addEventListener ? node.addEventListener(event, listener, false) : node.attachEvent('on' + event, listener);
	};
	
	var removeEventListener = exports.removeEventListener = function removeEventListener(node, event, listener) {
	  return node.removeEventListener ? node.removeEventListener(event, listener, false) : node.detachEvent('on' + event, listener);
	};
	
	var getConfirmation = exports.getConfirmation = function getConfirmation(message, callback) {
	  return callback(window.confirm(message));
	}; // eslint-disable-line no-alert
	
	/**
	 * Returns true if the HTML5 history API is supported. Taken from Modernizr.
	 *
	 * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
	 * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
	 * changed to avoid false negatives for Windows Phones: https://github.com/reactjs/react-router/issues/586
	 */
	var supportsHistory = exports.supportsHistory = function supportsHistory() {
	  var ua = window.navigator.userAgent;
	
	  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) return false;
	
	  return window.history && 'pushState' in window.history;
	};
	
	/**
	 * Returns true if browser fires popstate on hash change.
	 * IE10 and IE11 do not.
	 */
	var supportsPopStateOnHashChange = exports.supportsPopStateOnHashChange = function supportsPopStateOnHashChange() {
	  return window.navigator.userAgent.indexOf('Trident') === -1;
	};
	
	/**
	 * Returns false if using go(n) with hash history causes a full page reload.
	 */
	var supportsGoWithoutReloadUsingHash = exports.supportsGoWithoutReloadUsingHash = function supportsGoWithoutReloadUsingHash() {
	  return window.navigator.userAgent.indexOf('Firefox') === -1;
	};
	
	/**
	 * Returns true if a given popstate event is an extraneous WebKit event.
	 * Accounts for the fact that Chrome on iOS fires real popstate events
	 * containing undefined state when pressing the back button.
	 */
	var isExtraneousPopstateEvent = exports.isExtraneousPopstateEvent = function isExtraneousPopstateEvent(event) {
	  return event.state === undefined && navigator.userAgent.indexOf('CriOS') === -1;
	};

/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.withRouter = exports.matchPath = exports.Switch = exports.StaticRouter = exports.Router = exports.Route = exports.Redirect = exports.Prompt = exports.MemoryRouter = undefined;
	
	var _MemoryRouter2 = __webpack_require__(124);
	
	var _MemoryRouter3 = _interopRequireDefault(_MemoryRouter2);
	
	var _Prompt2 = __webpack_require__(127);
	
	var _Prompt3 = _interopRequireDefault(_Prompt2);
	
	var _Redirect2 = __webpack_require__(128);
	
	var _Redirect3 = _interopRequireDefault(_Redirect2);
	
	var _Route2 = __webpack_require__(129);
	
	var _Route3 = _interopRequireDefault(_Route2);
	
	var _Router2 = __webpack_require__(126);
	
	var _Router3 = _interopRequireDefault(_Router2);
	
	var _StaticRouter2 = __webpack_require__(133);
	
	var _StaticRouter3 = _interopRequireDefault(_StaticRouter2);
	
	var _Switch2 = __webpack_require__(134);
	
	var _Switch3 = _interopRequireDefault(_Switch2);
	
	var _matchPath2 = __webpack_require__(130);
	
	var _matchPath3 = _interopRequireDefault(_matchPath2);
	
	var _withRouter2 = __webpack_require__(135);
	
	var _withRouter3 = _interopRequireDefault(_withRouter2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.MemoryRouter = _MemoryRouter3.default;
	exports.Prompt = _Prompt3.default;
	exports.Redirect = _Redirect3.default;
	exports.Route = _Route3.default;
	exports.Router = _Router3.default;
	exports.StaticRouter = _StaticRouter3.default;
	exports.Switch = _Switch3.default;
	exports.matchPath = _matchPath3.default;
	exports.withRouter = _withRouter3.default;

/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _react = __webpack_require__(98);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(106);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _createMemoryHistory = __webpack_require__(125);
	
	var _createMemoryHistory2 = _interopRequireDefault(_createMemoryHistory);
	
	var _Router = __webpack_require__(126);
	
	var _Router2 = _interopRequireDefault(_Router);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * The public API for a <Router> that stores location in memory.
	 */
	var MemoryRouter = function (_React$Component) {
	  _inherits(MemoryRouter, _React$Component);
	
	  function MemoryRouter() {
	    var _temp, _this, _ret;
	
	    _classCallCheck(this, MemoryRouter);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.history = (0, _createMemoryHistory2.default)(_this.props), _temp), _possibleConstructorReturn(_this, _ret);
	  }
	
	  MemoryRouter.prototype.render = function render() {
	    return _react2.default.createElement(_Router2.default, { history: this.history, children: this.props.children });
	  };
	
	  return MemoryRouter;
	}(_react2.default.Component);
	
	MemoryRouter.propTypes = {
	  initialEntries: _propTypes2.default.array,
	  initialIndex: _propTypes2.default.number,
	  getUserConfirmation: _propTypes2.default.func,
	  keyLength: _propTypes2.default.number,
	  children: _propTypes2.default.node
	};
	exports.default = MemoryRouter;

/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _warning = __webpack_require__(115);
	
	var _warning2 = _interopRequireDefault(_warning);
	
	var _PathUtils = __webpack_require__(120);
	
	var _LocationUtils = __webpack_require__(117);
	
	var _createTransitionManager = __webpack_require__(121);
	
	var _createTransitionManager2 = _interopRequireDefault(_createTransitionManager);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var clamp = function clamp(n, lowerBound, upperBound) {
	  return Math.min(Math.max(n, lowerBound), upperBound);
	};
	
	/**
	 * Creates a history object that stores locations in memory.
	 */
	var createMemoryHistory = function createMemoryHistory() {
	  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	  var getUserConfirmation = props.getUserConfirmation,
	      _props$initialEntries = props.initialEntries,
	      initialEntries = _props$initialEntries === undefined ? ['/'] : _props$initialEntries,
	      _props$initialIndex = props.initialIndex,
	      initialIndex = _props$initialIndex === undefined ? 0 : _props$initialIndex,
	      _props$keyLength = props.keyLength,
	      keyLength = _props$keyLength === undefined ? 6 : _props$keyLength;
	
	
	  var transitionManager = (0, _createTransitionManager2.default)();
	
	  var setState = function setState(nextState) {
	    _extends(history, nextState);
	
	    history.length = history.entries.length;
	
	    transitionManager.notifyListeners(history.location, history.action);
	  };
	
	  var createKey = function createKey() {
	    return Math.random().toString(36).substr(2, keyLength);
	  };
	
	  var index = clamp(initialIndex, 0, initialEntries.length - 1);
	  var entries = initialEntries.map(function (entry) {
	    return typeof entry === 'string' ? (0, _LocationUtils.createLocation)(entry, undefined, createKey()) : (0, _LocationUtils.createLocation)(entry, undefined, entry.key || createKey());
	  });
	
	  // Public interface
	
	  var createHref = _PathUtils.createPath;
	
	  var push = function push(path, state) {
	    (0, _warning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored');
	
	    var action = 'PUSH';
	    var location = (0, _LocationUtils.createLocation)(path, state, createKey(), history.location);
	
	    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	      if (!ok) return;
	
	      var prevIndex = history.index;
	      var nextIndex = prevIndex + 1;
	
	      var nextEntries = history.entries.slice(0);
	      if (nextEntries.length > nextIndex) {
	        nextEntries.splice(nextIndex, nextEntries.length - nextIndex, location);
	      } else {
	        nextEntries.push(location);
	      }
	
	      setState({
	        action: action,
	        location: location,
	        index: nextIndex,
	        entries: nextEntries
	      });
	    });
	  };
	
	  var replace = function replace(path, state) {
	    (0, _warning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored');
	
	    var action = 'REPLACE';
	    var location = (0, _LocationUtils.createLocation)(path, state, createKey(), history.location);
	
	    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	      if (!ok) return;
	
	      history.entries[history.index] = location;
	
	      setState({ action: action, location: location });
	    });
	  };
	
	  var go = function go(n) {
	    var nextIndex = clamp(history.index + n, 0, history.entries.length - 1);
	
	    var action = 'POP';
	    var location = history.entries[nextIndex];
	
	    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	      if (ok) {
	        setState({
	          action: action,
	          location: location,
	          index: nextIndex
	        });
	      } else {
	        // Mimic the behavior of DOM histories by
	        // causing a render after a cancelled POP.
	        setState();
	      }
	    });
	  };
	
	  var goBack = function goBack() {
	    return go(-1);
	  };
	
	  var goForward = function goForward() {
	    return go(1);
	  };
	
	  var canGo = function canGo(n) {
	    var nextIndex = history.index + n;
	    return nextIndex >= 0 && nextIndex < history.entries.length;
	  };
	
	  var block = function block() {
	    var prompt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	    return transitionManager.setPrompt(prompt);
	  };
	
	  var listen = function listen(listener) {
	    return transitionManager.appendListener(listener);
	  };
	
	  var history = {
	    length: entries.length,
	    action: 'POP',
	    location: entries[index],
	    index: index,
	    entries: entries,
	    createHref: createHref,
	    push: push,
	    replace: replace,
	    go: go,
	    goBack: goBack,
	    goForward: goForward,
	    canGo: canGo,
	    block: block,
	    listen: listen
	  };
	
	  return history;
	};
	
	exports.default = createMemoryHistory;

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _warning = __webpack_require__(115);
	
	var _warning2 = _interopRequireDefault(_warning);
	
	var _invariant = __webpack_require__(116);
	
	var _invariant2 = _interopRequireDefault(_invariant);
	
	var _react = __webpack_require__(98);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(106);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * The public API for putting history on context.
	 */
	var Router = function (_React$Component) {
	  _inherits(Router, _React$Component);
	
	  function Router() {
	    var _temp, _this, _ret;
	
	    _classCallCheck(this, Router);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {
	      match: _this.computeMatch(_this.props.history.location.pathname)
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }
	
	  Router.prototype.getChildContext = function getChildContext() {
	    return {
	      router: _extends({}, this.context.router, {
	        history: this.props.history,
	        route: {
	          location: this.props.history.location,
	          match: this.state.match
	        }
	      })
	    };
	  };
	
	  Router.prototype.computeMatch = function computeMatch(pathname) {
	    return {
	      path: '/',
	      url: '/',
	      params: {},
	      isExact: pathname === '/'
	    };
	  };
	
	  Router.prototype.componentWillMount = function componentWillMount() {
	    var _this2 = this;
	
	    var _props = this.props,
	        children = _props.children,
	        history = _props.history;
	
	
	    (0, _invariant2.default)(children == null || _react2.default.Children.count(children) === 1, 'A <Router> may have only one child element');
	
	    // Do this here so we can setState when a <Redirect> changes the
	    // location in componentWillMount. This happens e.g. when doing
	    // server rendering using a <StaticRouter>.
	    this.unlisten = history.listen(function () {
	      _this2.setState({
	        match: _this2.computeMatch(history.location.pathname)
	      });
	    });
	  };
	
	  Router.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    (0, _warning2.default)(this.props.history === nextProps.history, 'You cannot change <Router history>');
	  };
	
	  Router.prototype.componentWillUnmount = function componentWillUnmount() {
	    this.unlisten();
	  };
	
	  Router.prototype.render = function render() {
	    var children = this.props.children;
	
	    return children ? _react2.default.Children.only(children) : null;
	  };
	
	  return Router;
	}(_react2.default.Component);
	
	Router.propTypes = {
	  history: _propTypes2.default.object.isRequired,
	  children: _propTypes2.default.node
	};
	Router.contextTypes = {
	  router: _propTypes2.default.object
	};
	Router.childContextTypes = {
	  router: _propTypes2.default.object.isRequired
	};
	exports.default = Router;

/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _react = __webpack_require__(98);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(106);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * The public API for prompting the user before navigating away
	 * from a screen with a component.
	 */
	var Prompt = function (_React$Component) {
	  _inherits(Prompt, _React$Component);
	
	  function Prompt() {
	    _classCallCheck(this, Prompt);
	
	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }
	
	  Prompt.prototype.enable = function enable(message) {
	    if (this.unblock) this.unblock();
	
	    this.unblock = this.context.router.history.block(message);
	  };
	
	  Prompt.prototype.disable = function disable() {
	    if (this.unblock) {
	      this.unblock();
	      this.unblock = null;
	    }
	  };
	
	  Prompt.prototype.componentWillMount = function componentWillMount() {
	    if (this.props.when) this.enable(this.props.message);
	  };
	
	  Prompt.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    if (nextProps.when) {
	      if (!this.props.when || this.props.message !== nextProps.message) this.enable(nextProps.message);
	    } else {
	      this.disable();
	    }
	  };
	
	  Prompt.prototype.componentWillUnmount = function componentWillUnmount() {
	    this.disable();
	  };
	
	  Prompt.prototype.render = function render() {
	    return null;
	  };
	
	  return Prompt;
	}(_react2.default.Component);
	
	Prompt.propTypes = {
	  when: _propTypes2.default.bool,
	  message: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]).isRequired
	};
	Prompt.defaultProps = {
	  when: true
	};
	Prompt.contextTypes = {
	  router: _propTypes2.default.shape({
	    history: _propTypes2.default.shape({
	      block: _propTypes2.default.func.isRequired
	    }).isRequired
	  }).isRequired
	};
	exports.default = Prompt;

/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _react = __webpack_require__(98);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(106);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * The public API for updating the location programatically
	 * with a component.
	 */
	var Redirect = function (_React$Component) {
	  _inherits(Redirect, _React$Component);
	
	  function Redirect() {
	    _classCallCheck(this, Redirect);
	
	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }
	
	  Redirect.prototype.isStatic = function isStatic() {
	    return this.context.router && this.context.router.staticContext;
	  };
	
	  Redirect.prototype.componentWillMount = function componentWillMount() {
	    if (this.isStatic()) this.perform();
	  };
	
	  Redirect.prototype.componentDidMount = function componentDidMount() {
	    if (!this.isStatic()) this.perform();
	  };
	
	  Redirect.prototype.perform = function perform() {
	    var history = this.context.router.history;
	    var _props = this.props,
	        push = _props.push,
	        to = _props.to;
	
	
	    if (push) {
	      history.push(to);
	    } else {
	      history.replace(to);
	    }
	  };
	
	  Redirect.prototype.render = function render() {
	    return null;
	  };
	
	  return Redirect;
	}(_react2.default.Component);
	
	Redirect.propTypes = {
	  push: _propTypes2.default.bool,
	  from: _propTypes2.default.string,
	  to: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object])
	};
	Redirect.defaultProps = {
	  push: false
	};
	Redirect.contextTypes = {
	  router: _propTypes2.default.shape({
	    history: _propTypes2.default.shape({
	      push: _propTypes2.default.func.isRequired,
	      replace: _propTypes2.default.func.isRequired
	    }).isRequired,
	    staticContext: _propTypes2.default.object
	  }).isRequired
	};
	exports.default = Redirect;

/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _warning = __webpack_require__(115);
	
	var _warning2 = _interopRequireDefault(_warning);
	
	var _react = __webpack_require__(98);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(106);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _matchPath = __webpack_require__(130);
	
	var _matchPath2 = _interopRequireDefault(_matchPath);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * The public API for matching a single path and rendering.
	 */
	var Route = function (_React$Component) {
	  _inherits(Route, _React$Component);
	
	  function Route() {
	    var _temp, _this, _ret;
	
	    _classCallCheck(this, Route);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {
	      match: _this.computeMatch(_this.props, _this.context.router)
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }
	
	  Route.prototype.getChildContext = function getChildContext() {
	    return {
	      router: _extends({}, this.context.router, {
	        route: {
	          location: this.props.location || this.context.router.route.location,
	          match: this.state.match
	        }
	      })
	    };
	  };
	
	  Route.prototype.computeMatch = function computeMatch(_ref, _ref2) {
	    var computedMatch = _ref.computedMatch,
	        location = _ref.location,
	        path = _ref.path,
	        strict = _ref.strict,
	        exact = _ref.exact;
	    var route = _ref2.route;
	
	    if (computedMatch) return computedMatch; // <Switch> already computed the match for us
	
	    var pathname = (location || route.location).pathname;
	
	    return path ? (0, _matchPath2.default)(pathname, { path: path, strict: strict, exact: exact }) : route.match;
	  };
	
	  Route.prototype.componentWillMount = function componentWillMount() {
	    var _props = this.props,
	        component = _props.component,
	        render = _props.render,
	        children = _props.children;
	
	
	    (0, _warning2.default)(!(component && render), 'You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored');
	
	    (0, _warning2.default)(!(component && children), 'You should not use <Route component> and <Route children> in the same route; <Route children> will be ignored');
	
	    (0, _warning2.default)(!(render && children), 'You should not use <Route render> and <Route children> in the same route; <Route children> will be ignored');
	  };
	
	  Route.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps, nextContext) {
	    (0, _warning2.default)(!(nextProps.location && !this.props.location), '<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.');
	
	    (0, _warning2.default)(!(!nextProps.location && this.props.location), '<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.');
	
	    this.setState({
	      match: this.computeMatch(nextProps, nextContext.router)
	    });
	  };
	
	  Route.prototype.render = function render() {
	    var match = this.state.match;
	    var _props2 = this.props,
	        children = _props2.children,
	        component = _props2.component,
	        render = _props2.render;
	    var _context$router = this.context.router,
	        history = _context$router.history,
	        route = _context$router.route,
	        staticContext = _context$router.staticContext;
	
	    var location = this.props.location || route.location;
	    var props = { match: match, location: location, history: history, staticContext: staticContext };
	
	    return component ? // component prop gets first priority, only called if there's a match
	    match ? _react2.default.createElement(component, props) : null : render ? // render prop is next, only called if there's a match
	    match ? render(props) : null : children ? // children come last, always called
	    typeof children === 'function' ? children(props) : !Array.isArray(children) || children.length ? // Preact defaults to empty children array
	    _react2.default.Children.only(children) : null : null;
	  };
	
	  return Route;
	}(_react2.default.Component);
	
	Route.propTypes = {
	  computedMatch: _propTypes2.default.object, // private, from <Switch>
	  path: _propTypes2.default.string,
	  exact: _propTypes2.default.bool,
	  strict: _propTypes2.default.bool,
	  component: _propTypes2.default.func,
	  render: _propTypes2.default.func,
	  children: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.node]),
	  location: _propTypes2.default.object
	};
	Route.contextTypes = {
	  router: _propTypes2.default.shape({
	    history: _propTypes2.default.object.isRequired,
	    route: _propTypes2.default.object.isRequired,
	    staticContext: _propTypes2.default.object
	  })
	};
	Route.childContextTypes = {
	  router: _propTypes2.default.object.isRequired
	};
	exports.default = Route;

/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _pathToRegexp = __webpack_require__(131);
	
	var _pathToRegexp2 = _interopRequireDefault(_pathToRegexp);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var patternCache = {};
	var cacheLimit = 10000;
	var cacheCount = 0;
	
	var compilePath = function compilePath(pattern, options) {
	  var cacheKey = '' + options.end + options.strict;
	  var cache = patternCache[cacheKey] || (patternCache[cacheKey] = {});
	
	  if (cache[pattern]) return cache[pattern];
	
	  var keys = [];
	  var re = (0, _pathToRegexp2.default)(pattern, keys, options);
	  var compiledPattern = { re: re, keys: keys };
	
	  if (cacheCount < cacheLimit) {
	    cache[pattern] = compiledPattern;
	    cacheCount++;
	  }
	
	  return compiledPattern;
	};
	
	/**
	 * Public API for matching a URL pathname to a path pattern.
	 */
	var matchPath = function matchPath(pathname) {
	  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	
	  if (typeof options === 'string') options = { path: options };
	
	  var _options = options,
	      _options$path = _options.path,
	      path = _options$path === undefined ? '/' : _options$path,
	      _options$exact = _options.exact,
	      exact = _options$exact === undefined ? false : _options$exact,
	      _options$strict = _options.strict,
	      strict = _options$strict === undefined ? false : _options$strict;
	
	  var _compilePath = compilePath(path, { end: exact, strict: strict }),
	      re = _compilePath.re,
	      keys = _compilePath.keys;
	
	  var match = re.exec(pathname);
	
	  if (!match) return null;
	
	  var url = match[0],
	      values = match.slice(1);
	
	  var isExact = pathname === url;
	
	  if (exact && !isExact) return null;
	
	  return {
	    path: path, // the path pattern used to match
	    url: path === '/' && url === '' ? '/' : url, // the matched portion of the URL
	    isExact: isExact, // whether or not we matched exactly
	    params: keys.reduce(function (memo, key, index) {
	      memo[key.name] = values[index];
	      return memo;
	    }, {})
	  };
	};
	
	exports.default = matchPath;

/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	var isarray = __webpack_require__(132)
	
	/**
	 * Expose `pathToRegexp`.
	 */
	module.exports = pathToRegexp
	module.exports.parse = parse
	module.exports.compile = compile
	module.exports.tokensToFunction = tokensToFunction
	module.exports.tokensToRegExp = tokensToRegExp
	
	/**
	 * The main path matching regexp utility.
	 *
	 * @type {RegExp}
	 */
	var PATH_REGEXP = new RegExp([
	  // Match escaped characters that would otherwise appear in future matches.
	  // This allows the user to escape special characters that won't transform.
	  '(\\\\.)',
	  // Match Express-style parameters and un-named parameters with a prefix
	  // and optional suffixes. Matches appear as:
	  //
	  // "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]
	  // "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]
	  // "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]
	  '([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))'
	].join('|'), 'g')
	
	/**
	 * Parse a string for the raw tokens.
	 *
	 * @param  {string}  str
	 * @param  {Object=} options
	 * @return {!Array}
	 */
	function parse (str, options) {
	  var tokens = []
	  var key = 0
	  var index = 0
	  var path = ''
	  var defaultDelimiter = options && options.delimiter || '/'
	  var res
	
	  while ((res = PATH_REGEXP.exec(str)) != null) {
	    var m = res[0]
	    var escaped = res[1]
	    var offset = res.index
	    path += str.slice(index, offset)
	    index = offset + m.length
	
	    // Ignore already escaped sequences.
	    if (escaped) {
	      path += escaped[1]
	      continue
	    }
	
	    var next = str[index]
	    var prefix = res[2]
	    var name = res[3]
	    var capture = res[4]
	    var group = res[5]
	    var modifier = res[6]
	    var asterisk = res[7]
	
	    // Push the current path onto the tokens.
	    if (path) {
	      tokens.push(path)
	      path = ''
	    }
	
	    var partial = prefix != null && next != null && next !== prefix
	    var repeat = modifier === '+' || modifier === '*'
	    var optional = modifier === '?' || modifier === '*'
	    var delimiter = res[2] || defaultDelimiter
	    var pattern = capture || group
	
	    tokens.push({
	      name: name || key++,
	      prefix: prefix || '',
	      delimiter: delimiter,
	      optional: optional,
	      repeat: repeat,
	      partial: partial,
	      asterisk: !!asterisk,
	      pattern: pattern ? escapeGroup(pattern) : (asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?')
	    })
	  }
	
	  // Match any characters still remaining.
	  if (index < str.length) {
	    path += str.substr(index)
	  }
	
	  // If the path exists, push it onto the end.
	  if (path) {
	    tokens.push(path)
	  }
	
	  return tokens
	}
	
	/**
	 * Compile a string to a template function for the path.
	 *
	 * @param  {string}             str
	 * @param  {Object=}            options
	 * @return {!function(Object=, Object=)}
	 */
	function compile (str, options) {
	  return tokensToFunction(parse(str, options))
	}
	
	/**
	 * Prettier encoding of URI path segments.
	 *
	 * @param  {string}
	 * @return {string}
	 */
	function encodeURIComponentPretty (str) {
	  return encodeURI(str).replace(/[\/?#]/g, function (c) {
	    return '%' + c.charCodeAt(0).toString(16).toUpperCase()
	  })
	}
	
	/**
	 * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.
	 *
	 * @param  {string}
	 * @return {string}
	 */
	function encodeAsterisk (str) {
	  return encodeURI(str).replace(/[?#]/g, function (c) {
	    return '%' + c.charCodeAt(0).toString(16).toUpperCase()
	  })
	}
	
	/**
	 * Expose a method for transforming tokens into the path function.
	 */
	function tokensToFunction (tokens) {
	  // Compile all the tokens into regexps.
	  var matches = new Array(tokens.length)
	
	  // Compile all the patterns before compilation.
	  for (var i = 0; i < tokens.length; i++) {
	    if (typeof tokens[i] === 'object') {
	      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$')
	    }
	  }
	
	  return function (obj, opts) {
	    var path = ''
	    var data = obj || {}
	    var options = opts || {}
	    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent
	
	    for (var i = 0; i < tokens.length; i++) {
	      var token = tokens[i]
	
	      if (typeof token === 'string') {
	        path += token
	
	        continue
	      }
	
	      var value = data[token.name]
	      var segment
	
	      if (value == null) {
	        if (token.optional) {
	          // Prepend partial segment prefixes.
	          if (token.partial) {
	            path += token.prefix
	          }
	
	          continue
	        } else {
	          throw new TypeError('Expected "' + token.name + '" to be defined')
	        }
	      }
	
	      if (isarray(value)) {
	        if (!token.repeat) {
	          throw new TypeError('Expected "' + token.name + '" to not repeat, but received `' + JSON.stringify(value) + '`')
	        }
	
	        if (value.length === 0) {
	          if (token.optional) {
	            continue
	          } else {
	            throw new TypeError('Expected "' + token.name + '" to not be empty')
	          }
	        }
	
	        for (var j = 0; j < value.length; j++) {
	          segment = encode(value[j])
	
	          if (!matches[i].test(segment)) {
	            throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but received `' + JSON.stringify(segment) + '`')
	          }
	
	          path += (j === 0 ? token.prefix : token.delimiter) + segment
	        }
	
	        continue
	      }
	
	      segment = token.asterisk ? encodeAsterisk(value) : encode(value)
	
	      if (!matches[i].test(segment)) {
	        throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"')
	      }
	
	      path += token.prefix + segment
	    }
	
	    return path
	  }
	}
	
	/**
	 * Escape a regular expression string.
	 *
	 * @param  {string} str
	 * @return {string}
	 */
	function escapeString (str) {
	  return str.replace(/([.+*?=^!:${}()[\]|\/\\])/g, '\\$1')
	}
	
	/**
	 * Escape the capturing group by escaping special characters and meaning.
	 *
	 * @param  {string} group
	 * @return {string}
	 */
	function escapeGroup (group) {
	  return group.replace(/([=!:$\/()])/g, '\\$1')
	}
	
	/**
	 * Attach the keys as a property of the regexp.
	 *
	 * @param  {!RegExp} re
	 * @param  {Array}   keys
	 * @return {!RegExp}
	 */
	function attachKeys (re, keys) {
	  re.keys = keys
	  return re
	}
	
	/**
	 * Get the flags for a regexp from the options.
	 *
	 * @param  {Object} options
	 * @return {string}
	 */
	function flags (options) {
	  return options.sensitive ? '' : 'i'
	}
	
	/**
	 * Pull out keys from a regexp.
	 *
	 * @param  {!RegExp} path
	 * @param  {!Array}  keys
	 * @return {!RegExp}
	 */
	function regexpToRegexp (path, keys) {
	  // Use a negative lookahead to match only capturing groups.
	  var groups = path.source.match(/\((?!\?)/g)
	
	  if (groups) {
	    for (var i = 0; i < groups.length; i++) {
	      keys.push({
	        name: i,
	        prefix: null,
	        delimiter: null,
	        optional: false,
	        repeat: false,
	        partial: false,
	        asterisk: false,
	        pattern: null
	      })
	    }
	  }
	
	  return attachKeys(path, keys)
	}
	
	/**
	 * Transform an array into a regexp.
	 *
	 * @param  {!Array}  path
	 * @param  {Array}   keys
	 * @param  {!Object} options
	 * @return {!RegExp}
	 */
	function arrayToRegexp (path, keys, options) {
	  var parts = []
	
	  for (var i = 0; i < path.length; i++) {
	    parts.push(pathToRegexp(path[i], keys, options).source)
	  }
	
	  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options))
	
	  return attachKeys(regexp, keys)
	}
	
	/**
	 * Create a path regexp from string input.
	 *
	 * @param  {string}  path
	 * @param  {!Array}  keys
	 * @param  {!Object} options
	 * @return {!RegExp}
	 */
	function stringToRegexp (path, keys, options) {
	  return tokensToRegExp(parse(path, options), keys, options)
	}
	
	/**
	 * Expose a function for taking tokens and returning a RegExp.
	 *
	 * @param  {!Array}          tokens
	 * @param  {(Array|Object)=} keys
	 * @param  {Object=}         options
	 * @return {!RegExp}
	 */
	function tokensToRegExp (tokens, keys, options) {
	  if (!isarray(keys)) {
	    options = /** @type {!Object} */ (keys || options)
	    keys = []
	  }
	
	  options = options || {}
	
	  var strict = options.strict
	  var end = options.end !== false
	  var route = ''
	
	  // Iterate over the tokens and create our regexp string.
	  for (var i = 0; i < tokens.length; i++) {
	    var token = tokens[i]
	
	    if (typeof token === 'string') {
	      route += escapeString(token)
	    } else {
	      var prefix = escapeString(token.prefix)
	      var capture = '(?:' + token.pattern + ')'
	
	      keys.push(token)
	
	      if (token.repeat) {
	        capture += '(?:' + prefix + capture + ')*'
	      }
	
	      if (token.optional) {
	        if (!token.partial) {
	          capture = '(?:' + prefix + '(' + capture + '))?'
	        } else {
	          capture = prefix + '(' + capture + ')?'
	        }
	      } else {
	        capture = prefix + '(' + capture + ')'
	      }
	
	      route += capture
	    }
	  }
	
	  var delimiter = escapeString(options.delimiter || '/')
	  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter
	
	  // In non-strict mode we allow a slash at the end of match. If the path to
	  // match already ends with a slash, we remove it for consistency. The slash
	  // is valid at the end of a path match, not in the middle. This is important
	  // in non-ending mode, where "/test/" shouldn't match "/test//route".
	  if (!strict) {
	    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?'
	  }
	
	  if (end) {
	    route += '$'
	  } else {
	    // In non-ending mode, we need the capturing groups to match as much as
	    // possible by using a positive lookahead to the end or next path segment.
	    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)'
	  }
	
	  return attachKeys(new RegExp('^' + route, flags(options)), keys)
	}
	
	/**
	 * Normalize the given path string, returning a regular expression.
	 *
	 * An empty array can be passed in for the keys, which will hold the
	 * placeholder key descriptions. For example, using `/user/:id`, `keys` will
	 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
	 *
	 * @param  {(string|RegExp|Array)} path
	 * @param  {(Array|Object)=}       keys
	 * @param  {Object=}               options
	 * @return {!RegExp}
	 */
	function pathToRegexp (path, keys, options) {
	  if (!isarray(keys)) {
	    options = /** @type {!Object} */ (keys || options)
	    keys = []
	  }
	
	  options = options || {}
	
	  if (path instanceof RegExp) {
	    return regexpToRegexp(path, /** @type {!Array} */ (keys))
	  }
	
	  if (isarray(path)) {
	    return arrayToRegexp(/** @type {!Array} */ (path), /** @type {!Array} */ (keys), options)
	  }
	
	  return stringToRegexp(/** @type {string} */ (path), /** @type {!Array} */ (keys), options)
	}


/***/ },
/* 132 */
/***/ function(module, exports) {

	module.exports = Array.isArray || function (arr) {
	  return Object.prototype.toString.call(arr) == '[object Array]';
	};


/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _invariant = __webpack_require__(116);
	
	var _invariant2 = _interopRequireDefault(_invariant);
	
	var _react = __webpack_require__(98);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(106);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _PathUtils = __webpack_require__(120);
	
	var _Router = __webpack_require__(126);
	
	var _Router2 = _interopRequireDefault(_Router);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var normalizeLocation = function normalizeLocation(object) {
	  var _object$pathname = object.pathname,
	      pathname = _object$pathname === undefined ? '/' : _object$pathname,
	      _object$search = object.search,
	      search = _object$search === undefined ? '' : _object$search,
	      _object$hash = object.hash,
	      hash = _object$hash === undefined ? '' : _object$hash;
	
	
	  return {
	    pathname: pathname,
	    search: search === '?' ? '' : search,
	    hash: hash === '#' ? '' : hash
	  };
	};
	
	var addBasename = function addBasename(basename, location) {
	  if (!basename) return location;
	
	  return _extends({}, location, {
	    pathname: (0, _PathUtils.addLeadingSlash)(basename) + location.pathname
	  });
	};
	
	var stripBasename = function stripBasename(basename, location) {
	  if (!basename) return location;
	
	  var base = (0, _PathUtils.addLeadingSlash)(basename);
	
	  if (location.pathname.indexOf(base) !== 0) return location;
	
	  return _extends({}, location, {
	    pathname: location.pathname.substr(base.length)
	  });
	};
	
	var createLocation = function createLocation(location) {
	  return typeof location === 'string' ? (0, _PathUtils.parsePath)(location) : normalizeLocation(location);
	};
	
	var createURL = function createURL(location) {
	  return typeof location === 'string' ? location : (0, _PathUtils.createPath)(location);
	};
	
	var staticHandler = function staticHandler(methodName) {
	  return function () {
	    (0, _invariant2.default)(false, 'You cannot %s with <StaticRouter>', methodName);
	  };
	};
	
	var noop = function noop() {};
	
	/**
	 * The public top-level API for a "static" <Router>, so-called because it
	 * can't actually change the current location. Instead, it just records
	 * location changes in a context object. Useful mainly in testing and
	 * server-rendering scenarios.
	 */
	
	var StaticRouter = function (_React$Component) {
	  _inherits(StaticRouter, _React$Component);
	
	  function StaticRouter() {
	    var _temp, _this, _ret;
	
	    _classCallCheck(this, StaticRouter);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.createHref = function (path) {
	      return (0, _PathUtils.addLeadingSlash)(_this.props.basename + createURL(path));
	    }, _this.handlePush = function (location) {
	      var _this$props = _this.props,
	          basename = _this$props.basename,
	          context = _this$props.context;
	
	      context.action = 'PUSH';
	      context.location = addBasename(basename, createLocation(location));
	      context.url = createURL(context.location);
	    }, _this.handleReplace = function (location) {
	      var _this$props2 = _this.props,
	          basename = _this$props2.basename,
	          context = _this$props2.context;
	
	      context.action = 'REPLACE';
	      context.location = addBasename(basename, createLocation(location));
	      context.url = createURL(context.location);
	    }, _this.handleListen = function () {
	      return noop;
	    }, _this.handleBlock = function () {
	      return noop;
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }
	
	  StaticRouter.prototype.getChildContext = function getChildContext() {
	    return {
	      router: {
	        staticContext: this.props.context
	      }
	    };
	  };
	
	  StaticRouter.prototype.render = function render() {
	    var _props = this.props,
	        basename = _props.basename,
	        context = _props.context,
	        location = _props.location,
	        props = _objectWithoutProperties(_props, ['basename', 'context', 'location']);
	
	    var history = {
	      createHref: this.createHref,
	      action: 'POP',
	      location: stripBasename(basename, createLocation(location)),
	      push: this.handlePush,
	      replace: this.handleReplace,
	      go: staticHandler('go'),
	      goBack: staticHandler('goBack'),
	      goForward: staticHandler('goForward'),
	      listen: this.handleListen,
	      block: this.handleBlock
	    };
	
	    return _react2.default.createElement(_Router2.default, _extends({}, props, { history: history }));
	  };
	
	  return StaticRouter;
	}(_react2.default.Component);
	
	StaticRouter.propTypes = {
	  basename: _propTypes2.default.string,
	  context: _propTypes2.default.object.isRequired,
	  location: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object])
	};
	StaticRouter.defaultProps = {
	  basename: '',
	  location: '/'
	};
	StaticRouter.childContextTypes = {
	  router: _propTypes2.default.object.isRequired
	};
	exports.default = StaticRouter;

/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _react = __webpack_require__(98);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(106);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _warning = __webpack_require__(115);
	
	var _warning2 = _interopRequireDefault(_warning);
	
	var _matchPath = __webpack_require__(130);
	
	var _matchPath2 = _interopRequireDefault(_matchPath);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * The public API for rendering the first <Route> that matches.
	 */
	var Switch = function (_React$Component) {
	  _inherits(Switch, _React$Component);
	
	  function Switch() {
	    _classCallCheck(this, Switch);
	
	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }
	
	  Switch.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    (0, _warning2.default)(!(nextProps.location && !this.props.location), '<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.');
	
	    (0, _warning2.default)(!(!nextProps.location && this.props.location), '<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.');
	  };
	
	  Switch.prototype.render = function render() {
	    var route = this.context.router.route;
	    var children = this.props.children;
	
	    var location = this.props.location || route.location;
	
	    var match = void 0,
	        child = void 0;
	    _react2.default.Children.forEach(children, function (element) {
	      if (!_react2.default.isValidElement(element)) return;
	
	      var _element$props = element.props,
	          pathProp = _element$props.path,
	          exact = _element$props.exact,
	          strict = _element$props.strict,
	          from = _element$props.from;
	
	      var path = pathProp || from;
	
	      if (match == null) {
	        child = element;
	        match = path ? (0, _matchPath2.default)(location.pathname, { path: path, exact: exact, strict: strict }) : route.match;
	      }
	    });
	
	    return match ? _react2.default.cloneElement(child, { location: location, computedMatch: match }) : null;
	  };
	
	  return Switch;
	}(_react2.default.Component);
	
	Switch.contextTypes = {
	  router: _propTypes2.default.shape({
	    route: _propTypes2.default.object.isRequired
	  }).isRequired
	};
	Switch.propTypes = {
	  children: _propTypes2.default.node,
	  location: _propTypes2.default.object
	};
	exports.default = Switch;

/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _react = __webpack_require__(98);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(106);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _hoistNonReactStatics = __webpack_require__(136);
	
	var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);
	
	var _Route = __webpack_require__(129);
	
	var _Route2 = _interopRequireDefault(_Route);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	/**
	 * A public higher-order component to access the imperative API
	 */
	var withRouter = function withRouter(Component) {
	  var C = function C(props) {
	    var wrappedComponentRef = props.wrappedComponentRef,
	        remainingProps = _objectWithoutProperties(props, ['wrappedComponentRef']);
	
	    return _react2.default.createElement(_Route2.default, { render: function render(routeComponentProps) {
	        return _react2.default.createElement(Component, _extends({}, remainingProps, routeComponentProps, { ref: wrappedComponentRef }));
	      } });
	  };
	
	  C.displayName = 'withRouter(' + (Component.displayName || Component.name) + ')';
	  C.WrappedComponent = Component;
	  C.propTypes = {
	    wrappedComponentRef: _propTypes2.default.func
	  };
	
	  return (0, _hoistNonReactStatics2.default)(C, Component);
	};
	
	exports.default = withRouter;

/***/ },
/* 136 */
/***/ function(module, exports) {

	/**
	 * Copyright 2015, Yahoo! Inc.
	 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
	 */
	'use strict';
	
	var REACT_STATICS = {
	    childContextTypes: true,
	    contextTypes: true,
	    defaultProps: true,
	    displayName: true,
	    getDefaultProps: true,
	    mixins: true,
	    propTypes: true,
	    type: true
	};
	
	var KNOWN_STATICS = {
	    name: true,
	    length: true,
	    prototype: true,
	    caller: true,
	    arguments: true,
	    arity: true
	};
	
	var isGetOwnPropertySymbolsAvailable = typeof Object.getOwnPropertySymbols === 'function';
	
	module.exports = function hoistNonReactStatics(targetComponent, sourceComponent, customStatics) {
	    if (typeof sourceComponent !== 'string') { // don't hoist over string (html) components
	        var keys = Object.getOwnPropertyNames(sourceComponent);
	
	        /* istanbul ignore else */
	        if (isGetOwnPropertySymbolsAvailable) {
	            keys = keys.concat(Object.getOwnPropertySymbols(sourceComponent));
	        }
	
	        for (var i = 0; i < keys.length; ++i) {
	            if (!REACT_STATICS[keys[i]] && !KNOWN_STATICS[keys[i]] && (!customStatics || !customStatics[keys[i]])) {
	                try {
	                    targetComponent[keys[i]] = sourceComponent[keys[i]];
	                } catch (error) {
	
	                }
	            }
	        }
	    }
	
	    return targetComponent;
	};


/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _react = __webpack_require__(98);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(106);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _createHashHistory = __webpack_require__(138);
	
	var _createHashHistory2 = _interopRequireDefault(_createHashHistory);
	
	var _reactRouter = __webpack_require__(123);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * The public API for a <Router> that uses window.location.hash.
	 */
	var HashRouter = function (_React$Component) {
	  _inherits(HashRouter, _React$Component);
	
	  function HashRouter() {
	    var _temp, _this, _ret;
	
	    _classCallCheck(this, HashRouter);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.history = (0, _createHashHistory2.default)(_this.props), _temp), _possibleConstructorReturn(_this, _ret);
	  }
	
	  HashRouter.prototype.render = function render() {
	    return _react2.default.createElement(_reactRouter.Router, { history: this.history, children: this.props.children });
	  };
	
	  return HashRouter;
	}(_react2.default.Component);
	
	HashRouter.propTypes = {
	  basename: _propTypes2.default.string,
	  getUserConfirmation: _propTypes2.default.func,
	  hashType: _propTypes2.default.oneOf(['hashbang', 'noslash', 'slash']),
	  children: _propTypes2.default.node
	};
	exports.default = HashRouter;

/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _warning = __webpack_require__(115);
	
	var _warning2 = _interopRequireDefault(_warning);
	
	var _invariant = __webpack_require__(116);
	
	var _invariant2 = _interopRequireDefault(_invariant);
	
	var _LocationUtils = __webpack_require__(117);
	
	var _PathUtils = __webpack_require__(120);
	
	var _createTransitionManager = __webpack_require__(121);
	
	var _createTransitionManager2 = _interopRequireDefault(_createTransitionManager);
	
	var _DOMUtils = __webpack_require__(122);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var HashChangeEvent = 'hashchange';
	
	var HashPathCoders = {
	  hashbang: {
	    encodePath: function encodePath(path) {
	      return path.charAt(0) === '!' ? path : '!/' + (0, _PathUtils.stripLeadingSlash)(path);
	    },
	    decodePath: function decodePath(path) {
	      return path.charAt(0) === '!' ? path.substr(1) : path;
	    }
	  },
	  noslash: {
	    encodePath: _PathUtils.stripLeadingSlash,
	    decodePath: _PathUtils.addLeadingSlash
	  },
	  slash: {
	    encodePath: _PathUtils.addLeadingSlash,
	    decodePath: _PathUtils.addLeadingSlash
	  }
	};
	
	var getHashPath = function getHashPath() {
	  // We can't use window.location.hash here because it's not
	  // consistent across browsers - Firefox will pre-decode it!
	  var href = window.location.href;
	  var hashIndex = href.indexOf('#');
	  return hashIndex === -1 ? '' : href.substring(hashIndex + 1);
	};
	
	var pushHashPath = function pushHashPath(path) {
	  return window.location.hash = path;
	};
	
	var replaceHashPath = function replaceHashPath(path) {
	  var hashIndex = window.location.href.indexOf('#');
	
	  window.location.replace(window.location.href.slice(0, hashIndex >= 0 ? hashIndex : 0) + '#' + path);
	};
	
	var createHashHistory = function createHashHistory() {
	  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
	  (0, _invariant2.default)(_DOMUtils.canUseDOM, 'Hash history needs a DOM');
	
	  var globalHistory = window.history;
	  var canGoWithoutReload = (0, _DOMUtils.supportsGoWithoutReloadUsingHash)();
	
	  var _props$getUserConfirm = props.getUserConfirmation,
	      getUserConfirmation = _props$getUserConfirm === undefined ? _DOMUtils.getConfirmation : _props$getUserConfirm,
	      _props$hashType = props.hashType,
	      hashType = _props$hashType === undefined ? 'slash' : _props$hashType;
	
	  var basename = props.basename ? (0, _PathUtils.stripTrailingSlash)((0, _PathUtils.addLeadingSlash)(props.basename)) : '';
	
	  var _HashPathCoders$hashT = HashPathCoders[hashType],
	      encodePath = _HashPathCoders$hashT.encodePath,
	      decodePath = _HashPathCoders$hashT.decodePath;
	
	
	  var getDOMLocation = function getDOMLocation() {
	    var path = decodePath(getHashPath());
	
	    if (basename) path = (0, _PathUtils.stripPrefix)(path, basename);
	
	    return (0, _PathUtils.parsePath)(path);
	  };
	
	  var transitionManager = (0, _createTransitionManager2.default)();
	
	  var setState = function setState(nextState) {
	    _extends(history, nextState);
	
	    history.length = globalHistory.length;
	
	    transitionManager.notifyListeners(history.location, history.action);
	  };
	
	  var forceNextPop = false;
	  var ignorePath = null;
	
	  var handleHashChange = function handleHashChange() {
	    var path = getHashPath();
	    var encodedPath = encodePath(path);
	
	    if (path !== encodedPath) {
	      // Ensure we always have a properly-encoded hash.
	      replaceHashPath(encodedPath);
	    } else {
	      var location = getDOMLocation();
	      var prevLocation = history.location;
	
	      if (!forceNextPop && (0, _LocationUtils.locationsAreEqual)(prevLocation, location)) return; // A hashchange doesn't always == location change.
	
	      if (ignorePath === (0, _PathUtils.createPath)(location)) return; // Ignore this change; we already setState in push/replace.
	
	      ignorePath = null;
	
	      handlePop(location);
	    }
	  };
	
	  var handlePop = function handlePop(location) {
	    if (forceNextPop) {
	      forceNextPop = false;
	      setState();
	    } else {
	      var action = 'POP';
	
	      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	        if (ok) {
	          setState({ action: action, location: location });
	        } else {
	          revertPop(location);
	        }
	      });
	    }
	  };
	
	  var revertPop = function revertPop(fromLocation) {
	    var toLocation = history.location;
	
	    // TODO: We could probably make this more reliable by
	    // keeping a list of paths we've seen in sessionStorage.
	    // Instead, we just default to 0 for paths we don't know.
	
	    var toIndex = allPaths.lastIndexOf((0, _PathUtils.createPath)(toLocation));
	
	    if (toIndex === -1) toIndex = 0;
	
	    var fromIndex = allPaths.lastIndexOf((0, _PathUtils.createPath)(fromLocation));
	
	    if (fromIndex === -1) fromIndex = 0;
	
	    var delta = toIndex - fromIndex;
	
	    if (delta) {
	      forceNextPop = true;
	      go(delta);
	    }
	  };
	
	  // Ensure the hash is encoded properly before doing anything else.
	  var path = getHashPath();
	  var encodedPath = encodePath(path);
	
	  if (path !== encodedPath) replaceHashPath(encodedPath);
	
	  var initialLocation = getDOMLocation();
	  var allPaths = [(0, _PathUtils.createPath)(initialLocation)];
	
	  // Public interface
	
	  var createHref = function createHref(location) {
	    return '#' + encodePath(basename + (0, _PathUtils.createPath)(location));
	  };
	
	  var push = function push(path, state) {
	    (0, _warning2.default)(state === undefined, 'Hash history cannot push state; it is ignored');
	
	    var action = 'PUSH';
	    var location = (0, _LocationUtils.createLocation)(path, undefined, undefined, history.location);
	
	    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	      if (!ok) return;
	
	      var path = (0, _PathUtils.createPath)(location);
	      var encodedPath = encodePath(basename + path);
	      var hashChanged = getHashPath() !== encodedPath;
	
	      if (hashChanged) {
	        // We cannot tell if a hashchange was caused by a PUSH, so we'd
	        // rather setState here and ignore the hashchange. The caveat here
	        // is that other hash histories in the page will consider it a POP.
	        ignorePath = path;
	        pushHashPath(encodedPath);
	
	        var prevIndex = allPaths.lastIndexOf((0, _PathUtils.createPath)(history.location));
	        var nextPaths = allPaths.slice(0, prevIndex === -1 ? 0 : prevIndex + 1);
	
	        nextPaths.push(path);
	        allPaths = nextPaths;
	
	        setState({ action: action, location: location });
	      } else {
	        (0, _warning2.default)(false, 'Hash history cannot PUSH the same path; a new entry will not be added to the history stack');
	
	        setState();
	      }
	    });
	  };
	
	  var replace = function replace(path, state) {
	    (0, _warning2.default)(state === undefined, 'Hash history cannot replace state; it is ignored');
	
	    var action = 'REPLACE';
	    var location = (0, _LocationUtils.createLocation)(path, undefined, undefined, history.location);
	
	    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	      if (!ok) return;
	
	      var path = (0, _PathUtils.createPath)(location);
	      var encodedPath = encodePath(basename + path);
	      var hashChanged = getHashPath() !== encodedPath;
	
	      if (hashChanged) {
	        // We cannot tell if a hashchange was caused by a REPLACE, so we'd
	        // rather setState here and ignore the hashchange. The caveat here
	        // is that other hash histories in the page will consider it a POP.
	        ignorePath = path;
	        replaceHashPath(encodedPath);
	      }
	
	      var prevIndex = allPaths.indexOf((0, _PathUtils.createPath)(history.location));
	
	      if (prevIndex !== -1) allPaths[prevIndex] = path;
	
	      setState({ action: action, location: location });
	    });
	  };
	
	  var go = function go(n) {
	    (0, _warning2.default)(canGoWithoutReload, 'Hash history go(n) causes a full page reload in this browser');
	
	    globalHistory.go(n);
	  };
	
	  var goBack = function goBack() {
	    return go(-1);
	  };
	
	  var goForward = function goForward() {
	    return go(1);
	  };
	
	  var listenerCount = 0;
	
	  var checkDOMListeners = function checkDOMListeners(delta) {
	    listenerCount += delta;
	
	    if (listenerCount === 1) {
	      (0, _DOMUtils.addEventListener)(window, HashChangeEvent, handleHashChange);
	    } else if (listenerCount === 0) {
	      (0, _DOMUtils.removeEventListener)(window, HashChangeEvent, handleHashChange);
	    }
	  };
	
	  var isBlocked = false;
	
	  var block = function block() {
	    var prompt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	
	    var unblock = transitionManager.setPrompt(prompt);
	
	    if (!isBlocked) {
	      checkDOMListeners(1);
	      isBlocked = true;
	    }
	
	    return function () {
	      if (isBlocked) {
	        isBlocked = false;
	        checkDOMListeners(-1);
	      }
	
	      return unblock();
	    };
	  };
	
	  var listen = function listen(listener) {
	    var unlisten = transitionManager.appendListener(listener);
	    checkDOMListeners(1);
	
	    return function () {
	      checkDOMListeners(-1);
	      unlisten();
	    };
	  };
	
	  var history = {
	    length: globalHistory.length,
	    action: 'POP',
	    location: initialLocation,
	    createHref: createHref,
	    push: push,
	    replace: replace,
	    go: go,
	    goBack: goBack,
	    goForward: goForward,
	    block: block,
	    listen: listen
	  };
	
	  return history;
	};
	
	exports.default = createHashHistory;

/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _react = __webpack_require__(98);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(106);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var isModifiedEvent = function isModifiedEvent(event) {
	  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
	};
	
	/**
	 * The public API for rendering a history-aware <a>.
	 */
	
	var Link = function (_React$Component) {
	  _inherits(Link, _React$Component);
	
	  function Link() {
	    var _temp, _this, _ret;
	
	    _classCallCheck(this, Link);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.handleClick = function (event) {
	      if (_this.props.onClick) _this.props.onClick(event);
	
	      if (!event.defaultPrevented && // onClick prevented default
	      event.button === 0 && // ignore right clicks
	      !_this.props.target && // let browser handle "target=_blank" etc.
	      !isModifiedEvent(event) // ignore clicks with modifier keys
	      ) {
	          event.preventDefault();
	
	          var history = _this.context.router.history;
	          var _this$props = _this.props,
	              replace = _this$props.replace,
	              to = _this$props.to;
	
	
	          if (replace) {
	            history.replace(to);
	          } else {
	            history.push(to);
	          }
	        }
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }
	
	  Link.prototype.render = function render() {
	    var _props = this.props,
	        replace = _props.replace,
	        to = _props.to,
	        props = _objectWithoutProperties(_props, ['replace', 'to']); // eslint-disable-line no-unused-vars
	
	    var href = this.context.router.history.createHref(typeof to === 'string' ? { pathname: to } : to);
	
	    return _react2.default.createElement('a', _extends({}, props, { onClick: this.handleClick, href: href }));
	  };
	
	  return Link;
	}(_react2.default.Component);
	
	Link.propTypes = {
	  onClick: _propTypes2.default.func,
	  target: _propTypes2.default.string,
	  replace: _propTypes2.default.bool,
	  to: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]).isRequired
	};
	Link.defaultProps = {
	  replace: false
	};
	Link.contextTypes = {
	  router: _propTypes2.default.shape({
	    history: _propTypes2.default.shape({
	      push: _propTypes2.default.func.isRequired,
	      replace: _propTypes2.default.func.isRequired,
	      createHref: _propTypes2.default.func.isRequired
	    }).isRequired
	  }).isRequired
	};
	exports.default = Link;

/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _reactRouter = __webpack_require__(123);
	
	Object.defineProperty(exports, 'default', {
	  enumerable: true,
	  get: function get() {
	    return _reactRouter.MemoryRouter;
	  }
	});

/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var _react = __webpack_require__(98);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(106);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _reactRouter = __webpack_require__(123);
	
	var _Link = __webpack_require__(139);
	
	var _Link2 = _interopRequireDefault(_Link);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	/**
	 * A <Link> wrapper that knows if it's "active" or not.
	 */
	var NavLink = function NavLink(_ref) {
	  var to = _ref.to,
	      exact = _ref.exact,
	      strict = _ref.strict,
	      location = _ref.location,
	      activeClassName = _ref.activeClassName,
	      className = _ref.className,
	      activeStyle = _ref.activeStyle,
	      style = _ref.style,
	      getIsActive = _ref.isActive,
	      rest = _objectWithoutProperties(_ref, ['to', 'exact', 'strict', 'location', 'activeClassName', 'className', 'activeStyle', 'style', 'isActive']);
	
	  return _react2.default.createElement(_reactRouter.Route, {
	    path: (typeof to === 'undefined' ? 'undefined' : _typeof(to)) === 'object' ? to.pathname : to,
	    exact: exact,
	    strict: strict,
	    location: location,
	    children: function children(_ref2) {
	      var location = _ref2.location,
	          match = _ref2.match;
	
	      var isActive = !!(getIsActive ? getIsActive(match, location) : match);
	
	      return _react2.default.createElement(_Link2.default, _extends({
	        to: to,
	        className: isActive ? [activeClassName, className].filter(function (i) {
	          return i;
	        }).join(' ') : className,
	        style: isActive ? _extends({}, style, activeStyle) : style
	      }, rest));
	    }
	  });
	};
	
	NavLink.propTypes = {
	  to: _Link2.default.propTypes.to,
	  exact: _propTypes2.default.bool,
	  strict: _propTypes2.default.bool,
	  location: _propTypes2.default.object,
	  activeClassName: _propTypes2.default.string,
	  className: _propTypes2.default.string,
	  activeStyle: _propTypes2.default.object,
	  style: _propTypes2.default.object,
	  isActive: _propTypes2.default.func
	};
	
	NavLink.defaultProps = {
	  activeClassName: 'active'
	};
	
	exports.default = NavLink;

/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _reactRouter = __webpack_require__(123);
	
	Object.defineProperty(exports, 'default', {
	  enumerable: true,
	  get: function get() {
	    return _reactRouter.Prompt;
	  }
	});

/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _reactRouter = __webpack_require__(123);
	
	Object.defineProperty(exports, 'default', {
	  enumerable: true,
	  get: function get() {
	    return _reactRouter.Redirect;
	  }
	});

/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _reactRouter = __webpack_require__(123);
	
	Object.defineProperty(exports, 'default', {
	  enumerable: true,
	  get: function get() {
	    return _reactRouter.Route;
	  }
	});

/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _reactRouter = __webpack_require__(123);
	
	Object.defineProperty(exports, 'default', {
	  enumerable: true,
	  get: function get() {
	    return _reactRouter.Router;
	  }
	});

/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _reactRouter = __webpack_require__(123);
	
	Object.defineProperty(exports, 'default', {
	  enumerable: true,
	  get: function get() {
	    return _reactRouter.StaticRouter;
	  }
	});

/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _reactRouter = __webpack_require__(123);
	
	Object.defineProperty(exports, 'default', {
	  enumerable: true,
	  get: function get() {
	    return _reactRouter.Switch;
	  }
	});

/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _reactRouter = __webpack_require__(123);
	
	Object.defineProperty(exports, 'default', {
	  enumerable: true,
	  get: function get() {
	    return _reactRouter.matchPath;
	  }
	});

/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _reactRouter = __webpack_require__(123);
	
	Object.defineProperty(exports, 'default', {
	  enumerable: true,
	  get: function get() {
	    return _reactRouter.withRouter;
	  }
	});

/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(151);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(153)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(true) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept(151, function() {
				var newContent = __webpack_require__(151);
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(152)();
	// imports
	
	
	// module
	exports.push([module.id, ".navigator-wrapper {\n  background: #000;\n  overflow: hidden;\n  width: 166px;\n  height: 178px;\n  border: solid 0px #ffffff;\n}\n.osd {\n  position: relative;\n  background-color: black;\n}\n.osd-toolbar {\n  padding: 0;\n  position: absolute;\n  top: 0;\n}\n.osd-toolbar li {\n  display: inline-block;\n}\n.osd-toolbar > li {\n  list-style: none;\n}\n.osd-toolbar a {\n  z-index: 1;\n  width: 30px;\n  height: 30px;\n  font-height: 30px;\n  background: rgba(0, 0, 0, 0.6);\n  color: #fff;\n  margin-right: 1px;\n  cursor: pointer;\n  text-align: center;\n}\n.osd-toolbar a:hover {\n  background: rgba(158, 46, 0, 0.6);\n  text-decoration: none;\n}\n.osd-toolbar a > i {\n  width: 30px;\n  height: 30px;\n  line-height: 30px;\n  font-size: 15px;\n  padding-top: 2px;\n}\n.openseadragon-container,\n.openseadragon {\n  height: 500px;\n  width: 100%;\n}\n.image-nav {\n  margin-bottom: 10px;\n}\n.image-nav ul {\n  margin-left: 15px;\n}\n.toc-select {\n  margin-top: 10px;\n}\n.toc-select label {\n  margin-right: 5px;\n}\n", ""]);
	
	// exports


/***/ },
/* 152 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	module.exports = function() {
		var list = [];
	
		// return the list of modules as css string
		list.toString = function toString() {
			var result = [];
			for(var i = 0; i < this.length; i++) {
				var item = this[i];
				if(item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};
	
		// import a list of modules into the list
		list.i = function(modules, mediaQuery) {
			if(typeof modules === "string")
				modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for(var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if(typeof id === "number")
					alreadyImportedModules[id] = true;
			}
			for(i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if(mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if(mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};


/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isOldIE = memoize(function() {
			return /msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase());
		}),
		getHeadElement = memoize(function () {
			return document.head || document.getElementsByTagName("head")[0];
		}),
		singletonElement = null,
		singletonCounter = 0,
		styleElementsInsertedAtTop = [];
	
	module.exports = function(list, options) {
		if(false) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}
	
		options = options || {};
		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isOldIE();
	
		// By default, add <style> tags to the bottom of <head>.
		if (typeof options.insertAt === "undefined") options.insertAt = "bottom";
	
		var styles = listToStyles(list);
		addStylesToDom(styles, options);
	
		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}
	
	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}
	
	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}
	
	function insertStyleElement(options, styleElement) {
		var head = getHeadElement();
		var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];
		if (options.insertAt === "top") {
			if(!lastStyleElementInsertedAtTop) {
				head.insertBefore(styleElement, head.firstChild);
			} else if(lastStyleElementInsertedAtTop.nextSibling) {
				head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
			} else {
				head.appendChild(styleElement);
			}
			styleElementsInsertedAtTop.push(styleElement);
		} else if (options.insertAt === "bottom") {
			head.appendChild(styleElement);
		} else {
			throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
		}
	}
	
	function removeStyleElement(styleElement) {
		styleElement.parentNode.removeChild(styleElement);
		var idx = styleElementsInsertedAtTop.indexOf(styleElement);
		if(idx >= 0) {
			styleElementsInsertedAtTop.splice(idx, 1);
		}
	}
	
	function createStyleElement(options) {
		var styleElement = document.createElement("style");
		styleElement.type = "text/css";
		insertStyleElement(options, styleElement);
		return styleElement;
	}
	
	function createLinkElement(options) {
		var linkElement = document.createElement("link");
		linkElement.rel = "stylesheet";
		insertStyleElement(options, linkElement);
		return linkElement;
	}
	
	function addStyle(obj, options) {
		var styleElement, update, remove;
	
		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement(options));
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else if(obj.sourceMap &&
			typeof URL === "function" &&
			typeof URL.createObjectURL === "function" &&
			typeof URL.revokeObjectURL === "function" &&
			typeof Blob === "function" &&
			typeof btoa === "function") {
			styleElement = createLinkElement(options);
			update = updateLink.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
				if(styleElement.href)
					URL.revokeObjectURL(styleElement.href);
			};
		} else {
			styleElement = createStyleElement(options);
			update = applyToTag.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
			};
		}
	
		update(obj);
	
		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}
	
	var replaceText = (function () {
		var textStore = [];
	
		return function (index, replacement) {
			textStore[index] = replacement;
			return textStore.filter(Boolean).join('\n');
		};
	})();
	
	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;
	
		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}
	
	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;
	
		if(media) {
			styleElement.setAttribute("media", media)
		}
	
		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}
	
	function updateLink(linkElement, obj) {
		var css = obj.css;
		var sourceMap = obj.sourceMap;
	
		if(sourceMap) {
			// http://stackoverflow.com/a/26603875
			css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
		}
	
		var blob = new Blob([css], { type: "text/css" });
	
		var oldSrc = linkElement.href;
	
		linkElement.href = URL.createObjectURL(blob);
	
		if(oldSrc)
			URL.revokeObjectURL(oldSrc);
	}


/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {/* REACT HOT LOADER */ if (true) { (function () { var ReactHotAPI = __webpack_require__(2), RootInstanceProvider = __webpack_require__(10), ReactMount = __webpack_require__(12), React = __webpack_require__(98); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {
	
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(98);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _openseadragon = __webpack_require__(155);
	
	var _openseadragon2 = _interopRequireDefault(_openseadragon);
	
	var _reactOpenseadragonControls = __webpack_require__(100);
	
	var _reactOpenseadragonControls2 = _interopRequireDefault(_reactOpenseadragonControls);
	
	var _reactRouter = __webpack_require__(123);
	
	var _reactOpenseadragonNav = __webpack_require__(156);
	
	var _reactOpenseadragonNav2 = _interopRequireDefault(_reactOpenseadragonNav);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var OpenSeadragonViewer = function (_React$Component) {
	  _inherits(OpenSeadragonViewer, _React$Component);
	
	  function OpenSeadragonViewer(props) {
	    _classCallCheck(this, OpenSeadragonViewer);
	
	    var _this = _possibleConstructorReturn(this, (OpenSeadragonViewer.__proto__ || Object.getPrototypeOf(OpenSeadragonViewer)).call(this, props));
	
	    _this._config = _this._config.bind(_this);
	    _this._currentImage = _this._currentImage.bind(_this);
	    _this._updatePath = _this._updatePath.bind(_this);
	    _this._nav = _this._nav.bind(_this);
	    _this._id = _this._id.bind(_this);
	    return _this;
	  }
	
	  _createClass(OpenSeadragonViewer, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      var _props = this.props,
	          pageHandler = _props.pageHandler,
	          basename = _props.basename,
	          history = _props.history;
	
	      window.OPENSEADRAGONVIEWER = window.OpenSeadragon(this._config());
	      var updatePath = this._updatePath;
	      window.OPENSEADRAGONVIEWER.addHandler('page', function (viewer) {
	        if (updatePath(viewer.page)) {
	          history.push('' + viewer.page);
	        }
	      });
	      // This allows us to keep the transcript/image toggle pills in sync
	      // with what was clicked on the viewer nav strip
	      OPENSEADRAGONVIEWER.goToPage(parseInt(this.props.match.params.id, 10));
	      // Force a re-render to get the TOC drop-down
	      this.forceUpdate();
	    }
	  }, {
	    key: '_updatePath',
	    value: function _updatePath(page) {
	      if (this._currentImage() !== page) {
	        return true;
	      }
	      return false;
	    }
	  }, {
	    key: '_currentImage',
	    value: function _currentImage() {
	      return parseInt(window.location.href.split('/').reverse()[0], 10);
	    }
	  }, {
	    key: '_config',
	    value: function _config() {
	      return Object.assign(this.props.default_config, this.props.config);
	    }
	  }, {
	    key: '_id',
	    value: function _id() {
	      return parseInt(this.props.match.params.id, 10);
	    }
	  }, {
	    key: '_nav',
	    value: function _nav() {
	      console.log('hay girl');
	      if (typeof OPENSEADRAGONVIEWER !== 'undefined') {
	        return _react2.default.createElement(_reactOpenseadragonNav2.default, _extends({ id: this._id()
	        }, this.props, this.props.config, {
	          viewer: OPENSEADRAGONVIEWER
	        }));
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var include_controls = this.props.include_controls;
	
	      var controls = include_controls ? _react2.default.createElement(_reactOpenseadragonControls2.default, null) : '';
	      return _react2.default.createElement(
	        'div',
	        null,
	        this._nav(),
	        _react2.default.createElement(
	          'div',
	          { className: 'osd col-md-12' },
	          _react2.default.createElement(
	            'div',
	            { className: 'openseadragon', id: 'osd-viewer' },
	            controls
	          )
	        )
	      );
	    }
	  }]);
	
	  return OpenSeadragonViewer;
	}(_react2.default.Component);
	
	exports.default = OpenSeadragonViewer;
	
	
	OpenSeadragonViewer.defaultProps = { include_navigator: true,
	  include_controls: true,
	  default_config: {
	    showNavigator: true,
	    id: 'osd-viewer',
	    visibilityRatio: 1.0,
	    constrainDuringPan: false,
	    defaultZoomLevel: 1,
	    minZoomLevel: 1,
	    maxZoomLevel: 10,
	    zoomInButton: 'zoom-in',
	    zoomOutButton: 'zoom-out',
	    homeButton: 'reset',
	    fullPageButton: 'full-page',
	    nextButton: 'next',
	    previousButton: 'previous'
	  }
	};
	
	OpenSeadragonViewer.propTypes = {
	  config: _react2.default.PropTypes.object,
	  basename: _react2.default.PropTypes.string
	};
	
	/* REACT HOT LOADER */ }).call(this); } finally { if (true) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = __webpack_require__(101); if (makeExportsHot(module, __webpack_require__(98))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "react-openseadragon-viewer.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)(module)))

/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;//! openseadragon 2.2.1
	//! Built on 2016-07-01
	//! Git commit: v2.2.1-0-babdefd
	//! http://openseadragon.github.io
	//! License: http://openseadragon.github.io/license/
	
	/*
	 * OpenSeadragon
	 *
	 * Copyright (C) 2009 CodePlex Foundation
	 * Copyright (C) 2010-2013 OpenSeadragon contributors
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 * - Redistributions of source code must retain the above copyright notice,
	 *   this list of conditions and the following disclaimer.
	 *
	 * - Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * - Neither the name of CodePlex Foundation nor the names of its
	 *   contributors may be used to endorse or promote products derived from
	 *   this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
	 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */
	
	/*
	 * Portions of this source file taken from jQuery:
	 *
	 * Copyright 2011 John Resig
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining
	 * a copy of this software and associated documentation files (the
	 * "Software"), to deal in the Software without restriction, including
	 * without limitation the rights to use, copy, modify, merge, publish,
	 * distribute, sublicense, and/or sell copies of the Software, and to
	 * permit persons to whom the Software is furnished to do so, subject to
	 * the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be
	 * included in all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
	 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
	 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
	 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
	 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
	 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
	 */
	
	/*
	 * Portions of this source file taken from mattsnider.com:
	 *
	 * Copyright (c) 2006-2013 Matt Snider
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a
	 * copy of this software and associated documentation files (the "Software"),
	 * to deal in the Software without restriction, including without limitation
	 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
	 * and/or sell copies of the Software, and to permit persons to whom the
	 * Software is furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included
	 * in all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
	 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
	 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
	 * OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
	 * THE USE OR OTHER DEALINGS IN THE SOFTWARE.
	 */
	
	
	/**
	 * @namespace OpenSeadragon
	 * @version openseadragon 2.2.1
	 * @classdesc The root namespace for OpenSeadragon.  All utility methods
	 * and classes are defined on or below this namespace.
	 *
	 */
	
	
	// Typedefs
	
	 /**
	  * All required and optional settings for instantiating a new instance of an OpenSeadragon image viewer.
	  *
	  * @typedef {Object} Options
	  * @memberof OpenSeadragon
	  *
	  * @property {String} id
	  *     Id of the element to append the viewer's container element to. If not provided, the 'element' property must be provided.
	  *     If both the element and id properties are specified, the viewer is appended to the element provided in the element property.
	  *
	  * @property {Element} element
	  *     The element to append the viewer's container element to. If not provided, the 'id' property must be provided.
	  *     If both the element and id properties are specified, the viewer is appended to the element provided in the element property.
	  *
	  * @property {Array|String|Function|Object} [tileSources=null]
	  *     Tile source(s) to open initially. This is a complex parameter; see
	  *     {@link OpenSeadragon.Viewer#open} for details.
	  *
	  * @property {Number} [tabIndex=0]
	  *     Tabbing order index to assign to the viewer element. Positive values are selected in increasing order. When tabIndex is 0
	  *     source order is used. A negative value omits the viewer from the tabbing order.
	  *
	  * @property {Array} overlays Array of objects defining permanent overlays of
	  *     the viewer. The overlays added via this option and later removed with
	  *     {@link OpenSeadragon.Viewer#removeOverlay} will be added back when a new
	  *     image is opened.
	  *     To add overlays which can be definitively removed, one must use
	  *     {@link OpenSeadragon.Viewer#addOverlay}
	  *     If displaying a sequence of images, the overlays can be associated
	  *     with a specific page by passing the overlays array to the page's
	  *     tile source configuration.
	  *     Expected properties:
	  *     * x, y, (or px, py for pixel coordinates) to define the location.
	  *     * width, height in point if using x,y or in pixels if using px,py. If width
	  *       and height are specified, the overlay size is adjusted when zooming,
	  *       otherwise the size stays the size of the content (or the size defined by CSS).
	  *     * className to associate a class to the overlay
	  *     * id to set the overlay element. If an element with this id already exists,
	  *       it is reused, otherwise it is created. If not specified, a new element is
	  *       created.
	  *     * placement a string to define the relative position to the viewport.
	  *       Only used if no width and height are specified. Default: 'TOP_LEFT'.
	  *       See {@link OpenSeadragon.Placement} for possible values.
	  *
	  * @property {String} [xmlPath=null]
	  *     <strong>DEPRECATED</strong>. A relative path to load a DZI file from the server.
	  *     Prefer the newer Options.tileSources.
	  *
	  * @property {String} [prefixUrl='/images/']
	  *     Prepends the prefixUrl to navImages paths, which is very useful
	  *     since the default paths are rarely useful for production
	  *     environments.
	  *
	  * @property {OpenSeadragon.NavImages} [navImages]
	  *     An object with a property for each button or other built-in navigation
	  *     control, eg the current 'zoomIn', 'zoomOut', 'home', and 'fullpage'.
	  *     Each of those in turn provides an image path for each state of the button
	  *     or navigation control, eg 'REST', 'GROUP', 'HOVER', 'PRESS'. Finally the
	  *     image paths, by default assume there is a folder on the servers root path
	  *     called '/images', eg '/images/zoomin_rest.png'.  If you need to adjust
	  *     these paths, prefer setting the option.prefixUrl rather than overriding
	  *     every image path directly through this setting.
	  *
	  * @property {Boolean} [debugMode=false]
	  *     TODO: provide an in-screen panel providing event detail feedback.
	  *
	  * @property {String} [debugGridColor='#437AB2']
	  *
	  * @property {Number} [blendTime=0]
	  *     Specifies the duration of animation as higher or lower level tiles are
	  *     replacing the existing tile.
	  *
	  * @property {Boolean} [alwaysBlend=false]
	  *     Forces the tile to always blend.  By default the tiles skip blending
	  *     when the blendTime is surpassed and the current animation frame would
	  *     not complete the blend.
	  *
	  * @property {Boolean} [autoHideControls=true]
	  *     If the user stops interacting with the viewport, fade the navigation
	  *     controls.  Useful for presentation since the controls are by default
	  *     floated on top of the image the user is viewing.
	  *
	  * @property {Boolean} [immediateRender=false]
	  *     Render the best closest level first, ignoring the lowering levels which
	  *     provide the effect of very blurry to sharp. It is recommended to change
	  *     setting to true for mobile devices.
	  *
	  * @property {Number} [defaultZoomLevel=0]
	  *     Zoom level to use when image is first opened or the home button is clicked.
	  *     If 0, adjusts to fit viewer.
	  *
	  * @property {Number} [opacity=1]
	  *     Default opacity of the tiled images (1=opaque, 0=transparent)
	  *
	  * @property {String} [compositeOperation=null]
	  *     Valid values are 'source-over', 'source-atop', 'source-in', 'source-out',
	  *     'destination-over', 'destination-atop', 'destination-in',
	  *     'destination-out', 'lighter', 'copy' or 'xor'
	  *
	  * @property {String|CanvasGradient|CanvasPattern|Function} [placeholderFillStyle=null]
	  *     Draws a colored rectangle behind the tile if it is not loaded yet.
	  *     You can pass a CSS color value like "#FF8800".
	  *     When passing a function the tiledImage and canvas context are available as argument which is useful when you draw a gradient or pattern.
	  *
	  * @property {Number} [degrees=0]
	  *     Initial rotation.
	  *
	  * @property {Number} [minZoomLevel=null]
	  *
	  * @property {Number} [maxZoomLevel=null]
	  *
	  * @property {Boolean} [homeFillsViewer=false]
	  *     Make the 'home' button fill the viewer and clip the image, instead
	  *     of fitting the image to the viewer and letterboxing.
	  *
	  * @property {Boolean} [panHorizontal=true]
	  *     Allow horizontal pan.
	  *
	  * @property {Boolean} [panVertical=true]
	  *     Allow vertical pan.
	  *
	  * @property {Boolean} [constrainDuringPan=false]
	  *
	  * @property {Boolean} [wrapHorizontal=false]
	  *     Set to true to force the image to wrap horizontally within the viewport.
	  *     Useful for maps or images representing the surface of a sphere or cylinder.
	  *
	  * @property {Boolean} [wrapVertical=false]
	  *     Set to true to force the image to wrap vertically within the viewport.
	  *     Useful for maps or images representing the surface of a sphere or cylinder.
	  *
	  * @property {Number} [minZoomImageRatio=0.9]
	  *     The minimum percentage ( expressed as a number between 0 and 1 ) of
	  *     the viewport height or width at which the zoom out will be constrained.
	  *     Setting it to 0, for example will allow you to zoom out infinity.
	  *
	  * @property {Number} [maxZoomPixelRatio=1.1]
	  *     The maximum ratio to allow a zoom-in to affect the highest level pixel
	  *     ratio. This can be set to Infinity to allow 'infinite' zooming into the
	  *     image though it is less effective visually if the HTML5 Canvas is not
	  *     availble on the viewing device.
	  *
	  * @property {Number} [smoothTileEdgesMinZoom=1.1]
	  *     A zoom percentage ( where 1 is 100% ) of the highest resolution level.
	  *     When zoomed in beyond this value alternative compositing will be used to
	  *     smooth out the edges between tiles. This will have a performance impact.
	  *     Can be set to Infinity to turn it off.
	  *     Note: This setting is ignored on iOS devices due to a known bug (See {@link https://github.com/openseadragon/openseadragon/issues/952})
	  *
	  * @property {Boolean} [iOSDevice=?]
	  *     True if running on an iOS device, false otherwise.
	  *     Used to disable certain features that behave differently on iOS devices.
	  *
	  * @property {Boolean} [autoResize=true]
	  *     Set to false to prevent polling for viewer size changes. Useful for providing custom resize behavior.
	  *
	  * @property {Boolean} [preserveImageSizeOnResize=false]
	  *     Set to true to have the image size preserved when the viewer is resized. This requires autoResize=true (default).
	  *
	  * @property {Number} [minScrollDeltaTime=50]
	  *     Number of milliseconds between canvas-scroll events. This value helps normalize the rate of canvas-scroll
	  *     events between different devices, causing the faster devices to slow down enough to make the zoom control
	  *     more manageable.
	  *
	  * @property {Number} [pixelsPerWheelLine=40]
	  *     For pixel-resolution scrolling devices, the number of pixels equal to one scroll line.
	  *
	  * @property {Number} [visibilityRatio=0.5]
	  *     The percentage ( as a number from 0 to 1 ) of the source image which
	  *     must be kept within the viewport.  If the image is dragged beyond that
	  *     limit, it will 'bounce' back until the minimum visibility ratio is
	  *     achieved.  Setting this to 0 and wrapHorizontal ( or wrapVertical ) to
	  *     true will provide the effect of an infinitely scrolling viewport.
	  *
	  * @property {Object} [viewportMargins={}]
	  *     Pushes the "home" region in from the sides by the specified amounts.
	  *     Possible subproperties (Numbers, in screen coordinates): left, top, right, bottom.
	  *
	  * @property {Number} [imageLoaderLimit=0]
	  *     The maximum number of image requests to make concurrently. By default
	  *     it is set to 0 allowing the browser to make the maximum number of
	  *     image requests in parallel as allowed by the browsers policy.
	  *
	  * @property {Number} [clickTimeThreshold=300]
	  *      The number of milliseconds within which a pointer down-up event combination
	  *      will be treated as a click gesture.
	  *
	  * @property {Number} [clickDistThreshold=5]
	  *      The maximum distance allowed between a pointer down event and a pointer up event
	  *      to be treated as a click gesture.
	  *
	  * @property {Number} [dblClickTimeThreshold=300]
	  *      The number of milliseconds within which two pointer down-up event combinations
	  *      will be treated as a double-click gesture.
	  *
	  * @property {Number} [dblClickDistThreshold=20]
	  *      The maximum distance allowed between two pointer click events
	  *      to be treated as a double-click gesture.
	  *
	  * @property {Number} [springStiffness=6.5]
	  *
	  * @property {Number} [animationTime=1.2]
	  *     Specifies the animation duration per each {@link OpenSeadragon.Spring}
	  *     which occur when the image is dragged or zoomed.
	  *
	  * @property {OpenSeadragon.GestureSettings} [gestureSettingsMouse]
	  *     Settings for gestures generated by a mouse pointer device. (See {@link OpenSeadragon.GestureSettings})
	  * @property {Boolean} [gestureSettingsMouse.scrollToZoom=true] - Zoom on scroll gesture
	  * @property {Boolean} [gestureSettingsMouse.clickToZoom=true] - Zoom on click gesture
	  * @property {Boolean} [gestureSettingsMouse.dblClickToZoom=false] - Zoom on double-click gesture. Note: If set to true
	  *     then clickToZoom should be set to false to prevent multiple zooms.
	  * @property {Boolean} [gestureSettingsMouse.pinchToZoom=false] - Zoom on pinch gesture
	  * @property {Boolean} [gestureSettingsMouse.flickEnabled=false] - Enable flick gesture
	  * @property {Number} [gestureSettingsMouse.flickMinSpeed=120] - If flickEnabled is true, the minimum speed to initiate a flick gesture (pixels-per-second)
	  * @property {Number} [gestureSettingsMouse.flickMomentum=0.25] - If flickEnabled is true, the momentum factor for the flick gesture
	  * @property {Boolean} [gestureSettingsMouse.pinchRotate=false] - If pinchRotate is true, the user will have the ability to rotate the image using their fingers.
	  *
	  * @property {OpenSeadragon.GestureSettings} [gestureSettingsTouch]
	  *     Settings for gestures generated by a touch pointer device. (See {@link OpenSeadragon.GestureSettings})
	  * @property {Boolean} [gestureSettingsTouch.scrollToZoom=false] - Zoom on scroll gesture
	  * @property {Boolean} [gestureSettingsTouch.clickToZoom=false] - Zoom on click gesture
	  * @property {Boolean} [gestureSettingsTouch.dblClickToZoom=true] - Zoom on double-click gesture. Note: If set to true
	  *     then clickToZoom should be set to false to prevent multiple zooms.
	  * @property {Boolean} [gestureSettingsTouch.pinchToZoom=true] - Zoom on pinch gesture
	  * @property {Boolean} [gestureSettingsTouch.flickEnabled=true] - Enable flick gesture
	  * @property {Number} [gestureSettingsTouch.flickMinSpeed=120] - If flickEnabled is true, the minimum speed to initiate a flick gesture (pixels-per-second)
	  * @property {Number} [gestureSettingsTouch.flickMomentum=0.25] - If flickEnabled is true, the momentum factor for the flick gesture
	  * @property {Boolean} [gestureSettingsTouch.pinchRotate=false] - If pinchRotate is true, the user will have the ability to rotate the image using their fingers.
	  *
	  * @property {OpenSeadragon.GestureSettings} [gestureSettingsPen]
	  *     Settings for gestures generated by a pen pointer device. (See {@link OpenSeadragon.GestureSettings})
	  * @property {Boolean} [gestureSettingsPen.scrollToZoom=false] - Zoom on scroll gesture
	  * @property {Boolean} [gestureSettingsPen.clickToZoom=true] - Zoom on click gesture
	  * @property {Boolean} [gestureSettingsPen.dblClickToZoom=false] - Zoom on double-click gesture. Note: If set to true
	  *     then clickToZoom should be set to false to prevent multiple zooms.
	  * @property {Boolean} [gestureSettingsPen.pinchToZoom=false] - Zoom on pinch gesture
	  * @property {Boolean} [gestureSettingsPen.flickEnabled=false] - Enable flick gesture
	  * @property {Number} [gestureSettingsPen.flickMinSpeed=120] - If flickEnabled is true, the minimum speed to initiate a flick gesture (pixels-per-second)
	  * @property {Number} [gestureSettingsPen.flickMomentum=0.25] - If flickEnabled is true, the momentum factor for the flick gesture
	  * @property {Boolean} [gestureSettingsPen.pinchRotate=false] - If pinchRotate is true, the user will have the ability to rotate the image using their fingers.
	  *
	  * @property {OpenSeadragon.GestureSettings} [gestureSettingsUnknown]
	  *     Settings for gestures generated by unknown pointer devices. (See {@link OpenSeadragon.GestureSettings})
	  * @property {Boolean} [gestureSettingsUnknown.scrollToZoom=true] - Zoom on scroll gesture
	  * @property {Boolean} [gestureSettingsUnknown.clickToZoom=false] - Zoom on click gesture
	  * @property {Boolean} [gestureSettingsUnknown.dblClickToZoom=true] - Zoom on double-click gesture. Note: If set to true
	  *     then clickToZoom should be set to false to prevent multiple zooms.
	  * @property {Boolean} [gestureSettingsUnknown.pinchToZoom=true] - Zoom on pinch gesture
	  * @property {Boolean} [gestureSettingsUnknown.flickEnabled=true] - Enable flick gesture
	  * @property {Number} [gestureSettingsUnknown.flickMinSpeed=120] - If flickEnabled is true, the minimum speed to initiate a flick gesture (pixels-per-second)
	  * @property {Number} [gestureSettingsUnknown.flickMomentum=0.25] - If flickEnabled is true, the momentum factor for the flick gesture
	  * @property {Boolean} [gestureSettingsUnknown.pinchRotate=false] - If pinchRotate is true, the user will have the ability to rotate the image using their fingers.
	  *
	  * @property {Number} [zoomPerClick=2.0]
	  *     The "zoom distance" per mouse click or touch tap. <em><strong>Note:</strong> Setting this to 1.0 effectively disables the click-to-zoom feature (also see gestureSettings[Mouse|Touch|Pen].clickToZoom/dblClickToZoom).</em>
	  *
	  * @property {Number} [zoomPerScroll=1.2]
	  *     The "zoom distance" per mouse scroll or touch pinch. <em><strong>Note:</strong> Setting this to 1.0 effectively disables the mouse-wheel zoom feature (also see gestureSettings[Mouse|Touch|Pen].scrollToZoom}).</em>
	  *
	  * @property {Number} [zoomPerSecond=1.0]
	  *     The number of seconds to animate a single zoom event over.
	  *
	  * @property {Boolean} [showNavigator=false]
	  *     Set to true to make the navigator minimap appear.
	  *
	  * @property {String} [navigatorId=navigator-GENERATED DATE]
	  *     The ID of a div to hold the navigator minimap.
	  *     If an ID is specified, the navigatorPosition, navigatorSizeRatio, navigatorMaintainSizeRatio, navigator[Top|Left|Height|Width] and navigatorAutoFade options will be ignored.
	  *     If an ID is not specified, a div element will be generated and placed on top of the main image.
	  *
	  * @property {String} [navigatorPosition='TOP_RIGHT']
	  *     Valid values are 'TOP_LEFT', 'TOP_RIGHT', 'BOTTOM_LEFT', 'BOTTOM_RIGHT', or 'ABSOLUTE'.<br>
	  *     If 'ABSOLUTE' is specified, then navigator[Top|Left|Height|Width] determines the size and position of the navigator minimap in the viewer, and navigatorSizeRatio and navigatorMaintainSizeRatio are ignored.<br>
	  *     For 'TOP_LEFT', 'TOP_RIGHT', 'BOTTOM_LEFT', and 'BOTTOM_RIGHT', the navigatorSizeRatio or navigator[Height|Width] values determine the size of the navigator minimap.
	  *
	  * @property {Number} [navigatorSizeRatio=0.2]
	  *     Ratio of navigator size to viewer size. Ignored if navigator[Height|Width] are specified.
	  *
	  * @property {Boolean} [navigatorMaintainSizeRatio=false]
	  *     If true, the navigator minimap is resized (using navigatorSizeRatio) when the viewer size changes.
	  *
	  * @property {Number|String} [navigatorTop=null]
	  *     Specifies the location of the navigator minimap (see navigatorPosition).
	  *
	  * @property {Number|String} [navigatorLeft=null]
	  *     Specifies the location of the navigator minimap (see navigatorPosition).
	  *
	  * @property {Number|String} [navigatorHeight=null]
	  *     Specifies the size of the navigator minimap (see navigatorPosition).
	  *     If specified, navigatorSizeRatio and navigatorMaintainSizeRatio are ignored.
	  *
	  * @property {Number|String} [navigatorWidth=null]
	  *     Specifies the size of the navigator minimap (see navigatorPosition).
	  *     If specified, navigatorSizeRatio and navigatorMaintainSizeRatio are ignored.
	  *
	  * @property {Boolean} [navigatorAutoResize=true]
	  *     Set to false to prevent polling for navigator size changes. Useful for providing custom resize behavior.
	  *     Setting to false can also improve performance when the navigator is configured to a fixed size.
	  *
	  * @property {Boolean} [navigatorAutoFade=true]
	  *     If the user stops interacting with the viewport, fade the navigator minimap.
	  *     Setting to false will make the navigator minimap always visible.
	  *
	  * @property {Boolean} [navigatorRotate=true]
	  *     If true, the navigator will be rotated together with the viewer.
	  *
	  * @property {Number} [controlsFadeDelay=2000]
	  *     The number of milliseconds to wait once the user has stopped interacting
	  *     with the interface before begining to fade the controls. Assumes
	  *     showNavigationControl and autoHideControls are both true.
	  *
	  * @property {Number} [controlsFadeLength=1500]
	  *     The number of milliseconds to animate the controls fading out.
	  *
	  * @property {Number} [maxImageCacheCount=200]
	  *     The max number of images we should keep in memory (per drawer).
	  *
	  * @property {Number} [timeout=30000]
	  *
	  * @property {Boolean} [useCanvas=true]
	  *     Set to false to not use an HTML canvas element for image rendering even if canvas is supported.
	  *
	  * @property {Number} [minPixelRatio=0.5]
	  *     The higher the minPixelRatio, the lower the quality of the image that
	  *     is considered sufficient to stop rendering a given zoom level.  For
	  *     example, if you are targeting mobile devices with less bandwith you may
	  *     try setting this to 1.5 or higher.
	  *
	  * @property {Boolean} [mouseNavEnabled=true]
	  *     Is the user able to interact with the image via mouse or touch. Default
	  *     interactions include draging the image in a plane, and zooming in toward
	  *     and away from the image.
	  *
	  * @property {Boolean} [showNavigationControl=true]
	  *     Set to false to prevent the appearance of the default navigation controls.<br>
	  *     Note that if set to false, the customs buttons set by the options
	  *     zoomInButton, zoomOutButton etc, are rendered inactive.
	  *
	  * @property {OpenSeadragon.ControlAnchor} [navigationControlAnchor=TOP_LEFT]
	  *     Placement of the default navigation controls.
	  *     To set the placement of the sequence controls, see the
	  *     sequenceControlAnchor option.
	  *
	  * @property {Boolean} [showZoomControl=true]
	  *     If true then + and - buttons to zoom in and out are displayed.<br>
	  *     Note: {@link OpenSeadragon.Options.showNavigationControl} is overriding
	  *     this setting when set to false.
	  *
	  * @property {Boolean} [showHomeControl=true]
	  *     If true then the 'Go home' button is displayed to go back to the original
	  *     zoom and pan.<br>
	  *     Note: {@link OpenSeadragon.Options.showNavigationControl} is overriding
	  *     this setting when set to false.
	  *
	  * @property {Boolean} [showFullPageControl=true]
	  *     If true then the 'Toggle full page' button is displayed to switch
	  *     between full page and normal mode.<br>
	  *     Note: {@link OpenSeadragon.Options.showNavigationControl} is overriding
	  *     this setting when set to false.
	  *
	  * @property {Boolean} [showRotationControl=false]
	  *     If true then the rotate left/right controls will be displayed as part of the
	  *     standard controls. This is also subject to the browser support for rotate
	  *     (e.g. viewer.drawer.canRotate()).<br>
	  *     Note: {@link OpenSeadragon.Options.showNavigationControl} is overriding
	  *     this setting when set to false.
	  *
	  * @property {Boolean} [showSequenceControl=true]
	  *     If sequenceMode is true, then provide buttons for navigating forward and
	  *     backward through the images.
	  *
	  * @property {OpenSeadragon.ControlAnchor} [sequenceControlAnchor=TOP_LEFT]
	  *     Placement of the default sequence controls.
	  *
	  * @property {Boolean} [navPrevNextWrap=false]
	  *     If true then the 'previous' button will wrap to the last image when
	  *     viewing the first image and the 'next' button will wrap to the first
	  *     image when viewing the last image.
	  *
	  * @property {String} zoomInButton
	  *     Set the id of the custom 'Zoom in' button to use.
	  *     This is useful to have a custom button anywhere in the web page.<br>
	  *     To only change the button images, consider using
	  *     {@link OpenSeadragon.Options.navImages}
	  *
	  * @property {String} zoomOutButton
	  *     Set the id of the custom 'Zoom out' button to use.
	  *     This is useful to have a custom button anywhere in the web page.<br>
	  *     To only change the button images, consider using
	  *     {@link OpenSeadragon.Options.navImages}
	  *
	  * @property {String} homeButton
	  *     Set the id of the custom 'Go home' button to use.
	  *     This is useful to have a custom button anywhere in the web page.<br>
	  *     To only change the button images, consider using
	  *     {@link OpenSeadragon.Options.navImages}
	  *
	  * @property {String} fullPageButton
	  *     Set the id of the custom 'Toggle full page' button to use.
	  *     This is useful to have a custom button anywhere in the web page.<br>
	  *     To only change the button images, consider using
	  *     {@link OpenSeadragon.Options.navImages}
	  *
	  * @property {String} rotateLeftButton
	  *     Set the id of the custom 'Rotate left' button to use.
	  *     This is useful to have a custom button anywhere in the web page.<br>
	  *     To only change the button images, consider using
	  *     {@link OpenSeadragon.Options.navImages}
	  *
	  * @property {String} rotateRightButton
	  *     Set the id of the custom 'Rotate right' button to use.
	  *     This is useful to have a custom button anywhere in the web page.<br>
	  *     To only change the button images, consider using
	  *     {@link OpenSeadragon.Options.navImages}
	  *
	  * @property {String} previousButton
	  *     Set the id of the custom 'Previous page' button to use.
	  *     This is useful to have a custom button anywhere in the web page.<br>
	  *     To only change the button images, consider using
	  *     {@link OpenSeadragon.Options.navImages}
	  *
	  * @property {String} nextButton
	  *     Set the id of the custom 'Next page' button to use.
	  *     This is useful to have a custom button anywhere in the web page.<br>
	  *     To only change the button images, consider using
	  *     {@link OpenSeadragon.Options.navImages}
	  *
	  * @property {Boolean} [sequenceMode=false]
	  *     Set to true to have the viewer treat your tilesources as a sequence of images to
	  *     be opened one at a time rather than all at once.
	  *
	  * @property {Number} [initialPage=0]
	  *     If sequenceMode is true, display this page initially.
	  *
	  * @property {Boolean} [preserveViewport=false]
	  *     If sequenceMode is true, then normally navigating through each image resets the
	  *     viewport to 'home' position.  If preserveViewport is set to true, then the viewport
	  *     position is preserved when navigating between images in the sequence.
	  *
	  * @property {Boolean} [preserveOverlays=false]
	  *     If sequenceMode is true, then normally navigating through each image
	  *     resets the overlays.
	  *     If preserveOverlays is set to true, then the overlays added with {@link OpenSeadragon.Viewer#addOverlay}
	  *     are preserved when navigating between images in the sequence.
	  *     Note: setting preserveOverlays overrides any overlays specified in the global
	  *     "overlays" option for the Viewer. It's also not compatible with specifying
	  *     per-tileSource overlays via the options, as those overlays will persist
	  *     even after the tileSource is closed.
	  *
	  * @property {Boolean} [showReferenceStrip=false]
	  *     If sequenceMode is true, then display a scrolling strip of image thumbnails for
	  *     navigating through the images.
	  *
	  * @property {String} [referenceStripScroll='horizontal']
	  *
	  * @property {Element} [referenceStripElement=null]
	  *
	  * @property {Number} [referenceStripHeight=null]
	  *
	  * @property {Number} [referenceStripWidth=null]
	  *
	  * @property {String} [referenceStripPosition='BOTTOM_LEFT']
	  *
	  * @property {Number} [referenceStripSizeRatio=0.2]
	  *
	  * @property {Boolean} [collectionMode=false]
	  *     Set to true to have the viewer arrange your TiledImages in a grid or line.
	  *
	  * @property {Number} [collectionRows=3]
	  *     If collectionMode is true, specifies how many rows the grid should have. Use 1 to make a line.
	  *     If collectionLayout is 'vertical', specifies how many columns instead.
	  *
	  * @property {Number} [collectionColumns=0]
	  *     If collectionMode is true, specifies how many columns the grid should have. Use 1 to make a line.
	  *     If collectionLayout is 'vertical', specifies how many rows instead. Ignored if collectionRows is not set to a falsy value.
	  *
	  * @property {String} [collectionLayout='horizontal']
	  *     If collectionMode is true, specifies whether to arrange vertically or horizontally.
	  *
	  * @property {Number} [collectionTileSize=800]
	  *     If collectionMode is true, specifies the size, in viewport coordinates, for each TiledImage to fit into.
	  *     The TiledImage will be centered within a square of the specified size.
	  *
	  * @property {Number} [collectionTileMargin=80]
	  *     If collectionMode is true, specifies the margin, in viewport coordinates, between each TiledImage.
	  *
	  * @property {String|Boolean} [crossOriginPolicy=false]
	  *     Valid values are 'Anonymous', 'use-credentials', and false. If false, canvas requests will
	  *     not use CORS, and the canvas will be tainted.
	  *
	  * @property {Boolean} [ajaxWithCredentials=false]
	  *     Whether to set the withCredentials XHR flag for AJAX requests (when loading tile sources).
	  *     Note that this can be overridden at the {@link OpenSeadragon.TileSource} level.
	  *
	  */
	
	 /**
	  * Settings for gestures generated by a pointer device.
	  *
	  * @typedef {Object} GestureSettings
	  * @memberof OpenSeadragon
	  *
	  * @property {Boolean} scrollToZoom
	  *     Set to false to disable zooming on scroll gestures.
	  *
	  * @property {Boolean} clickToZoom
	  *     Set to false to disable zooming on click gestures.
	  *
	  * @property {Boolean} dblClickToZoom
	  *     Set to false to disable zooming on double-click gestures. Note: If set to true
	  *     then clickToZoom should be set to false to prevent multiple zooms.
	  *
	  * @property {Boolean} pinchToZoom
	  *     Set to false to disable zooming on pinch gestures.
	  *
	  * @property {Boolean} flickEnabled
	  *     Set to false to disable the kinetic panning effect (flick) at the end of a drag gesture.
	  *
	  * @property {Number} flickMinSpeed
	  *     If flickEnabled is true, the minimum speed (in pixels-per-second) required to cause the kinetic panning effect (flick) at the end of a drag gesture.
	  *
	  * @property {Number} flickMomentum
	  *     If flickEnabled is true, a constant multiplied by the velocity to determine the distance of the kinetic panning effect (flick) at the end of a drag gesture.
	  *     A larger value will make the flick feel "lighter", while a smaller value will make the flick feel "heavier".
	  *     Note: springStiffness and animationTime also affect the "spring" used to stop the flick animation.
	  *
	  */
	
	/**
	  * The names for the image resources used for the image navigation buttons.
	  *
	  * @typedef {Object} NavImages
	  * @memberof OpenSeadragon
	  *
	  * @property {Object} zoomIn - Images for the zoom-in button.
	  * @property {String} zoomIn.REST
	  * @property {String} zoomIn.GROUP
	  * @property {String} zoomIn.HOVER
	  * @property {String} zoomIn.DOWN
	  *
	  * @property {Object} zoomOut - Images for the zoom-out button.
	  * @property {String} zoomOut.REST
	  * @property {String} zoomOut.GROUP
	  * @property {String} zoomOut.HOVER
	  * @property {String} zoomOut.DOWN
	  *
	  * @property {Object} home - Images for the home button.
	  * @property {String} home.REST
	  * @property {String} home.GROUP
	  * @property {String} home.HOVER
	  * @property {String} home.DOWN
	  *
	  * @property {Object} fullpage - Images for the full-page button.
	  * @property {String} fullpage.REST
	  * @property {String} fullpage.GROUP
	  * @property {String} fullpage.HOVER
	  * @property {String} fullpage.DOWN
	  *
	  * @property {Object} rotateleft - Images for the rotate left button.
	  * @property {String} rotateleft.REST
	  * @property {String} rotateleft.GROUP
	  * @property {String} rotateleft.HOVER
	  * @property {String} rotateleft.DOWN
	  *
	  * @property {Object} rotateright - Images for the rotate right button.
	  * @property {String} rotateright.REST
	  * @property {String} rotateright.GROUP
	  * @property {String} rotateright.HOVER
	  * @property {String} rotateright.DOWN
	  *
	  * @property {Object} previous - Images for the previous button.
	  * @property {String} previous.REST
	  * @property {String} previous.GROUP
	  * @property {String} previous.HOVER
	  * @property {String} previous.DOWN
	  *
	  * @property {Object} next - Images for the next button.
	  * @property {String} next.REST
	  * @property {String} next.GROUP
	  * @property {String} next.HOVER
	  * @property {String} next.DOWN
	  *
	  */
	
	
	 /**
	  * This function serves as a single point of instantiation for an {@link OpenSeadragon.Viewer}, including all
	  * combinations of out-of-the-box configurable features.
	  *
	  * @param {OpenSeadragon.Options} options - Viewer options.
	  * @returns {OpenSeadragon.Viewer}
	  */
	window.OpenSeadragon = window.OpenSeadragon || function( options ){
	
	    return new OpenSeadragon.Viewer( options );
	
	};
	
	if (true) {
	   !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
	       return (window.OpenSeadragon);
	   }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}
	
	
	(function( $ ){
	
	
	    /**
	     * The OpenSeadragon version.
	     *
	     * @member {Object} OpenSeadragon.version
	     * @property {String} versionStr - The version number as a string ('major.minor.revision').
	     * @property {Number} major - The major version number.
	     * @property {Number} minor - The minor version number.
	     * @property {Number} revision - The revision number.
	     * @since 1.0.0
	     */
	    $.version = {
	        versionStr: '2.2.1',
	        major: parseInt('2', 10),
	        minor: parseInt('2', 10),
	        revision: parseInt('1', 10)
	    };
	
	
	    /**
	     * Taken from jquery 1.6.1
	     * [[Class]] -> type pairs
	     * @private
	     */
	    var class2type = {
	            '[object Boolean]':     'boolean',
	            '[object Number]':      'number',
	            '[object String]':      'string',
	            '[object Function]':    'function',
	            '[object Array]':       'array',
	            '[object Date]':        'date',
	            '[object RegExp]':      'regexp',
	            '[object Object]':      'object'
	        },
	        // Save a reference to some core methods
	        toString    = Object.prototype.toString,
	        hasOwn      = Object.prototype.hasOwnProperty;
	
	    /**
	     * Taken from jQuery 1.6.1
	     * @function isFunction
	     * @memberof OpenSeadragon
	     * @see {@link http://www.jquery.com/ jQuery}
	     */
	    $.isFunction = function( obj ) {
	        return $.type(obj) === "function";
	    };
	
	
	    /**
	     * Taken from jQuery 1.6.1
	     * @function isArray
	     * @memberof OpenSeadragon
	     * @see {@link http://www.jquery.com/ jQuery}
	     */
	    $.isArray = Array.isArray || function( obj ) {
	        return $.type(obj) === "array";
	    };
	
	
	    /**
	     * A crude way of determining if an object is a window.
	     * Taken from jQuery 1.6.1
	     * @function isWindow
	     * @memberof OpenSeadragon
	     * @see {@link http://www.jquery.com/ jQuery}
	     */
	    $.isWindow = function( obj ) {
	        return obj && typeof obj === "object" && "setInterval" in obj;
	    };
	
	
	    /**
	     * Taken from jQuery 1.6.1
	     * @function type
	     * @memberof OpenSeadragon
	     * @see {@link http://www.jquery.com/ jQuery}
	     */
	    $.type = function( obj ) {
	        return ( obj === null ) || ( obj === undefined ) ?
	            String( obj ) :
	            class2type[ toString.call(obj) ] || "object";
	    };
	
	
	    /**
	     * Taken from jQuery 1.6.1
	     * @function isPlainObject
	     * @memberof OpenSeadragon
	     * @see {@link http://www.jquery.com/ jQuery}
	     */
	    $.isPlainObject = function( obj ) {
	        // Must be an Object.
	        // Because of IE, we also have to check the presence of the constructor property.
	        // Make sure that DOM nodes and window objects don't pass through, as well
	        if ( !obj || OpenSeadragon.type(obj) !== "object" || obj.nodeType || $.isWindow( obj ) ) {
	            return false;
	        }
	
	        // Not own constructor property must be Object
	        if ( obj.constructor &&
	            !hasOwn.call(obj, "constructor") &&
	            !hasOwn.call(obj.constructor.prototype, "isPrototypeOf") ) {
	            return false;
	        }
	
	        // Own properties are enumerated firstly, so to speed up,
	        // if last one is own, then all properties are own.
	
	        var lastKey;
	        for (var key in obj ) {
	            lastKey = key;
	        }
	
	        return lastKey === undefined || hasOwn.call( obj, lastKey );
	    };
	
	
	    /**
	     * Taken from jQuery 1.6.1
	     * @function isEmptyObject
	     * @memberof OpenSeadragon
	     * @see {@link http://www.jquery.com/ jQuery}
	     */
	    $.isEmptyObject = function( obj ) {
	        for ( var name in obj ) {
	            return false;
	        }
	        return true;
	    };
	
	    /**
	     * Shim around Object.freeze. Does nothing if Object.freeze is not supported.
	     * @param {Object} obj The object to freeze.
	     * @return {Object} obj The frozen object.
	     */
	    $.freezeObject = function(obj) {
	        if (Object.freeze) {
	            $.freezeObject = Object.freeze;
	        } else {
	            $.freezeObject = function(obj) {
	                return obj;
	            };
	        }
	        return $.freezeObject(obj);
	    };
	
	    /**
	     * True if the browser supports the HTML5 canvas element
	     * @member {Boolean} supportsCanvas
	     * @memberof OpenSeadragon
	     */
	    $.supportsCanvas = (function () {
	        var canvasElement = document.createElement( 'canvas' );
	        return !!( $.isFunction( canvasElement.getContext ) &&
	                    canvasElement.getContext( '2d' ) );
	    }());
	
	    /**
	     * Test whether the submitted canvas is tainted or not.
	     * @argument {Canvas} canvas The canvas to test.
	     * @returns {Boolean} True if the canvas is tainted.
	     */
	    $.isCanvasTainted = function(canvas) {
	        var isTainted = false;
	        try {
	            // We test if the canvas is tainted by retrieving data from it.
	            // An exception will be raised if the canvas is tainted.
	            var data = canvas.getContext('2d').getImageData(0, 0, 1, 1);
	        } catch (e) {
	            isTainted = true;
	        }
	        return isTainted;
	    };
	
	    /**
	     * A ratio comparing the device screen's pixel density to the canvas's backing store pixel density. Defaults to 1 if canvas isn't supported by the browser.
	     * @member {Number} pixelDensityRatio
	     * @memberof OpenSeadragon
	     */
	    $.pixelDensityRatio = (function () {
	        if ( $.supportsCanvas ) {
	            var context = document.createElement('canvas').getContext('2d');
	            var devicePixelRatio = window.devicePixelRatio || 1;
	            var backingStoreRatio = context.webkitBackingStorePixelRatio ||
	                                    context.mozBackingStorePixelRatio ||
	                                    context.msBackingStorePixelRatio ||
	                                    context.oBackingStorePixelRatio ||
	                                    context.backingStorePixelRatio || 1;
	            return devicePixelRatio / backingStoreRatio;
	        } else {
	            return 1;
	        }
	    }());
	
	}( OpenSeadragon ));
	
	/**
	 *  This closure defines all static methods available to the OpenSeadragon
	 *  namespace.  Many, if not most, are taked directly from jQuery for use
	 *  to simplify and reduce common programming patterns.  More static methods
	 *  from jQuery may eventually make their way into this though we are
	 *  attempting to avoid an explicit dependency on jQuery only because
	 *  OpenSeadragon is a broadly useful code base and would be made less broad
	 *  by requiring jQuery fully.
	 *
	 *  Some static methods have also been refactored from the original OpenSeadragon
	 *  project.
	 */
	(function( $ ){
	
	    /**
	     * Taken from jQuery 1.6.1
	     * @function extend
	     * @memberof OpenSeadragon
	     * @see {@link http://www.jquery.com/ jQuery}
	     */
	    $.extend = function() {
	        var options,
	            name,
	            src,
	            copy,
	            copyIsArray,
	            clone,
	            target  = arguments[ 0 ] || {},
	            length  = arguments.length,
	            deep    = false,
	            i       = 1;
	
	        // Handle a deep copy situation
	        if ( typeof target === "boolean" ) {
	            deep    = target;
	            target  = arguments[ 1 ] || {};
	            // skip the boolean and the target
	            i = 2;
	        }
	
	        // Handle case when target is a string or something (possible in deep copy)
	        if ( typeof target !== "object" && !OpenSeadragon.isFunction( target ) ) {
	            target = {};
	        }
	
	        // extend jQuery itself if only one argument is passed
	        if ( length === i ) {
	            target = this;
	            --i;
	        }
	
	        for ( ; i < length; i++ ) {
	            // Only deal with non-null/undefined values
	            options = arguments[ i ];
	            if ( options !== null || options !== undefined ) {
	                // Extend the base object
	                for ( name in options ) {
	                    src = target[ name ];
	                    copy = options[ name ];
	
	                    // Prevent never-ending loop
	                    if ( target === copy ) {
	                        continue;
	                    }
	
	                    // Recurse if we're merging plain objects or arrays
	                    if ( deep && copy && ( OpenSeadragon.isPlainObject( copy ) || ( copyIsArray = OpenSeadragon.isArray( copy ) ) ) ) {
	                        if ( copyIsArray ) {
	                            copyIsArray = false;
	                            clone = src && OpenSeadragon.isArray( src ) ? src : [];
	
	                        } else {
	                            clone = src && OpenSeadragon.isPlainObject( src ) ? src : {};
	                        }
	
	                        // Never move original objects, clone them
	                        target[ name ] = OpenSeadragon.extend( deep, clone, copy );
	
	                    // Don't bring in undefined values
	                    } else if ( copy !== undefined ) {
	                        target[ name ] = copy;
	                    }
	                }
	            }
	        }
	
	        // Return the modified object
	        return target;
	    };
	
	    var isIOSDevice = function () {
	        if (typeof navigator !== 'object') {
	            return false;
	        }
	        var userAgent = navigator.userAgent;
	        if (typeof userAgent !== 'string') {
	            return false;
	        }
	        return userAgent.indexOf('iPhone') !== -1 ||
	               userAgent.indexOf('iPad') !== -1 ||
	               userAgent.indexOf('iPod') !== -1;
	    };
	
	    $.extend( $, /** @lends OpenSeadragon */{
	        /**
	         * The default values for the optional settings documented at {@link OpenSeadragon.Options}.
	         * @static
	         * @type {Object}
	         */
	        DEFAULT_SETTINGS: {
	            //DATA SOURCE DETAILS
	            xmlPath:                null,
	            tileSources:            null,
	            tileHost:               null,
	            initialPage:            0,
	            crossOriginPolicy:      false,
	            ajaxWithCredentials:    false,
	
	            //PAN AND ZOOM SETTINGS AND CONSTRAINTS
	            panHorizontal:          true,
	            panVertical:            true,
	            constrainDuringPan:     false,
	            wrapHorizontal:         false,
	            wrapVertical:           false,
	            visibilityRatio:        0.5, //-> how much of the viewer can be negative space
	            minPixelRatio:          0.5, //->closer to 0 draws tiles meant for a higher zoom at this zoom
	            defaultZoomLevel:       0,
	            minZoomLevel:           null,
	            maxZoomLevel:           null,
	            homeFillsViewer:        false,
	
	            //UI RESPONSIVENESS AND FEEL
	            clickTimeThreshold:     300,
	            clickDistThreshold:     5,
	            dblClickTimeThreshold:  300,
	            dblClickDistThreshold:  20,
	            springStiffness:        6.5,
	            animationTime:          1.2,
	            gestureSettingsMouse:   { scrollToZoom: true,  clickToZoom: true,  dblClickToZoom: false, pinchToZoom: false, flickEnabled: false, flickMinSpeed: 120, flickMomentum: 0.25, pinchRotate: false },
	            gestureSettingsTouch:   { scrollToZoom: false, clickToZoom: false, dblClickToZoom: true,  pinchToZoom: true,  flickEnabled: true,  flickMinSpeed: 120, flickMomentum: 0.25, pinchRotate: false },
	            gestureSettingsPen:     { scrollToZoom: false, clickToZoom: true,  dblClickToZoom: false, pinchToZoom: false, flickEnabled: false, flickMinSpeed: 120, flickMomentum: 0.25, pinchRotate: false },
	            gestureSettingsUnknown: { scrollToZoom: false, clickToZoom: false, dblClickToZoom: true,  pinchToZoom: true,  flickEnabled: true,  flickMinSpeed: 120, flickMomentum: 0.25, pinchRotate: false },
	            zoomPerClick:           2,
	            zoomPerScroll:          1.2,
	            zoomPerSecond:          1.0,
	            blendTime:              0,
	            alwaysBlend:            false,
	            autoHideControls:       true,
	            immediateRender:        false,
	            minZoomImageRatio:      0.9, //-> closer to 0 allows zoom out to infinity
	            maxZoomPixelRatio:      1.1, //-> higher allows 'over zoom' into pixels
	            smoothTileEdgesMinZoom: 1.1, //-> higher than maxZoomPixelRatio disables it
	            iOSDevice:              isIOSDevice(),
	            pixelsPerWheelLine:     40,
	            autoResize:             true,
	            preserveImageSizeOnResize: false, // requires autoResize=true
	            minScrollDeltaTime:     50,
	
	            //DEFAULT CONTROL SETTINGS
	            showSequenceControl:     true,  //SEQUENCE
	            sequenceControlAnchor:   null,  //SEQUENCE
	            preserveViewport:        false, //SEQUENCE
	            preserveOverlays:        false, //SEQUENCE
	            navPrevNextWrap:         false, //SEQUENCE
	            showNavigationControl:   true,  //ZOOM/HOME/FULL/ROTATION
	            navigationControlAnchor: null,  //ZOOM/HOME/FULL/ROTATION
	            showZoomControl:         true,  //ZOOM
	            showHomeControl:         true,  //HOME
	            showFullPageControl:     true,  //FULL
	            showRotationControl:     false, //ROTATION
	            controlsFadeDelay:       2000,  //ZOOM/HOME/FULL/SEQUENCE
	            controlsFadeLength:      1500,  //ZOOM/HOME/FULL/SEQUENCE
	            mouseNavEnabled:         true,  //GENERAL MOUSE INTERACTIVITY
	
	            //VIEWPORT NAVIGATOR SETTINGS
	            showNavigator:              false,
	            navigatorId:                null,
	            navigatorPosition:          null,
	            navigatorSizeRatio:         0.2,
	            navigatorMaintainSizeRatio: false,
	            navigatorTop:               null,
	            navigatorLeft:              null,
	            navigatorHeight:            null,
	            navigatorWidth:             null,
	            navigatorAutoResize:        true,
	            navigatorAutoFade:          true,
	            navigatorRotate:            true,
	
	            // INITIAL ROTATION
	            degrees:                    0,
	
	            // APPEARANCE
	            opacity:                    1,
	            compositeOperation:         null,
	            placeholderFillStyle:       null,
	
	            //REFERENCE STRIP SETTINGS
	            showReferenceStrip:          false,
	            referenceStripScroll:       'horizontal',
	            referenceStripElement:       null,
	            referenceStripHeight:        null,
	            referenceStripWidth:         null,
	            referenceStripPosition:      'BOTTOM_LEFT',
	            referenceStripSizeRatio:     0.2,
	
	            //COLLECTION VISUALIZATION SETTINGS
	            collectionRows:         3, //or columns depending on layout
	            collectionColumns:      0, //columns in horizontal layout, rows in vertical layout
	            collectionLayout:       'horizontal', //vertical
	            collectionMode:         false,
	            collectionTileSize:     800,
	            collectionTileMargin:   80,
	
	            //PERFORMANCE SETTINGS
	            imageLoaderLimit:       0,
	            maxImageCacheCount:     200,
	            timeout:                30000,
	            useCanvas:              true,  // Use canvas element for drawing if available
	
	            //INTERFACE RESOURCE SETTINGS
	            prefixUrl:              "/images/",
	            navImages: {
	                zoomIn: {
	                    REST:   'zoomin_rest.png',
	                    GROUP:  'zoomin_grouphover.png',
	                    HOVER:  'zoomin_hover.png',
	                    DOWN:   'zoomin_pressed.png'
	                },
	                zoomOut: {
	                    REST:   'zoomout_rest.png',
	                    GROUP:  'zoomout_grouphover.png',
	                    HOVER:  'zoomout_hover.png',
	                    DOWN:   'zoomout_pressed.png'
	                },
	                home: {
	                    REST:   'home_rest.png',
	                    GROUP:  'home_grouphover.png',
	                    HOVER:  'home_hover.png',
	                    DOWN:   'home_pressed.png'
	                },
	                fullpage: {
	                    REST:   'fullpage_rest.png',
	                    GROUP:  'fullpage_grouphover.png',
	                    HOVER:  'fullpage_hover.png',
	                    DOWN:   'fullpage_pressed.png'
	                },
	                rotateleft: {
	                    REST:   'rotateleft_rest.png',
	                    GROUP:  'rotateleft_grouphover.png',
	                    HOVER:  'rotateleft_hover.png',
	                    DOWN:   'rotateleft_pressed.png'
	                },
	                rotateright: {
	                    REST:   'rotateright_rest.png',
	                    GROUP:  'rotateright_grouphover.png',
	                    HOVER:  'rotateright_hover.png',
	                    DOWN:   'rotateright_pressed.png'
	                },
	                previous: {
	                    REST:   'previous_rest.png',
	                    GROUP:  'previous_grouphover.png',
	                    HOVER:  'previous_hover.png',
	                    DOWN:   'previous_pressed.png'
	                },
	                next: {
	                    REST:   'next_rest.png',
	                    GROUP:  'next_grouphover.png',
	                    HOVER:  'next_hover.png',
	                    DOWN:   'next_pressed.png'
	                }
	            },
	
	            //DEVELOPER SETTINGS
	            debugMode:              false,
	            debugGridColor:         '#437AB2'
	        },
	
	
	        /**
	         * TODO: get rid of this.  I can't see how it's required at all.  Looks
	         *       like an early legacy code artifact.
	         * @static
	         * @ignore
	         */
	        SIGNAL: "----seadragon----",
	
	
	        /**
	         * Returns a function which invokes the method as if it were a method belonging to the object.
	         * @function
	         * @param {Object} object
	         * @param {Function} method
	         * @returns {Function}
	         */
	        delegate: function( object, method ) {
	            return function(){
	                var args = arguments;
	                if ( args === undefined ){
	                    args = [];
	                }
	                return method.apply( object, args );
	            };
	        },
	
	
	        /**
	         * An enumeration of Browser vendors.
	         * @static
	         * @type {Object}
	         * @property {Number} UNKNOWN
	         * @property {Number} IE
	         * @property {Number} FIREFOX
	         * @property {Number} SAFARI
	         * @property {Number} CHROME
	         * @property {Number} OPERA
	         */
	        BROWSERS: {
	            UNKNOWN:    0,
	            IE:         1,
	            FIREFOX:    2,
	            SAFARI:     3,
	            CHROME:     4,
	            OPERA:      5
	        },
	
	
	        /**
	         * Returns a DOM Element for the given id or element.
	         * @function
	         * @param {String|Element} element Accepts an id or element.
	         * @returns {Element} The element with the given id, null, or the element itself.
	         */
	        getElement: function( element ) {
	            if ( typeof ( element ) == "string" ) {
	                element = document.getElementById( element );
	            }
	            return element;
	        },
	
	
	        /**
	         * Determines the position of the upper-left corner of the element.
	         * @function
	         * @param {Element|String} element - the elemenet we want the position for.
	         * @returns {OpenSeadragon.Point} - the position of the upper left corner of the element.
	         */
	        getElementPosition: function( element ) {
	            var result = new $.Point(),
	                isFixed,
	                offsetParent;
	
	            element      = $.getElement( element );
	            isFixed      = $.getElementStyle( element ).position == "fixed";
	            offsetParent = getOffsetParent( element, isFixed );
	
	            while ( offsetParent ) {
	
	                result.x += element.offsetLeft;
	                result.y += element.offsetTop;
	
	                if ( isFixed ) {
	                    result = result.plus( $.getPageScroll() );
	                }
	
	                element = offsetParent;
	                isFixed = $.getElementStyle( element ).position == "fixed";
	                offsetParent = getOffsetParent( element, isFixed );
	            }
	
	            return result;
	        },
	
	
	        /**
	         * Determines the position of the upper-left corner of the element adjusted for current page and/or element scroll.
	         * @function
	         * @param {Element|String} element - the element we want the position for.
	         * @returns {OpenSeadragon.Point} - the position of the upper left corner of the element adjusted for current page and/or element scroll.
	         */
	        getElementOffset: function( element ) {
	            element = $.getElement( element );
	
	            var doc = element && element.ownerDocument,
	                docElement,
	                win,
	                boundingRect = { top: 0, left: 0 };
	
	            if ( !doc ) {
	                return new $.Point();
	            }
	
	            docElement = doc.documentElement;
	
	            if ( typeof element.getBoundingClientRect !== typeof undefined ) {
	                boundingRect = element.getBoundingClientRect();
	            }
	
	            win = ( doc == doc.window ) ?
	                doc :
	                ( doc.nodeType === 9 ) ?
	                    doc.defaultView || doc.parentWindow :
	                    false;
	
	            return new $.Point(
	                boundingRect.left + ( win.pageXOffset || docElement.scrollLeft ) - ( docElement.clientLeft || 0 ),
	                boundingRect.top + ( win.pageYOffset || docElement.scrollTop ) - ( docElement.clientTop || 0 )
	            );
	        },
	
	
	        /**
	         * Determines the height and width of the given element.
	         * @function
	         * @param {Element|String} element
	         * @returns {OpenSeadragon.Point}
	         */
	        getElementSize: function( element ) {
	            element = $.getElement( element );
	
	            return new $.Point(
	                element.clientWidth,
	                element.clientHeight
	            );
	        },
	
	
	        /**
	         * Returns the CSSStyle object for the given element.
	         * @function
	         * @param {Element|String} element
	         * @returns {CSSStyle}
	         */
	        getElementStyle:
	            document.documentElement.currentStyle ?
	            function( element ) {
	                element = $.getElement( element );
	                return element.currentStyle;
	            } :
	            function( element ) {
	                element = $.getElement( element );
	                return window.getComputedStyle( element, "" );
	            },
	
	        /**
	         * Returns the property with the correct vendor prefix appended.
	         * @param {String} property the property name
	         * @returns {String} the property with the correct prefix or null if not
	         * supported.
	         */
	        getCssPropertyWithVendorPrefix: function(property) {
	            var memo = {};
	
	            $.getCssPropertyWithVendorPrefix = function(property) {
	                if (memo[property] !== undefined) {
	                    return memo[property];
	                }
	                var style = document.createElement('div').style;
	                var result = null;
	                if (style[property] !== undefined) {
	                    result = property;
	                } else {
	                    var prefixes = ['Webkit', 'Moz', 'MS', 'O',
	                        'webkit', 'moz', 'ms', 'o'];
	                    var suffix = $.capitalizeFirstLetter(property);
	                    for (var i = 0; i < prefixes.length; i++) {
	                        var prop = prefixes[i] + suffix;
	                        if (style[prop] !== undefined) {
	                            result = prop;
	                            break;
	                        }
	                    }
	                }
	                memo[property] = result;
	                return result;
	            };
	            return $.getCssPropertyWithVendorPrefix(property);
	        },
	
	        /**
	         * Capitalizes the first letter of a string
	         * @param {String} string
	         * @returns {String} The string with the first letter capitalized
	         */
	        capitalizeFirstLetter: function(string) {
	            return string.charAt(0).toUpperCase() + string.slice(1);
	        },
	
	        /**
	         * Determines if a point is within the bounding rectangle of the given element (hit-test).
	         * @function
	         * @param {Element|String} element
	         * @param {OpenSeadragon.Point} point
	         * @returns {Boolean}
	         */
	        pointInElement: function( element, point ) {
	            element = $.getElement( element );
	            var offset = $.getElementOffset( element ),
	                size = $.getElementSize( element );
	            return point.x >= offset.x && point.x < offset.x + size.x && point.y < offset.y + size.y && point.y >= offset.y;
	        },
	
	
	        /**
	         * Gets the latest event, really only useful internally since its
	         * specific to IE behavior.
	         * @function
	         * @param {Event} [event]
	         * @returns {Event}
	         * @deprecated For internal use only
	         * @private
	         */
	        getEvent: function( event ) {
	            if( event ){
	                $.getEvent = function( event ) {
	                    return event;
	                };
	            } else {
	                $.getEvent = function() {
	                    return window.event;
	                };
	            }
	            return $.getEvent( event );
	        },
	
	
	        /**
	         * Gets the position of the mouse on the screen for a given event.
	         * @function
	         * @param {Event} [event]
	         * @returns {OpenSeadragon.Point}
	         */
	        getMousePosition: function( event ) {
	
	            if ( typeof( event.pageX ) == "number" ) {
	                $.getMousePosition = function( event ){
	                    var result = new $.Point();
	
	                    event = $.getEvent( event );
	                    result.x = event.pageX;
	                    result.y = event.pageY;
	
	                    return result;
	                };
	            } else if ( typeof( event.clientX ) == "number" ) {
	                $.getMousePosition = function( event ){
	                    var result = new $.Point();
	
	                    event = $.getEvent( event );
	                    result.x =
	                        event.clientX +
	                        document.body.scrollLeft +
	                        document.documentElement.scrollLeft;
	                    result.y =
	                        event.clientY +
	                        document.body.scrollTop +
	                        document.documentElement.scrollTop;
	
	                    return result;
	                };
	            } else {
	                throw new Error(
	                    "Unknown event mouse position, no known technique."
	                );
	            }
	
	            return $.getMousePosition( event );
	        },
	
	
	        /**
	         * Determines the page's current scroll position.
	         * @function
	         * @returns {OpenSeadragon.Point}
	         */
	        getPageScroll: function() {
	            var docElement  = document.documentElement || {},
	                body        = document.body || {};
	
	            if ( typeof( window.pageXOffset ) == "number" ) {
	                $.getPageScroll = function(){
	                    return new $.Point(
	                        window.pageXOffset,
	                        window.pageYOffset
	                    );
	                };
	            } else if ( body.scrollLeft || body.scrollTop ) {
	                $.getPageScroll = function(){
	                    return new $.Point(
	                        document.body.scrollLeft,
	                        document.body.scrollTop
	                    );
	                };
	            } else if ( docElement.scrollLeft || docElement.scrollTop ) {
	                $.getPageScroll = function(){
	                    return new $.Point(
	                        document.documentElement.scrollLeft,
	                        document.documentElement.scrollTop
	                    );
	                };
	            } else {
	                // We can't reassign the function yet, as there was no scroll.
	                return new $.Point(0,0);
	            }
	
	            return $.getPageScroll();
	        },
	
	        /**
	         * Set the page scroll position.
	         * @function
	         * @returns {OpenSeadragon.Point}
	         */
	        setPageScroll: function( scroll ) {
	            if ( typeof ( window.scrollTo ) !== "undefined" ) {
	                $.setPageScroll = function( scroll ) {
	                    window.scrollTo( scroll.x, scroll.y );
	                };
	            } else {
	                var originalScroll = $.getPageScroll();
	                if ( originalScroll.x === scroll.x &&
	                    originalScroll.y === scroll.y ) {
	                    // We are already correctly positioned and there
	                    // is no way to detect the correct method.
	                    return;
	                }
	
	                document.body.scrollLeft = scroll.x;
	                document.body.scrollTop = scroll.y;
	                var currentScroll = $.getPageScroll();
	                if ( currentScroll.x !== originalScroll.x &&
	                    currentScroll.y !== originalScroll.y ) {
	                    $.setPageScroll = function( scroll ) {
	                        document.body.scrollLeft = scroll.x;
	                        document.body.scrollTop = scroll.y;
	                    };
	                    return;
	                }
	
	                document.documentElement.scrollLeft = scroll.x;
	                document.documentElement.scrollTop = scroll.y;
	                currentScroll = $.getPageScroll();
	                if ( currentScroll.x !== originalScroll.x &&
	                    currentScroll.y !== originalScroll.y ) {
	                    $.setPageScroll = function( scroll ) {
	                        document.documentElement.scrollLeft = scroll.x;
	                        document.documentElement.scrollTop = scroll.y;
	                    };
	                    return;
	                }
	
	                // We can't find anything working, so we do nothing.
	                $.setPageScroll = function( scroll ) {
	                };
	            }
	
	            return $.setPageScroll( scroll );
	        },
	
	        /**
	         * Determines the size of the browsers window.
	         * @function
	         * @returns {OpenSeadragon.Point}
	         */
	        getWindowSize: function() {
	            var docElement = document.documentElement || {},
	                body    = document.body || {};
	
	            if ( typeof( window.innerWidth ) == 'number' ) {
	                $.getWindowSize = function(){
	                    return new $.Point(
	                        window.innerWidth,
	                        window.innerHeight
	                    );
	                };
	            } else if ( docElement.clientWidth || docElement.clientHeight ) {
	                $.getWindowSize = function(){
	                    return new $.Point(
	                        document.documentElement.clientWidth,
	                        document.documentElement.clientHeight
	                    );
	                };
	            } else if ( body.clientWidth || body.clientHeight ) {
	                $.getWindowSize = function(){
	                    return new $.Point(
	                        document.body.clientWidth,
	                        document.body.clientHeight
	                    );
	                };
	            } else {
	                throw new Error("Unknown window size, no known technique.");
	            }
	
	            return $.getWindowSize();
	        },
	
	
	        /**
	         * Wraps the given element in a nest of divs so that the element can
	         * be easily centered using CSS tables
	         * @function
	         * @param {Element|String} element
	         * @returns {Element} outermost wrapper element
	         */
	        makeCenteredNode: function( element ) {
	            // Convert a possible ID to an actual HTMLElement
	            element = $.getElement( element );
	
	            /*
	                CSS tables require you to have a display:table/row/cell hierarchy so we need to create
	                three nested wrapper divs:
	             */
	
	            var wrappers = [
	                $.makeNeutralElement( 'div' ),
	                $.makeNeutralElement( 'div' ),
	                $.makeNeutralElement( 'div' )
	            ];
	
	            // It feels like we should be able to pass style dicts to makeNeutralElement:
	            $.extend(wrappers[0].style, {
	                display: "table",
	                height: "100%",
	                width: "100%"
	            });
	
	            $.extend(wrappers[1].style, {
	                display: "table-row"
	            });
	
	            $.extend(wrappers[2].style, {
	                display: "table-cell",
	                verticalAlign: "middle",
	                textAlign: "center"
	            });
	
	            wrappers[0].appendChild(wrappers[1]);
	            wrappers[1].appendChild(wrappers[2]);
	            wrappers[2].appendChild(element);
	
	            return wrappers[0];
	        },
	
	
	        /**
	         * Creates an easily positionable element of the given type that therefor
	         * serves as an excellent container element.
	         * @function
	         * @param {String} tagName
	         * @returns {Element}
	         */
	        makeNeutralElement: function( tagName ) {
	            var element = document.createElement( tagName ),
	                style   = element.style;
	
	            style.background = "transparent none";
	            style.border     = "none";
	            style.margin     = "0px";
	            style.padding    = "0px";
	            style.position   = "static";
	
	            return element;
	        },
	
	
	        /**
	         * Returns the current milliseconds, using Date.now() if available
	         * @function
	         */
	        now: function( ) {
	          if (Date.now) {
	            $.now = Date.now;
	          } else {
	            $.now = function() { return new Date().getTime(); };
	          }
	
	          return $.now();
	        },
	
	
	        /**
	         * Ensures an image is loaded correctly to support alpha transparency.
	         * Generally only IE has issues doing this correctly for formats like
	         * png.
	         * @function
	         * @param {String} src
	         * @returns {Element}
	         */
	        makeTransparentImage: function( src ) {
	
	            $.makeTransparentImage = function( src ){
	                var img = $.makeNeutralElement( "img" );
	
	                img.src = src;
	
	                return img;
	            };
	
	            if ( $.Browser.vendor == $.BROWSERS.IE && $.Browser.version < 7 ) {
	
	                $.makeTransparentImage = function( src ){
	                    var img     = $.makeNeutralElement( "img" ),
	                        element = null;
	
	                    element = $.makeNeutralElement("span");
	                    element.style.display = "inline-block";
	
	                    img.onload = function() {
	                        element.style.width  = element.style.width || img.width + "px";
	                        element.style.height = element.style.height || img.height + "px";
	
	                        img.onload = null;
	                        img = null;     // to prevent memory leaks in IE
	                    };
	
	                    img.src = src;
	                    element.style.filter =
	                        "progid:DXImageTransform.Microsoft.AlphaImageLoader(src='" +
	                        src +
	                        "', sizingMethod='scale')";
	
	                    return element;
	                };
	
	            }
	
	            return $.makeTransparentImage( src );
	        },
	
	
	        /**
	         * Sets the opacity of the specified element.
	         * @function
	         * @param {Element|String} element
	         * @param {Number} opacity
	         * @param {Boolean} [usesAlpha]
	         */
	        setElementOpacity: function( element, opacity, usesAlpha ) {
	
	            var ieOpacity,
	                ieFilter;
	
	            element = $.getElement( element );
	
	            if ( usesAlpha && !$.Browser.alpha ) {
	                opacity = Math.round( opacity );
	            }
	
	            if ( $.Browser.opacity ) {
	                element.style.opacity = opacity < 1 ? opacity : "";
	            } else {
	                if ( opacity < 1 ) {
	                    ieOpacity = Math.round( 100 * opacity );
	                    ieFilter  = "alpha(opacity=" + ieOpacity + ")";
	                    element.style.filter = ieFilter;
	                } else {
	                    element.style.filter = "";
	                }
	            }
	        },
	
	
	        /**
	         * Sets the specified element's touch-action style attribute to 'none'.
	         * @function
	         * @param {Element|String} element
	         */
	        setElementTouchActionNone: function( element ) {
	            element = $.getElement( element );
	            if ( typeof element.style.touchAction !== 'undefined' ) {
	                element.style.touchAction = 'none';
	            } else if ( typeof element.style.msTouchAction !== 'undefined' ) {
	                element.style.msTouchAction = 'none';
	            }
	        },
	
	
	        /**
	         * Add the specified CSS class to the element if not present.
	         * @function
	         * @param {Element|String} element
	         * @param {String} className
	         */
	        addClass: function( element, className ) {
	            element = $.getElement( element );
	
	            if ( ! element.className ) {
	                element.className = className;
	            } else if ( ( ' ' + element.className + ' ' ).
	                indexOf( ' ' + className + ' ' ) === -1 ) {
	                element.className += ' ' + className;
	            }
	        },
	
	        /**
	         * Find the first index at which an element is found in an array or -1
	         * if not present.
	         *
	         * Code taken and adapted from
	         * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf#Compatibility
	         *
	         * @function
	         * @param {Array} array The array from which to find the element
	         * @param {Object} searchElement The element to find
	         * @param {Number} [fromIndex=0] Index to start research.
	         * @returns {Number} The index of the element in the array.
	         */
	        indexOf: function( array, searchElement, fromIndex ) {
	            if ( Array.prototype.indexOf ) {
	                this.indexOf = function( array, searchElement, fromIndex ) {
	                    return array.indexOf( searchElement, fromIndex );
	                };
	            } else {
	                this.indexOf = function( array, searchElement, fromIndex ) {
	                    var i,
	                        pivot = ( fromIndex ) ? fromIndex : 0,
	                        length;
	                    if ( !array ) {
	                        throw new TypeError( );
	                    }
	
	                    length = array.length;
	                    if ( length === 0 || pivot >= length ) {
	                        return -1;
	                    }
	
	                    if ( pivot < 0 ) {
	                        pivot = length - Math.abs( pivot );
	                    }
	
	                    for ( i = pivot; i < length; i++ ) {
	                        if ( array[i] === searchElement ) {
	                            return i;
	                        }
	                    }
	                    return -1;
	                };
	            }
	            return this.indexOf( array, searchElement, fromIndex );
	        },
	
	        /**
	         * Remove the specified CSS class from the element.
	         * @function
	         * @param {Element|String} element
	         * @param {String} className
	         */
	        removeClass: function( element, className ) {
	            var oldClasses,
	                newClasses = [],
	                i;
	
	            element = $.getElement( element );
	            oldClasses = element.className.split( /\s+/ );
	            for ( i = 0; i < oldClasses.length; i++ ) {
	                if ( oldClasses[ i ] && oldClasses[ i ] !== className ) {
	                    newClasses.push( oldClasses[ i ] );
	                }
	            }
	            element.className = newClasses.join(' ');
	        },
	
	
	        /**
	         * Adds an event listener for the given element, eventName and handler.
	         * @function
	         * @param {Element|String} element
	         * @param {String} eventName
	         * @param {Function} handler
	         * @param {Boolean} [useCapture]
	         */
	        addEvent: (function () {
	            if ( window.addEventListener ) {
	                return function ( element, eventName, handler, useCapture ) {
	                    element = $.getElement( element );
	                    element.addEventListener( eventName, handler, useCapture );
	                };
	            } else if ( window.attachEvent ) {
	                return function ( element, eventName, handler, useCapture ) {
	                    element = $.getElement( element );
	                    element.attachEvent( 'on' + eventName, handler );
	                };
	            } else {
	                throw new Error( "No known event model." );
	            }
	        }()),
	
	
	        /**
	         * Remove a given event listener for the given element, event type and
	         * handler.
	         * @function
	         * @param {Element|String} element
	         * @param {String} eventName
	         * @param {Function} handler
	         * @param {Boolean} [useCapture]
	         */
	        removeEvent: (function () {
	            if ( window.removeEventListener ) {
	                return function ( element, eventName, handler, useCapture ) {
	                    element = $.getElement( element );
	                    element.removeEventListener( eventName, handler, useCapture );
	                };
	            } else if ( window.detachEvent ) {
	                return function( element, eventName, handler, useCapture ) {
	                    element = $.getElement( element );
	                    element.detachEvent( 'on' + eventName, handler );
	                };
	            } else {
	                throw new Error( "No known event model." );
	            }
	        }()),
	
	
	        /**
	         * Cancels the default browser behavior had the event propagated all
	         * the way up the DOM to the window object.
	         * @function
	         * @param {Event} [event]
	         */
	        cancelEvent: function( event ) {
	            event = $.getEvent( event );
	
	            if ( event.preventDefault ) {
	                $.cancelEvent = function( event ){
	                    // W3C for preventing default
	                    event.preventDefault();
	                };
	            } else {
	                $.cancelEvent = function( event ){
	                    event = $.getEvent( event );
	                    // legacy for preventing default
	                    event.cancel = true;
	                    // IE for preventing default
	                    event.returnValue = false;
	                };
	            }
	            $.cancelEvent( event );
	        },
	
	
	        /**
	         * Stops the propagation of the event up the DOM.
	         * @function
	         * @param {Event} [event]
	         */
	        stopEvent: function( event ) {
	            event = $.getEvent( event );
	
	            if ( event.stopPropagation ) {
	                // W3C for stopping propagation
	                $.stopEvent = function( event ){
	                    event.stopPropagation();
	                };
	            } else {
	                // IE for stopping propagation
	                $.stopEvent = function( event ){
	                    event = $.getEvent( event );
	                    event.cancelBubble = true;
	                };
	
	            }
	
	            $.stopEvent( event );
	        },
	
	
	        /**
	         * Similar to OpenSeadragon.delegate, but it does not immediately call
	         * the method on the object, returning a function which can be called
	         * repeatedly to delegate the method. It also allows additonal arguments
	         * to be passed during construction which will be added during each
	         * invocation, and each invocation can add additional arguments as well.
	         *
	         * @function
	         * @param {Object} object
	         * @param {Function} method
	         * @param [args] any additional arguments are passed as arguments to the
	         *  created callback
	         * @returns {Function}
	         */
	        createCallback: function( object, method ) {
	            //TODO: This pattern is painful to use and debug.  It's much cleaner
	            //      to use pinning plus anonymous functions.  Get rid of this
	            //      pattern!
	            var initialArgs = [],
	                i;
	            for ( i = 2; i < arguments.length; i++ ) {
	                initialArgs.push( arguments[ i ] );
	            }
	
	            return function() {
	                var args = initialArgs.concat( [] ),
	                    i;
	                for ( i = 0; i < arguments.length; i++ ) {
	                    args.push( arguments[ i ] );
	                }
	
	                return method.apply( object, args );
	            };
	        },
	
	
	        /**
	         * Retreives the value of a url parameter from the window.location string.
	         * @function
	         * @param {String} key
	         * @returns {String} The value of the url parameter or null if no param matches.
	         */
	        getUrlParameter: function( key ) {
	            var value = URLPARAMS[ key ];
	            return value ? value : null;
	        },
	
	        /**
	         * Retrieves the protocol used by the url. The url can either be absolute
	         * or relative.
	         * @function
	         * @private
	         * @param {String} url The url to retrieve the protocol from.
	         * @return {String} The protocol (http:, https:, file:, ftp: ...)
	         */
	        getUrlProtocol: function( url ) {
	            var match = url.match(/^([a-z]+:)\/\//i);
	            if ( match === null ) {
	                // Relative URL, retrive the protocol from window.location
	                return window.location.protocol;
	            }
	            return match[1].toLowerCase();
	        },
	
	        /**
	         * Create an XHR object
	         * @private
	         * @param {type} [local] If set to true, the XHR will be file: protocol
	         * compatible if possible (but may raise a warning in the browser).
	         * @returns {XMLHttpRequest}
	         */
	        createAjaxRequest: function( local ) {
	            // IE11 does not support window.ActiveXObject so we just try to
	            // create one to see if it is supported.
	            // See: http://msdn.microsoft.com/en-us/library/ie/dn423948%28v=vs.85%29.aspx
	            var supportActiveX;
	            try {
	                /* global ActiveXObject:true */
	                supportActiveX = !!new ActiveXObject( "Microsoft.XMLHTTP" );
	            } catch( e ) {
	                supportActiveX = false;
	            }
	
	            if ( supportActiveX ) {
	                if ( window.XMLHttpRequest ) {
	                    $.createAjaxRequest = function( local ) {
	                        if ( local ) {
	                            return new ActiveXObject( "Microsoft.XMLHTTP" );
	                        }
	                        return new XMLHttpRequest();
	                    };
	                } else {
	                    $.createAjaxRequest = function() {
	                        return new ActiveXObject( "Microsoft.XMLHTTP" );
	                    };
	                }
	            } else if ( window.XMLHttpRequest ) {
	                $.createAjaxRequest = function() {
	                    return new XMLHttpRequest();
	                };
	            } else {
	                throw new Error( "Browser doesn't support XMLHttpRequest." );
	            }
	            return $.createAjaxRequest( local );
	        },
	
	        /**
	         * Makes an AJAX request.
	         * @param {Object} options
	         * @param {String} options.url - the url to request
	         * @param {Function} options.success - a function to call on a successful response
	         * @param {Function} options.error - a function to call on when an error occurs
	         * @param {Boolean} [options.withCredentials=false] - whether to set the XHR's withCredentials
	         * @throws {Error}
	         */
	        makeAjaxRequest: function( url, onSuccess, onError ) {
	            var withCredentials;
	
	            // Note that our preferred API is that you pass in a single object; the named
	            // arguments are for legacy support.
	            if( $.isPlainObject( url ) ){
	                onSuccess = url.success;
	                onError = url.error;
	                withCredentials = url.withCredentials;
	                url = url.url;
	            }
	
	            var protocol = $.getUrlProtocol( url );
	            var request = $.createAjaxRequest( protocol === "file:" );
	
	            if ( !$.isFunction( onSuccess ) ) {
	                throw new Error( "makeAjaxRequest requires a success callback" );
	            }
	
	            request.onreadystatechange = function() {
	                // 4 = DONE (https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#Properties)
	                if ( request.readyState == 4 ) {
	                    request.onreadystatechange = function(){};
	
	                    // With protocols other than http/https, the status is 200
	                    // on Firefox and 0 on other browsers
	                    if ( request.status === 200 ||
	                        ( request.status === 0 &&
	                          protocol !== "http:" &&
	                          protocol !== "https:" )) {
	                        onSuccess( request );
	                    } else {
	                        $.console.log( "AJAX request returned %d: %s", request.status, url );
	
	                        if ( $.isFunction( onError ) ) {
	                            onError( request );
	                        }
	                    }
	                }
	            };
	
	            if (withCredentials) {
	                request.withCredentials = true;
	            }
	
	            try {
	                request.open( "GET", url, true );
	                request.send( null );
	            } catch (e) {
	                var msg = e.message;
	
	                /*
	                    IE < 10 does not support CORS and an XHR request to a different origin will fail as soon
	                    as send() is called. This is particularly easy to miss during development and appear in
	                    production if you use a CDN or domain sharding and the security policy is likely to break
	                    exception handlers since any attempt to access a property of the request object will
	                    raise an access denied TypeError inside the catch block.
	
	                    To be friendlier, we'll check for this specific error and add a documentation pointer
	                    to point developers in the right direction. We test the exception number because IE's
	                    error messages are localized.
	                */
	                var oldIE = $.Browser.vendor == $.BROWSERS.IE && $.Browser.version < 10;
	                if ( oldIE && typeof( e.number ) != "undefined" && e.number == -2147024891 ) {
	                    msg += "\nSee http://msdn.microsoft.com/en-us/library/ms537505(v=vs.85).aspx#xdomain";
	                }
	
	                $.console.log( "%s while making AJAX request: %s", e.name, msg );
	
	                request.onreadystatechange = function(){};
	
	                if (window.XDomainRequest) { // IE9 or IE8 might as well try to use XDomainRequest
	                    var xdr = new XDomainRequest();
	                    if (xdr) {
	                        xdr.onload = function (e) {
	                            if ( $.isFunction( onSuccess ) ) {
	                                onSuccess({ // Faking an xhr object
	                                    responseText: xdr.responseText,
	                                    status: 200, // XDomainRequest doesn't support status codes, so we just fake one! :/
	                                    statusText: 'OK'
	                                });
	                            }
	                        };
	                        xdr.onerror = function (e) {
	                            if ( $.isFunction ( onError ) ) {
	                                onError({ // Faking an xhr object
	                                    responseText: xdr.responseText,
	                                    status: 444, // 444 No Response
	                                    statusText: 'An error happened. Due to an XDomainRequest deficiency we can not extract any information about this error. Upgrade your browser.'
	                                });
	                            }
	                        };
	                        try {
	                            xdr.open('GET', url);
	                            xdr.send();
	                        } catch (e2) {
	                            if ( $.isFunction( onError ) ) {
	                                onError( request, e );
	                            }
	                        }
	                    }
	                } else {
	                    if ( $.isFunction( onError ) ) {
	                        onError( request, e );
	                    }
	                }
	            }
	        },
	
	        /**
	         * Taken from jQuery 1.6.1
	         * @function
	         * @param {Object} options
	         * @param {String} options.url
	         * @param {Function} options.callback
	         * @param {String} [options.param='callback'] The name of the url parameter
	         *      to request the jsonp provider with.
	         * @param {String} [options.callbackName=] The name of the callback to
	         *      request the jsonp provider with.
	         */
	        jsonp: function( options ){
	            var script,
	                url     = options.url,
	                head    = document.head ||
	                    document.getElementsByTagName( "head" )[ 0 ] ||
	                    document.documentElement,
	                jsonpCallback = options.callbackName || 'openseadragon' + $.now(),
	                previous      = window[ jsonpCallback ],
	                replace       = "$1" + jsonpCallback + "$2",
	                callbackParam = options.param || 'callback',
	                callback      = options.callback;
	
	            url = url.replace( /(\=)\?(&|$)|\?\?/i, replace );
	            // Add callback manually
	            url += (/\?/.test( url ) ? "&" : "?") + callbackParam + "=" + jsonpCallback;
	
	            // Install callback
	            window[ jsonpCallback ] = function( response ) {
	                if ( !previous ){
	                    try{
	                        delete window[ jsonpCallback ];
	                    }catch(e){
	                        //swallow
	                    }
	                } else {
	                    window[ jsonpCallback ] = previous;
	                }
	                if( callback && $.isFunction( callback ) ){
	                    callback( response );
	                }
	            };
	
	            script = document.createElement( "script" );
	
	            //TODO: having an issue with async info requests
	            if( undefined !== options.async || false !== options.async ){
	                script.async = "async";
	            }
	
	            if ( options.scriptCharset ) {
	                script.charset = options.scriptCharset;
	            }
	
	            script.src = url;
	
	            // Attach handlers for all browsers
	            script.onload = script.onreadystatechange = function( _, isAbort ) {
	
	                if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {
	
	                    // Handle memory leak in IE
	                    script.onload = script.onreadystatechange = null;
	
	                    // Remove the script
	                    if ( head && script.parentNode ) {
	                        head.removeChild( script );
	                    }
	
	                    // Dereference the script
	                    script = undefined;
	                }
	            };
	            // Use insertBefore instead of appendChild  to circumvent an IE6 bug.
	            // This arises when a base node is used (#2709 and #4378).
	            head.insertBefore( script, head.firstChild );
	
	        },
	
	
	        /**
	         * Fully deprecated. Will throw an error.
	         * @function
	         * @deprecated use {@link OpenSeadragon.Viewer#open}
	         */
	        createFromDZI: function() {
	            throw "OpenSeadragon.createFromDZI is deprecated, use Viewer.open.";
	        },
	
	        /**
	         * Parses an XML string into a DOM Document.
	         * @function
	         * @param {String} string
	         * @returns {Document}
	         */
	        parseXml: function( string ) {
	            if ( window.DOMParser ) {
	
	                $.parseXml = function( string ) {
	                    var xmlDoc = null,
	                        parser;
	
	                    parser = new DOMParser();
	                    xmlDoc = parser.parseFromString( string, "text/xml" );
	                    return xmlDoc;
	                };
	
	            } else if ( window.ActiveXObject ) {
	
	                $.parseXml = function( string ) {
	                    var xmlDoc = null;
	
	                    xmlDoc = new ActiveXObject( "Microsoft.XMLDOM" );
	                    xmlDoc.async = false;
	                    xmlDoc.loadXML( string );
	                    return xmlDoc;
	                };
	
	            } else {
	                throw new Error( "Browser doesn't support XML DOM." );
	            }
	
	            return $.parseXml( string );
	        },
	
	        /**
	         * Parses a JSON string into a Javascript object.
	         * @function
	         * @param {String} string
	         * @returns {Object}
	         */
	        parseJSON: function(string) {
	            if (window.JSON && window.JSON.parse) {
	                $.parseJSON = window.JSON.parse;
	            } else {
	                // Should only be used by IE8 in non standards mode
	                $.parseJSON = function(string) {
	                    /*jshint evil:true*/
	                    return eval('(' + string + ')');
	                };
	            }
	            return $.parseJSON(string);
	        },
	
	        /**
	         * Reports whether the image format is supported for tiling in this
	         * version.
	         * @function
	         * @param {String} [extension]
	         * @returns {Boolean}
	         */
	        imageFormatSupported: function( extension ) {
	            extension = extension ? extension : "";
	            return !!FILEFORMATS[ extension.toLowerCase() ];
	        }
	
	    });
	
	
	    /**
	     * The current browser vendor, version, and related information regarding detected features.
	     * @member {Object} Browser
	     * @memberof OpenSeadragon
	     * @static
	     * @type {Object}
	     * @property {OpenSeadragon.BROWSERS} vendor - One of the {@link OpenSeadragon.BROWSERS} enumeration values.
	     * @property {Number} version
	     * @property {Boolean} alpha - Does the browser support image alpha transparency.
	     */
	    $.Browser = {
	        vendor:     $.BROWSERS.UNKNOWN,
	        version:    0,
	        alpha:      true
	    };
	
	
	    var FILEFORMATS = {
	            "bmp":  false,
	            "jpeg": true,
	            "jpg":  true,
	            "png":  true,
	            "tif":  false,
	            "wdp":  false
	        },
	        URLPARAMS = {};
	
	    (function() {
	        //A small auto-executing routine to determine the browser vendor,
	        //version and supporting feature sets.
	        var app = navigator.appName,
	            ver = navigator.appVersion,
	            ua  = navigator.userAgent,
	            regex;
	
	        //console.error( 'appName: ' + navigator.appName );
	        //console.error( 'appVersion: ' + navigator.appVersion );
	        //console.error( 'userAgent: ' + navigator.userAgent );
	
	        switch( navigator.appName ){
	            case "Microsoft Internet Explorer":
	                if( !!window.attachEvent &&
	                    !!window.ActiveXObject ) {
	
	                    $.Browser.vendor = $.BROWSERS.IE;
	                    $.Browser.version = parseFloat(
	                        ua.substring(
	                            ua.indexOf( "MSIE" ) + 5,
	                            ua.indexOf( ";", ua.indexOf( "MSIE" ) ) )
	                        );
	                }
	                break;
	            case "Netscape":
	                if( !!window.addEventListener ){
	                    if ( ua.indexOf( "Firefox" ) >= 0 ) {
	                        $.Browser.vendor = $.BROWSERS.FIREFOX;
	                        $.Browser.version = parseFloat(
	                            ua.substring( ua.indexOf( "Firefox" ) + 8 )
	                        );
	                    } else if ( ua.indexOf( "Safari" ) >= 0 ) {
	                        $.Browser.vendor = ua.indexOf( "Chrome" ) >= 0 ?
	                            $.BROWSERS.CHROME :
	                            $.BROWSERS.SAFARI;
	                        $.Browser.version = parseFloat(
	                            ua.substring(
	                                ua.substring( 0, ua.indexOf( "Safari" ) ).lastIndexOf( "/" ) + 1,
	                                ua.indexOf( "Safari" )
	                            )
	                        );
	                    } else {
	                        regex = new RegExp( "Trident/.*rv:([0-9]{1,}[.0-9]{0,})");
	                        if ( regex.exec( ua ) !== null ) {
	                            $.Browser.vendor = $.BROWSERS.IE;
	                            $.Browser.version = parseFloat( RegExp.$1 );
	                        }
	                    }
	                }
	                break;
	            case "Opera":
	                $.Browser.vendor = $.BROWSERS.OPERA;
	                $.Browser.version = parseFloat( ver );
	                break;
	        }
	
	            // ignore '?' portion of query string
	        var query = window.location.search.substring( 1 ),
	            parts = query.split('&'),
	            part,
	            sep,
	            i;
	
	        for ( i = 0; i < parts.length; i++ ) {
	            part = parts[ i ];
	            sep  = part.indexOf( '=' );
	
	            if ( sep > 0 ) {
	                URLPARAMS[ part.substring( 0, sep ) ] =
	                    decodeURIComponent( part.substring( sep + 1 ) );
	            }
	        }
	
	        //determine if this browser supports image alpha transparency
	        $.Browser.alpha = !(
	            (
	                $.Browser.vendor == $.BROWSERS.IE &&
	                $.Browser.version < 9
	            ) || (
	                $.Browser.vendor == $.BROWSERS.CHROME &&
	                $.Browser.version < 2
	            )
	        );
	
	        //determine if this browser supports element.style.opacity
	        $.Browser.opacity = !(
	            $.Browser.vendor == $.BROWSERS.IE &&
	            $.Browser.version < 9
	        );
	
	    })();
	
	
	    //TODO: $.console is often used inside a try/catch block which generally
	    //      prevents allowings errors to occur with detection until a debugger
	    //      is attached.  Although I've been guilty of the same anti-pattern
	    //      I eventually was convinced that errors should naturally propogate in
	    //      all but the most special cases.
	    /**
	     * A convenient alias for console when available, and a simple null
	     * function when console is unavailable.
	     * @static
	     * @private
	     */
	    var nullfunction = function( msg ){
	            //document.location.hash = msg;
	        };
	
	    $.console = window.console || {
	        log:    nullfunction,
	        debug:  nullfunction,
	        info:   nullfunction,
	        warn:   nullfunction,
	        error:  nullfunction,
	        assert: nullfunction
	    };
	
	
	    // Adding support for HTML5's requestAnimationFrame as suggested by acdha.
	    // Implementation taken from matt synder's post here:
	    // http://mattsnider.com/cross-browser-and-legacy-supported-requestframeanimation/
	    (function( w ) {
	
	        // most browsers have an implementation
	        var requestAnimationFrame = w.requestAnimationFrame ||
	            w.mozRequestAnimationFrame ||
	            w.webkitRequestAnimationFrame ||
	            w.msRequestAnimationFrame;
	
	        var cancelAnimationFrame = w.cancelAnimationFrame ||
	            w.mozCancelAnimationFrame ||
	            w.webkitCancelAnimationFrame ||
	            w.msCancelAnimationFrame;
	
	        // polyfill, when necessary
	        if ( requestAnimationFrame && cancelAnimationFrame ) {
	            // We can't assign these window methods directly to $ because they
	            // expect their "this" to be "window", so we call them in wrappers.
	            $.requestAnimationFrame = function(){
	                return requestAnimationFrame.apply( w, arguments );
	            };
	            $.cancelAnimationFrame = function(){
	                return cancelAnimationFrame.apply( w, arguments );
	            };
	        } else {
	            var aAnimQueue = [],
	                processing = [],
	                iRequestId = 0,
	                iIntervalId;
	
	            // create a mock requestAnimationFrame function
	            $.requestAnimationFrame = function( callback ) {
	                aAnimQueue.push( [ ++iRequestId, callback ] );
	
	                if ( !iIntervalId ) {
	                    iIntervalId = setInterval( function() {
	                        if ( aAnimQueue.length ) {
	                            var time = $.now();
	                            // Process all of the currently outstanding frame
	                            // requests, but none that get added during the
	                            // processing.
	                            // Swap the arrays so we don't have to create a new
	                            // array every frame.
	                            var temp = processing;
	                            processing = aAnimQueue;
	                            aAnimQueue = temp;
	                            while ( processing.length ) {
	                                processing.shift()[ 1 ]( time );
	                            }
	                        } else {
	                            // don't continue the interval, if unnecessary
	                            clearInterval( iIntervalId );
	                            iIntervalId = undefined;
	                        }
	                    }, 1000 / 50);  // estimating support for 50 frames per second
	                }
	
	                return iRequestId;
	            };
	
	            // create a mock cancelAnimationFrame function
	            $.cancelAnimationFrame = function( requestId ) {
	                // find the request ID and remove it
	                var i, j;
	                for ( i = 0, j = aAnimQueue.length; i < j; i += 1 ) {
	                    if ( aAnimQueue[ i ][ 0 ] === requestId ) {
	                        aAnimQueue.splice( i, 1 );
	                        return;
	                    }
	                }
	
	                // If it's not in the queue, it may be in the set we're currently
	                // processing (if cancelAnimationFrame is called from within a
	                // requestAnimationFrame callback).
	                for ( i = 0, j = processing.length; i < j; i += 1 ) {
	                    if ( processing[ i ][ 0 ] === requestId ) {
	                        processing.splice( i, 1 );
	                        return;
	                    }
	                }
	            };
	        }
	    })( window );
	
	    /**
	     * @private
	     * @inner
	     * @function
	     * @param {Element} element
	     * @param {Boolean} [isFixed]
	     * @returns {Element}
	     */
	    function getOffsetParent( element, isFixed ) {
	        if ( isFixed && element != document.body ) {
	            return document.body;
	        } else {
	            return element.offsetParent;
	        }
	    }
	
	}(OpenSeadragon));
	
	/*
	 * OpenSeadragon - full-screen support functions
	 *
	 * Copyright (C) 2009 CodePlex Foundation
	 * Copyright (C) 2010-2013 OpenSeadragon contributors
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 * - Redistributions of source code must retain the above copyright notice,
	 *   this list of conditions and the following disclaimer.
	 *
	 * - Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * - Neither the name of CodePlex Foundation nor the names of its
	 *   contributors may be used to endorse or promote products derived from
	 *   this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
	 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */
	
	(function( $ ) {
	    /**
	     * Determine native full screen support we can get from the browser.
	     * @member fullScreenApi
	     * @memberof OpenSeadragon
	     * @type {object}
	     * @property {Boolean} supportsFullScreen Return true if full screen API is supported.
	     * @property {Function} isFullScreen Return true if currently in full screen mode.
	     * @property {Function} getFullScreenElement Return the element currently in full screen mode.
	     * @property {Function} requestFullScreen Make a request to go in full screen mode.
	     * @property {Function} exitFullScreen Make a request to exit full screen mode.
	     * @property {Function} cancelFullScreen Deprecated, use exitFullScreen instead.
	     * @property {String} fullScreenEventName Event fired when the full screen mode change.
	     * @property {String} fullScreenErrorEventName Event fired when a request to go
	     * in full screen mode failed.
	     */
	    var fullScreenApi = {
	        supportsFullScreen: false,
	        isFullScreen: function() { return false; },
	        getFullScreenElement: function() { return null; },
	        requestFullScreen: function() {},
	        exitFullScreen: function() {},
	        cancelFullScreen: function() {},
	        fullScreenEventName: '',
	        fullScreenErrorEventName: ''
	    };
	
	    // check for native support
	    if ( document.exitFullscreen ) {
	        // W3C standard
	        fullScreenApi.supportsFullScreen = true;
	        fullScreenApi.getFullScreenElement = function() {
	            return document.fullscreenElement;
	        };
	        fullScreenApi.requestFullScreen = function( element ) {
	            return element.requestFullscreen();
	        };
	        fullScreenApi.exitFullScreen = function() {
	            document.exitFullscreen();
	        };
	        fullScreenApi.fullScreenEventName = "fullscreenchange";
	        fullScreenApi.fullScreenErrorEventName = "fullscreenerror";
	    } else if ( document.msExitFullscreen ) {
	        // IE 11
	        fullScreenApi.supportsFullScreen = true;
	        fullScreenApi.getFullScreenElement = function() {
	            return document.msFullscreenElement;
	        };
	        fullScreenApi.requestFullScreen = function( element ) {
	            return element.msRequestFullscreen();
	        };
	        fullScreenApi.exitFullScreen = function() {
	            document.msExitFullscreen();
	        };
	        fullScreenApi.fullScreenEventName = "MSFullscreenChange";
	        fullScreenApi.fullScreenErrorEventName = "MSFullscreenError";
	    } else if ( document.webkitExitFullscreen ) {
	        // Recent webkit
	        fullScreenApi.supportsFullScreen = true;
	        fullScreenApi.getFullScreenElement = function() {
	            return document.webkitFullscreenElement;
	        };
	        fullScreenApi.requestFullScreen = function( element ) {
	            return element.webkitRequestFullscreen();
	        };
	        fullScreenApi.exitFullScreen = function() {
	            document.webkitExitFullscreen();
	        };
	        fullScreenApi.fullScreenEventName = "webkitfullscreenchange";
	        fullScreenApi.fullScreenErrorEventName = "webkitfullscreenerror";
	    } else if ( document.webkitCancelFullScreen ) {
	        // Old webkit
	        fullScreenApi.supportsFullScreen = true;
	        fullScreenApi.getFullScreenElement = function() {
	            return document.webkitCurrentFullScreenElement;
	        };
	        fullScreenApi.requestFullScreen = function( element ) {
	            return element.webkitRequestFullScreen();
	        };
	        fullScreenApi.exitFullScreen = function() {
	            document.webkitCancelFullScreen();
	        };
	        fullScreenApi.fullScreenEventName = "webkitfullscreenchange";
	        fullScreenApi.fullScreenErrorEventName = "webkitfullscreenerror";
	    } else if ( document.mozCancelFullScreen ) {
	        // Firefox
	        fullScreenApi.supportsFullScreen = true;
	        fullScreenApi.getFullScreenElement = function() {
	            return document.mozFullScreenElement;
	        };
	        fullScreenApi.requestFullScreen = function( element ) {
	            return element.mozRequestFullScreen();
	        };
	        fullScreenApi.exitFullScreen = function() {
	            document.mozCancelFullScreen();
	        };
	        fullScreenApi.fullScreenEventName = "mozfullscreenchange";
	        fullScreenApi.fullScreenErrorEventName = "mozfullscreenerror";
	    }
	    fullScreenApi.isFullScreen = function() {
	        return fullScreenApi.getFullScreenElement() !== null;
	    };
	    fullScreenApi.cancelFullScreen = function() {
	        $.console.error("cancelFullScreen is deprecated. Use exitFullScreen instead.");
	        fullScreenApi.exitFullScreen();
	    };
	
	    // export api
	    $.extend( $, fullScreenApi );
	
	})( OpenSeadragon );
	
	/*
	 * OpenSeadragon - EventSource
	 *
	 * Copyright (C) 2009 CodePlex Foundation
	 * Copyright (C) 2010-2013 OpenSeadragon contributors
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 * - Redistributions of source code must retain the above copyright notice,
	 *   this list of conditions and the following disclaimer.
	 *
	 * - Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * - Neither the name of CodePlex Foundation nor the names of its
	 *   contributors may be used to endorse or promote products derived from
	 *   this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
	 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */
	
	(function($){
	
	/**
	 * Event handler method signature used by all OpenSeadragon events.
	 *
	 * @callback EventHandler
	 * @memberof OpenSeadragon
	 * @param {Object} event - See individual events for event-specific properties.
	 */
	
	
	/**
	 * @class EventSource
	 * @classdesc For use by classes which want to support custom, non-browser events.
	 *
	 * @memberof OpenSeadragon
	 */
	$.EventSource = function() {
	    this.events = {};
	};
	
	/** @lends OpenSeadragon.EventSource.prototype */
	$.EventSource.prototype = {
	
	    /**
	     * Add an event handler to be triggered only once (or a given number of times)
	     * for a given event.
	     * @function
	     * @param {String} eventName - Name of event to register.
	     * @param {OpenSeadragon.EventHandler} handler - Function to call when event
	     * is triggered.
	     * @param {Object} [userData=null] - Arbitrary object to be passed unchanged
	     * to the handler.
	     * @param {Number} [times=1] - The number of times to handle the event
	     * before removing it.
	     */
	    addOnceHandler: function(eventName, handler, userData, times) {
	        var self = this;
	        times = times || 1;
	        var count = 0;
	        var onceHandler = function(event) {
	            count++;
	            if (count === times) {
	                self.removeHandler(eventName, onceHandler);
	            }
	            handler(event);
	        };
	        this.addHandler(eventName, onceHandler, userData);
	    },
	
	    /**
	     * Add an event handler for a given event.
	     * @function
	     * @param {String} eventName - Name of event to register.
	     * @param {OpenSeadragon.EventHandler} handler - Function to call when event is triggered.
	     * @param {Object} [userData=null] - Arbitrary object to be passed unchanged to the handler.
	     */
	    addHandler: function ( eventName, handler, userData ) {
	        var events = this.events[ eventName ];
	        if ( !events ) {
	            this.events[ eventName ] = events = [];
	        }
	        if ( handler && $.isFunction( handler ) ) {
	            events[ events.length ] = { handler: handler, userData: userData || null };
	        }
	    },
	
	    /**
	     * Remove a specific event handler for a given event.
	     * @function
	     * @param {String} eventName - Name of event for which the handler is to be removed.
	     * @param {OpenSeadragon.EventHandler} handler - Function to be removed.
	     */
	    removeHandler: function ( eventName, handler ) {
	        var events = this.events[ eventName ],
	            handlers = [],
	            i;
	        if ( !events ) {
	            return;
	        }
	        if ( $.isArray( events ) ) {
	            for ( i = 0; i < events.length; i++ ) {
	                if ( events[i].handler !== handler ) {
	                    handlers.push( events[ i ] );
	                }
	            }
	            this.events[ eventName ] = handlers;
	        }
	    },
	
	
	    /**
	     * Remove all event handlers for a given event type. If no type is given all
	     * event handlers for every event type are removed.
	     * @function
	     * @param {String} eventName - Name of event for which all handlers are to be removed.
	     */
	    removeAllHandlers: function( eventName ) {
	        if ( eventName ){
	            this.events[ eventName ] = [];
	        } else{
	            for ( var eventType in this.events ) {
	                this.events[ eventType ] = [];
	            }
	        }
	    },
	
	    /**
	     * Get a function which iterates the list of all handlers registered for a given event, calling the handler for each.
	     * @function
	     * @param {String} eventName - Name of event to get handlers for.
	     */
	    getHandler: function ( eventName ) {
	        var events = this.events[ eventName ];
	        if ( !events || !events.length ) {
	            return null;
	        }
	        events = events.length === 1 ?
	            [ events[ 0 ] ] :
	            Array.apply( null, events );
	        return function ( source, args ) {
	            var i,
	                length = events.length;
	            for ( i = 0; i < length; i++ ) {
	                if ( events[ i ] ) {
	                    args.eventSource = source;
	                    args.userData = events[ i ].userData;
	                    events[ i ].handler( args );
	                }
	            }
	        };
	    },
	
	    /**
	     * Trigger an event, optionally passing additional information.
	     * @function
	     * @param {String} eventName - Name of event to register.
	     * @param {Object} eventArgs - Event-specific data.
	     */
	    raiseEvent: function( eventName, eventArgs ) {
	        //uncomment if you want to get a log of all events
	        //$.console.log( eventName );
	        var handler = this.getHandler( eventName );
	
	        if ( handler ) {
	            if ( !eventArgs ) {
	                eventArgs = {};
	            }
	
	            handler( this, eventArgs );
	        }
	    }
	};
	
	}( OpenSeadragon ));
	
	/*
	 * OpenSeadragon - MouseTracker
	 *
	 * Copyright (C) 2009 CodePlex Foundation
	 * Copyright (C) 2010-2013 OpenSeadragon contributors
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 * - Redistributions of source code must retain the above copyright notice,
	 *   this list of conditions and the following disclaimer.
	 *
	 * - Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * - Neither the name of CodePlex Foundation nor the names of its
	 *   contributors may be used to endorse or promote products derived from
	 *   this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
	 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */
	
	(function ( $ ) {
	
	    // All MouseTracker instances
	    var MOUSETRACKERS  = [];
	
	    // dictionary from hash to private properties
	    var THIS           = {};
	
	
	    /**
	     * @class MouseTracker
	     * @classdesc Provides simplified handling of common pointer device (mouse, touch, pen, etc.) gestures
	     *            and keyboard events on a specified element.
	     * @memberof OpenSeadragon
	     * @param {Object} options
	     *      Allows configurable properties to be entirely specified by passing
	     *      an options object to the constructor.  The constructor also supports
	     *      the original positional arguments 'element', 'clickTimeThreshold',
	     *      and 'clickDistThreshold' in that order.
	     * @param {Element|String} options.element
	     *      A reference to an element or an element id for which the pointer/key
	     *      events will be monitored.
	     * @param {Boolean} [options.startDisabled=false]
	     *      If true, event tracking on the element will not start until
	     *      {@link OpenSeadragon.MouseTracker.setTracking|setTracking} is called.
	     * @param {Number} options.clickTimeThreshold
	     *      The number of milliseconds within which a pointer down-up event combination
	     *      will be treated as a click gesture.
	     * @param {Number} options.clickDistThreshold
	     *      The maximum distance allowed between a pointer down event and a pointer up event
	     *      to be treated as a click gesture.
	     * @param {Number} options.dblClickTimeThreshold
	     *      The number of milliseconds within which two pointer down-up event combinations
	     *      will be treated as a double-click gesture.
	     * @param {Number} options.dblClickDistThreshold
	     *      The maximum distance allowed between two pointer click events
	     *      to be treated as a click gesture.
	     * @param {Number} [options.stopDelay=50]
	     *      The number of milliseconds without pointer move before the stop
	     *      event is fired.
	     * @param {OpenSeadragon.EventHandler} [options.enterHandler=null]
	     *      An optional handler for pointer enter.
	     * @param {OpenSeadragon.EventHandler} [options.exitHandler=null]
	     *      An optional handler for pointer exit.
	     * @param {OpenSeadragon.EventHandler} [options.pressHandler=null]
	     *      An optional handler for pointer press.
	     * @param {OpenSeadragon.EventHandler} [options.nonPrimaryPressHandler=null]
	     *      An optional handler for pointer non-primary button press.
	     * @param {OpenSeadragon.EventHandler} [options.releaseHandler=null]
	     *      An optional handler for pointer release.
	     * @param {OpenSeadragon.EventHandler} [options.nonPrimaryReleaseHandler=null]
	     *      An optional handler for pointer non-primary button release.
	     * @param {OpenSeadragon.EventHandler} [options.moveHandler=null]
	     *      An optional handler for pointer move.
	     * @param {OpenSeadragon.EventHandler} [options.scrollHandler=null]
	     *      An optional handler for mouse wheel scroll.
	     * @param {OpenSeadragon.EventHandler} [options.clickHandler=null]
	     *      An optional handler for pointer click.
	     * @param {OpenSeadragon.EventHandler} [options.dblClickHandler=null]
	     *      An optional handler for pointer double-click.
	     * @param {OpenSeadragon.EventHandler} [options.dragHandler=null]
	     *      An optional handler for the drag gesture.
	     * @param {OpenSeadragon.EventHandler} [options.dragEndHandler=null]
	     *      An optional handler for after a drag gesture.
	     * @param {OpenSeadragon.EventHandler} [options.pinchHandler=null]
	     *      An optional handler for the pinch gesture.
	     * @param {OpenSeadragon.EventHandler} [options.keyDownHandler=null]
	     *      An optional handler for keydown.
	     * @param {OpenSeadragon.EventHandler} [options.keyUpHandler=null]
	     *      An optional handler for keyup.
	     * @param {OpenSeadragon.EventHandler} [options.keyHandler=null]
	     *      An optional handler for keypress.
	     * @param {OpenSeadragon.EventHandler} [options.focusHandler=null]
	     *      An optional handler for focus.
	     * @param {OpenSeadragon.EventHandler} [options.blurHandler=null]
	     *      An optional handler for blur.
	     * @param {Object} [options.userData=null]
	     *      Arbitrary object to be passed unchanged to any attached handler methods.
	     */
	    $.MouseTracker = function ( options ) {
	
	        MOUSETRACKERS.push( this );
	
	        var args = arguments;
	
	        if ( !$.isPlainObject( options ) ) {
	            options = {
	                element:            args[ 0 ],
	                clickTimeThreshold: args[ 1 ],
	                clickDistThreshold: args[ 2 ]
	            };
	        }
	
	        this.hash               = Math.random(); // An unique hash for this tracker.
	        /**
	         * The element for which pointer events are being monitored.
	         * @member {Element} element
	         * @memberof OpenSeadragon.MouseTracker#
	         */
	        this.element            = $.getElement( options.element );
	        /**
	         * The number of milliseconds within which a pointer down-up event combination
	         * will be treated as a click gesture.
	         * @member {Number} clickTimeThreshold
	         * @memberof OpenSeadragon.MouseTracker#
	         */
	        this.clickTimeThreshold = options.clickTimeThreshold || $.DEFAULT_SETTINGS.clickTimeThreshold;
	        /**
	         * The maximum distance allowed between a pointer down event and a pointer up event
	         * to be treated as a click gesture.
	         * @member {Number} clickDistThreshold
	         * @memberof OpenSeadragon.MouseTracker#
	         */
	        this.clickDistThreshold = options.clickDistThreshold || $.DEFAULT_SETTINGS.clickDistThreshold;
	        /**
	         * The number of milliseconds within which two pointer down-up event combinations
	         * will be treated as a double-click gesture.
	         * @member {Number} dblClickTimeThreshold
	         * @memberof OpenSeadragon.MouseTracker#
	         */
	        this.dblClickTimeThreshold = options.dblClickTimeThreshold || $.DEFAULT_SETTINGS.dblClickTimeThreshold;
	        /**
	         * The maximum distance allowed between two pointer click events
	         * to be treated as a click gesture.
	         * @member {Number} clickDistThreshold
	         * @memberof OpenSeadragon.MouseTracker#
	         */
	        this.dblClickDistThreshold = options.dblClickDistThreshold || $.DEFAULT_SETTINGS.dblClickDistThreshold;
	        this.userData              = options.userData          || null;
	        this.stopDelay             = options.stopDelay         || 50;
	
	        this.enterHandler             = options.enterHandler             || null;
	        this.exitHandler              = options.exitHandler              || null;
	        this.pressHandler             = options.pressHandler             || null;
	        this.nonPrimaryPressHandler   = options.nonPrimaryPressHandler   || null;
	        this.releaseHandler           = options.releaseHandler           || null;
	        this.nonPrimaryReleaseHandler = options.nonPrimaryReleaseHandler || null;
	        this.moveHandler              = options.moveHandler              || null;
	        this.scrollHandler            = options.scrollHandler            || null;
	        this.clickHandler             = options.clickHandler             || null;
	        this.dblClickHandler          = options.dblClickHandler          || null;
	        this.dragHandler              = options.dragHandler              || null;
	        this.dragEndHandler           = options.dragEndHandler           || null;
	        this.pinchHandler             = options.pinchHandler             || null;
	        this.stopHandler              = options.stopHandler              || null;
	        this.keyDownHandler           = options.keyDownHandler           || null;
	        this.keyUpHandler             = options.keyUpHandler             || null;
	        this.keyHandler               = options.keyHandler               || null;
	        this.focusHandler             = options.focusHandler             || null;
	        this.blurHandler              = options.blurHandler              || null;
	
	        //Store private properties in a scope sealed hash map
	        var _this = this;
	
	        /**
	         * @private
	         * @property {Boolean} tracking
	         *      Are we currently tracking pointer events for this element.
	         */
	        THIS[ this.hash ] = {
	            click:                 function ( event ) { onClick( _this, event ); },
	            dblclick:              function ( event ) { onDblClick( _this, event ); },
	            keydown:               function ( event ) { onKeyDown( _this, event ); },
	            keyup:                 function ( event ) { onKeyUp( _this, event ); },
	            keypress:              function ( event ) { onKeyPress( _this, event ); },
	            focus:                 function ( event ) { onFocus( _this, event ); },
	            blur:                  function ( event ) { onBlur( _this, event ); },
	
	            wheel:                 function ( event ) { onWheel( _this, event ); },
	            mousewheel:            function ( event ) { onMouseWheel( _this, event ); },
	            DOMMouseScroll:        function ( event ) { onMouseWheel( _this, event ); },
	            MozMousePixelScroll:   function ( event ) { onMouseWheel( _this, event ); },
	
	            mouseenter:            function ( event ) { onMouseEnter( _this, event ); }, // Used on IE8 only
	            mouseleave:            function ( event ) { onMouseLeave( _this, event ); }, // Used on IE8 only
	            mouseover:             function ( event ) { onMouseOver( _this, event ); },
	            mouseout:              function ( event ) { onMouseOut( _this, event ); },
	            mousedown:             function ( event ) { onMouseDown( _this, event ); },
	            mouseup:               function ( event ) { onMouseUp( _this, event ); },
	            mouseupcaptured:       function ( event ) { onMouseUpCaptured( _this, event ); },
	            mousemove:             function ( event ) { onMouseMove( _this, event ); },
	            mousemovecaptured:     function ( event ) { onMouseMoveCaptured( _this, event ); },
	
	            touchstart:            function ( event ) { onTouchStart( _this, event ); },
	            touchend:              function ( event ) { onTouchEnd( _this, event ); },
	            touchendcaptured:      function ( event ) { onTouchEndCaptured( _this, event ); },
	            touchmove:             function ( event ) { onTouchMove( _this, event ); },
	            touchmovecaptured:     function ( event ) { onTouchMoveCaptured( _this, event ); },
	            touchcancel:           function ( event ) { onTouchCancel( _this, event ); },
	
	            gesturestart:          function ( event ) { onGestureStart( _this, event ); },
	            gesturechange:         function ( event ) { onGestureChange( _this, event ); },
	
	            pointerover:           function ( event ) { onPointerOver( _this, event ); },
	            MSPointerOver:         function ( event ) { onPointerOver( _this, event ); },
	            pointerout:            function ( event ) { onPointerOut( _this, event ); },
	            MSPointerOut:          function ( event ) { onPointerOut( _this, event ); },
	            pointerdown:           function ( event ) { onPointerDown( _this, event ); },
	            MSPointerDown:         function ( event ) { onPointerDown( _this, event ); },
	            pointerup:             function ( event ) { onPointerUp( _this, event ); },
	            MSPointerUp:           function ( event ) { onPointerUp( _this, event ); },
	            pointermove:           function ( event ) { onPointerMove( _this, event ); },
	            MSPointerMove:         function ( event ) { onPointerMove( _this, event ); },
	            pointercancel:         function ( event ) { onPointerCancel( _this, event ); },
	            MSPointerCancel:       function ( event ) { onPointerCancel( _this, event ); },
	            pointerupcaptured:     function ( event ) { onPointerUpCaptured( _this, event ); },
	            pointermovecaptured:   function ( event ) { onPointerMoveCaptured( _this, event ); },
	
	            tracking:              false,
	
	            // Active pointers lists. Array of GesturePointList objects, one for each pointer device type.
	            // GesturePointList objects are added each time a pointer is tracked by a new pointer device type (see getActivePointersListByType()).
	            // Active pointers are any pointer being tracked for this element which are in the hit-test area
	            //     of the element (for hover-capable devices) and/or have contact or a button press initiated in the element.
	            activePointersLists:   [],
	
	            // Tracking for double-click gesture
	            lastClickPos:          null,
	            dblClickTimeOut:       null,
	
	            // Tracking for pinch gesture
	            pinchGPoints:          [],
	            lastPinchDist:         0,
	            currentPinchDist:      0,
	            lastPinchCenter:       null,
	            currentPinchCenter:    null
	        };
	
	        if ( !options.startDisabled ) {
	            this.setTracking( true );
	        }
	    };
	
	    /** @lends OpenSeadragon.MouseTracker.prototype */
	    $.MouseTracker.prototype = {
	
	        /**
	         * Clean up any events or objects created by the tracker.
	         * @function
	         */
	        destroy: function () {
	            var i;
	
	            stopTracking( this );
	            this.element = null;
	
	            for ( i = 0; i < MOUSETRACKERS.length; i++ ) {
	                if ( MOUSETRACKERS[ i ] === this ) {
	                    MOUSETRACKERS.splice( i, 1 );
	                    break;
	                }
	            }
	
	            THIS[ this.hash ] = null;
	            delete THIS[ this.hash ];
	        },
	
	        /**
	         * Are we currently tracking events on this element.
	         * @deprecated Just use this.tracking
	         * @function
	         * @returns {Boolean} Are we currently tracking events on this element.
	         */
	        isTracking: function () {
	            return THIS[ this.hash ].tracking;
	        },
	
	        /**
	         * Enable or disable whether or not we are tracking events on this element.
	         * @function
	         * @param {Boolean} track True to start tracking, false to stop tracking.
	         * @returns {OpenSeadragon.MouseTracker} Chainable.
	         */
	        setTracking: function ( track ) {
	            if ( track ) {
	                startTracking( this );
	            } else {
	                stopTracking( this );
	            }
	            //chain
	            return this;
	        },
	
	        /**
	         * Returns the {@link OpenSeadragon.MouseTracker.GesturePointList|GesturePointList} for the given pointer device type,
	         * creating and caching a new {@link OpenSeadragon.MouseTracker.GesturePointList|GesturePointList} if one doesn't already exist for the type.
	         * @function
	         * @param {String} type - The pointer device type: "mouse", "touch", "pen", etc.
	         * @returns {OpenSeadragon.MouseTracker.GesturePointList}
	         */
	        getActivePointersListByType: function ( type ) {
	            var delegate = THIS[ this.hash ],
	                i,
	                len = delegate.activePointersLists.length,
	                list;
	
	            for ( i = 0; i < len; i++ ) {
	                if ( delegate.activePointersLists[ i ].type === type ) {
	                    return delegate.activePointersLists[ i ];
	                }
	            }
	
	            list = new $.MouseTracker.GesturePointList( type );
	            delegate.activePointersLists.push( list );
	            return list;
	        },
	
	        /**
	         * Returns the total number of pointers currently active on the tracked element.
	         * @function
	         * @returns {Number}
	         */
	        getActivePointerCount: function () {
	            var delegate = THIS[ this.hash ],
	                i,
	                len = delegate.activePointersLists.length,
	                count = 0;
	
	            for ( i = 0; i < len; i++ ) {
	                count += delegate.activePointersLists[ i ].getLength();
	            }
	
	            return count;
	        },
	
	        /**
	         * Implement or assign implementation to these handlers during or after
	         * calling the constructor.
	         * @function
	         * @param {Object} event
	         * @param {OpenSeadragon.MouseTracker} event.eventSource
	         *      A reference to the tracker instance.
	         * @param {String} event.pointerType
	         *     "mouse", "touch", "pen", etc.
	         * @param {OpenSeadragon.Point} event.position
	         *      The position of the event relative to the tracked element.
	         * @param {Number} event.buttons
	         *      Current buttons pressed.
	         *      Combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.
	         * @param {Number} event.pointers
	         *      Number of pointers (all types) active in the tracked element.
	         * @param {Boolean} event.insideElementPressed
	         *      True if the left mouse button is currently being pressed and was
	         *      initiated inside the tracked element, otherwise false.
	         * @param {Boolean} event.buttonDownAny
	         *      Was the button down anywhere in the screen during the event. <span style="color:red;">Deprecated. Use buttons instead.</span>
	         * @param {Boolean} event.isTouchEvent
	         *      True if the original event is a touch event, otherwise false. <span style="color:red;">Deprecated. Use pointerType and/or originalEvent instead.</span>
	         * @param {Object} event.originalEvent
	         *      The original event object.
	         * @param {Boolean} event.preventDefaultAction
	         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.
	         * @param {Object} event.userData
	         *      Arbitrary user-defined object.
	         */
	        enterHandler: function () { },
	
	        /**
	         * Implement or assign implementation to these handlers during or after
	         * calling the constructor.
	         * @function
	         * @param {Object} event
	         * @param {OpenSeadragon.MouseTracker} event.eventSource
	         *      A reference to the tracker instance.
	         * @param {String} event.pointerType
	         *     "mouse", "touch", "pen", etc.
	         * @param {OpenSeadragon.Point} event.position
	         *      The position of the event relative to the tracked element.
	         * @param {Number} event.buttons
	         *      Current buttons pressed.
	         *      Combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.
	         * @param {Number} event.pointers
	         *      Number of pointers (all types) active in the tracked element.
	         * @param {Boolean} event.insideElementPressed
	         *      True if the left mouse button is currently being pressed and was
	         *      initiated inside the tracked element, otherwise false.
	         * @param {Boolean} event.buttonDownAny
	         *      Was the button down anywhere in the screen during the event. <span style="color:red;">Deprecated. Use buttons instead.</span>
	         * @param {Boolean} event.isTouchEvent
	         *      True if the original event is a touch event, otherwise false. <span style="color:red;">Deprecated. Use pointerType and/or originalEvent instead.</span>
	         * @param {Object} event.originalEvent
	         *      The original event object.
	         * @param {Boolean} event.preventDefaultAction
	         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.
	         * @param {Object} event.userData
	         *      Arbitrary user-defined object.
	         */
	        exitHandler: function () { },
	
	        /**
	         * Implement or assign implementation to these handlers during or after
	         * calling the constructor.
	         * @function
	         * @param {Object} event
	         * @param {OpenSeadragon.MouseTracker} event.eventSource
	         *      A reference to the tracker instance.
	         * @param {String} event.pointerType
	         *     "mouse", "touch", "pen", etc.
	         * @param {OpenSeadragon.Point} event.position
	         *      The position of the event relative to the tracked element.
	         * @param {Number} event.buttons
	         *      Current buttons pressed.
	         *      Combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.
	         * @param {Boolean} event.isTouchEvent
	         *      True if the original event is a touch event, otherwise false. <span style="color:red;">Deprecated. Use pointerType and/or originalEvent instead.</span>
	         * @param {Object} event.originalEvent
	         *      The original event object.
	         * @param {Boolean} event.preventDefaultAction
	         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.
	         * @param {Object} event.userData
	         *      Arbitrary user-defined object.
	         */
	        pressHandler: function () { },
	
	        /**
	         * Implement or assign implementation to these handlers during or after
	         * calling the constructor.
	         * @function
	         * @param {Object} event
	         * @param {OpenSeadragon.MouseTracker} event.eventSource
	         *      A reference to the tracker instance.
	         * @param {String} event.pointerType
	         *     "mouse", "touch", "pen", etc.
	         * @param {OpenSeadragon.Point} event.position
	         *      The position of the event relative to the tracked element.
	         * @param {Number} event.button
	         *      Button which caused the event.
	         *      -1: none, 0: primary/left, 1: aux/middle, 2: secondary/right, 3: X1/back, 4: X2/forward, 5: pen eraser.
	         * @param {Number} event.buttons
	         *      Current buttons pressed.
	         *      Combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.
	         * @param {Boolean} event.isTouchEvent
	         *      True if the original event is a touch event, otherwise false. <span style="color:red;">Deprecated. Use pointerType and/or originalEvent instead.</span>
	         * @param {Object} event.originalEvent
	         *      The original event object.
	         * @param {Boolean} event.preventDefaultAction
	         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.
	         * @param {Object} event.userData
	         *      Arbitrary user-defined object.
	         */
	        nonPrimaryPressHandler: function () { },
	
	        /**
	         * Implement or assign implementation to these handlers during or after
	         * calling the constructor.
	         * @function
	         * @param {Object} event
	         * @param {OpenSeadragon.MouseTracker} event.eventSource
	         *      A reference to the tracker instance.
	         * @param {String} event.pointerType
	         *     "mouse", "touch", "pen", etc.
	         * @param {OpenSeadragon.Point} event.position
	         *      The position of the event relative to the tracked element.
	         * @param {Number} event.buttons
	         *      Current buttons pressed.
	         *      Combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.
	         * @param {Boolean} event.insideElementPressed
	         *      True if the left mouse button is currently being pressed and was
	         *      initiated inside the tracked element, otherwise false.
	         * @param {Boolean} event.insideElementReleased
	         *      True if the cursor inside the tracked element when the button was released.
	         * @param {Boolean} event.isTouchEvent
	         *      True if the original event is a touch event, otherwise false. <span style="color:red;">Deprecated. Use pointerType and/or originalEvent instead.</span>
	         * @param {Object} event.originalEvent
	         *      The original event object.
	         * @param {Boolean} event.preventDefaultAction
	         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.
	         * @param {Object} event.userData
	         *      Arbitrary user-defined object.
	         */
	        releaseHandler: function () { },
	
	        /**
	         * Implement or assign implementation to these handlers during or after
	         * calling the constructor.
	         * @function
	         * @param {Object} event
	         * @param {OpenSeadragon.MouseTracker} event.eventSource
	         *      A reference to the tracker instance.
	         * @param {String} event.pointerType
	         *     "mouse", "touch", "pen", etc.
	         * @param {OpenSeadragon.Point} event.position
	         *      The position of the event relative to the tracked element.
	         * @param {Number} event.button
	         *      Button which caused the event.
	         *      -1: none, 0: primary/left, 1: aux/middle, 2: secondary/right, 3: X1/back, 4: X2/forward, 5: pen eraser.
	         * @param {Number} event.buttons
	         *      Current buttons pressed.
	         *      Combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.
	         * @param {Boolean} event.isTouchEvent
	         *      True if the original event is a touch event, otherwise false. <span style="color:red;">Deprecated. Use pointerType and/or originalEvent instead.</span>
	         * @param {Object} event.originalEvent
	         *      The original event object.
	         * @param {Boolean} event.preventDefaultAction
	         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.
	         * @param {Object} event.userData
	         *      Arbitrary user-defined object.
	         */
	        nonPrimaryReleaseHandler: function () { },
	
	        /**
	         * Implement or assign implementation to these handlers during or after
	         * calling the constructor.
	         * @function
	         * @param {Object} event
	         * @param {OpenSeadragon.MouseTracker} event.eventSource
	         *      A reference to the tracker instance.
	         * @param {String} event.pointerType
	         *     "mouse", "touch", "pen", etc.
	         * @param {OpenSeadragon.Point} event.position
	         *      The position of the event relative to the tracked element.
	         * @param {Number} event.buttons
	         *      Current buttons pressed.
	         *      Combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.
	         * @param {Boolean} event.isTouchEvent
	         *      True if the original event is a touch event, otherwise false. <span style="color:red;">Deprecated. Use pointerType and/or originalEvent instead.</span>
	         * @param {Object} event.originalEvent
	         *      The original event object.
	         * @param {Boolean} event.preventDefaultAction
	         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.
	         * @param {Object} event.userData
	         *      Arbitrary user-defined object.
	         */
	        moveHandler: function () { },
	
	        /**
	         * Implement or assign implementation to these handlers during or after
	         * calling the constructor.
	         * @function
	         * @param {Object} event
	         * @param {OpenSeadragon.MouseTracker} event.eventSource
	         *      A reference to the tracker instance.
	         * @param {String} event.pointerType
	         *     "mouse", "touch", "pen", etc.
	         * @param {OpenSeadragon.Point} event.position
	         *      The position of the event relative to the tracked element.
	         * @param {Number} event.scroll
	         *      The scroll delta for the event.
	         * @param {Boolean} event.shift
	         *      True if the shift key was pressed during this event.
	         * @param {Boolean} event.isTouchEvent
	         *      True if the original event is a touch event, otherwise false. <span style="color:red;">Deprecated. Use pointerType and/or originalEvent instead. Touch devices no longer generate scroll event.</span>
	         * @param {Object} event.originalEvent
	         *      The original event object.
	         * @param {Boolean} event.preventDefaultAction
	         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.
	         * @param {Object} event.userData
	         *      Arbitrary user-defined object.
	         */
	        scrollHandler: function () { },
	
	        /**
	         * Implement or assign implementation to these handlers during or after
	         * calling the constructor.
	         * @function
	         * @param {Object} event
	         * @param {OpenSeadragon.MouseTracker} event.eventSource
	         *      A reference to the tracker instance.
	         * @param {String} event.pointerType
	         *     "mouse", "touch", "pen", etc.
	         * @param {OpenSeadragon.Point} event.position
	         *      The position of the event relative to the tracked element.
	         * @param {Boolean} event.quick
	         *      True only if the clickDistThreshold and clickTimeThreshold are both passed. Useful for ignoring drag events.
	         * @param {Boolean} event.shift
	         *      True if the shift key was pressed during this event.
	         * @param {Boolean} event.isTouchEvent
	         *      True if the original event is a touch event, otherwise false. <span style="color:red;">Deprecated. Use pointerType and/or originalEvent instead.</span>
	         * @param {Object} event.originalEvent
	         *      The original event object.
	         * @param {Boolean} event.preventDefaultAction
	         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.
	         * @param {Object} event.userData
	         *      Arbitrary user-defined object.
	         */
	        clickHandler: function () { },
	
	        /**
	         * Implement or assign implementation to these handlers during or after
	         * calling the constructor.
	         * @function
	         * @param {Object} event
	         * @param {OpenSeadragon.MouseTracker} event.eventSource
	         *      A reference to the tracker instance.
	         * @param {String} event.pointerType
	         *     "mouse", "touch", "pen", etc.
	         * @param {OpenSeadragon.Point} event.position
	         *      The position of the event relative to the tracked element.
	         * @param {Boolean} event.shift
	         *      True if the shift key was pressed during this event.
	         * @param {Boolean} event.isTouchEvent
	         *      True if the original event is a touch event, otherwise false. <span style="color:red;">Deprecated. Use pointerType and/or originalEvent instead.</span>
	         * @param {Object} event.originalEvent
	         *      The original event object.
	         * @param {Boolean} event.preventDefaultAction
	         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.
	         * @param {Object} event.userData
	         *      Arbitrary user-defined object.
	         */
	        dblClickHandler: function () { },
	
	        /**
	         * Implement or assign implementation to these handlers during or after
	         * calling the constructor.
	         * @function
	         * @param {Object} event
	         * @param {OpenSeadragon.MouseTracker} event.eventSource
	         *      A reference to the tracker instance.
	         * @param {String} event.pointerType
	         *     "mouse", "touch", "pen", etc.
	         * @param {OpenSeadragon.Point} event.position
	         *      The position of the event relative to the tracked element.
	         * @param {Number} event.buttons
	         *      Current buttons pressed.
	         *      Combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.
	         * @param {OpenSeadragon.Point} event.delta
	         *      The x,y components of the difference between the current position and the last drag event position.  Useful for ignoring or weighting the events.
	         * @param {Number} event.speed
	         *     Current computed speed, in pixels per second.
	         * @param {Number} event.direction
	         *     Current computed direction, expressed as an angle counterclockwise relative to the positive X axis (-pi to pi, in radians). Only valid if speed > 0.
	         * @param {Boolean} event.shift
	         *      True if the shift key was pressed during this event.
	         * @param {Boolean} event.isTouchEvent
	         *      True if the original event is a touch event, otherwise false. <span style="color:red;">Deprecated. Use pointerType and/or originalEvent instead.</span>
	         * @param {Object} event.originalEvent
	         *      The original event object.
	         * @param {Boolean} event.preventDefaultAction
	         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.
	         * @param {Object} event.userData
	         *      Arbitrary user-defined object.
	         */
	        dragHandler: function () { },
	
	        /**
	         * Implement or assign implementation to these handlers during or after
	         * calling the constructor.
	         * @function
	         * @param {Object} event
	         * @param {OpenSeadragon.MouseTracker} event.eventSource
	         *      A reference to the tracker instance.
	         * @param {String} event.pointerType
	         *     "mouse", "touch", "pen", etc.
	         * @param {OpenSeadragon.Point} event.position
	         *      The position of the event relative to the tracked element.
	         * @param {Number} event.speed
	         *     Speed at the end of a drag gesture, in pixels per second.
	         * @param {Number} event.direction
	         *     Direction at the end of a drag gesture, expressed as an angle counterclockwise relative to the positive X axis (-pi to pi, in radians). Only valid if speed > 0.
	         * @param {Boolean} event.shift
	         *      True if the shift key was pressed during this event.
	         * @param {Boolean} event.isTouchEvent
	         *      True if the original event is a touch event, otherwise false. <span style="color:red;">Deprecated. Use pointerType and/or originalEvent instead.</span>
	         * @param {Object} event.originalEvent
	         *      The original event object.
	         * @param {Boolean} event.preventDefaultAction
	         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.
	         * @param {Object} event.userData
	         *      Arbitrary user-defined object.
	         */
	        dragEndHandler: function () { },
	
	        /**
	         * Implement or assign implementation to these handlers during or after
	         * calling the constructor.
	         * @function
	         * @param {Object} event
	         * @param {OpenSeadragon.MouseTracker} event.eventSource
	         *      A reference to the tracker instance.
	         * @param {String} event.pointerType
	         *     "mouse", "touch", "pen", etc.
	         * @param {Array.<OpenSeadragon.MouseTracker.GesturePoint>} event.gesturePoints
	         *      Gesture points associated with the gesture. Velocity data can be found here.
	         * @param {OpenSeadragon.Point} event.lastCenter
	         *      The previous center point of the two pinch contact points relative to the tracked element.
	         * @param {OpenSeadragon.Point} event.center
	         *      The center point of the two pinch contact points relative to the tracked element.
	         * @param {Number} event.lastDistance
	         *      The previous distance between the two pinch contact points in CSS pixels.
	         * @param {Number} event.distance
	         *      The distance between the two pinch contact points in CSS pixels.
	         * @param {Boolean} event.shift
	         *      True if the shift key was pressed during this event.
	         * @param {Object} event.originalEvent
	         *      The original event object.
	         * @param {Boolean} event.preventDefaultAction
	         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.
	         * @param {Object} event.userData
	         *      Arbitrary user-defined object.
	         */
	        pinchHandler: function () { },
	
	        /**
	         * Implement or assign implementation to these handlers during or after
	         * calling the constructor.
	         * @function
	         * @param {Object} event
	         * @param {OpenSeadragon.MouseTracker} event.eventSource
	         *      A reference to the tracker instance.
	         * @param {String} event.pointerType
	         *     "mouse", "touch", "pen", etc.
	         * @param {OpenSeadragon.Point} event.position
	         *      The position of the event relative to the tracked element.
	         * @param {Number} event.buttons
	         *      Current buttons pressed.
	         *      Combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.
	         * @param {Boolean} event.isTouchEvent
	         *      True if the original event is a touch event, otherwise false. <span style="color:red;">Deprecated. Use pointerType and/or originalEvent instead.</span>
	         * @param {Object} event.originalEvent
	         *      The original event object.
	         * @param {Boolean} event.preventDefaultAction
	         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.
	         * @param {Object} event.userData
	         *      Arbitrary user-defined object.
	         */
	        stopHandler: function () { },
	
	        /**
	         * Implement or assign implementation to these handlers during or after
	         * calling the constructor.
	         * @function
	         * @param {Object} event
	         * @param {OpenSeadragon.MouseTracker} event.eventSource
	         *      A reference to the tracker instance.
	         * @param {Number} event.keyCode
	         *      The key code that was pressed.
	         * @param {Boolean} event.ctrl
	         *      True if the ctrl key was pressed during this event.
	         * @param {Boolean} event.shift
	         *      True if the shift key was pressed during this event.
	         * @param {Boolean} event.alt
	         *      True if the alt key was pressed during this event.
	         * @param {Boolean} event.meta
	         *      True if the meta key was pressed during this event.
	         * @param {Object} event.originalEvent
	         *      The original event object.
	         * @param {Boolean} event.preventDefaultAction
	         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.
	         * @param {Object} event.userData
	         *      Arbitrary user-defined object.
	         */
	        keyDownHandler: function () { },
	
	        /**
	         * Implement or assign implementation to these handlers during or after
	         * calling the constructor.
	         * @function
	         * @param {Object} event
	         * @param {OpenSeadragon.MouseTracker} event.eventSource
	         *      A reference to the tracker instance.
	         * @param {Number} event.keyCode
	         *      The key code that was pressed.
	         * @param {Boolean} event.ctrl
	         *      True if the ctrl key was pressed during this event.
	         * @param {Boolean} event.shift
	         *      True if the shift key was pressed during this event.
	         * @param {Boolean} event.alt
	         *      True if the alt key was pressed during this event.
	         * @param {Boolean} event.meta
	         *      True if the meta key was pressed during this event.
	         * @param {Object} event.originalEvent
	         *      The original event object.
	         * @param {Boolean} event.preventDefaultAction
	         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.
	         * @param {Object} event.userData
	         *      Arbitrary user-defined object.
	         */
	        keyUpHandler: function () { },
	
	        /**
	         * Implement or assign implementation to these handlers during or after
	         * calling the constructor.
	         * @function
	         * @param {Object} event
	         * @param {OpenSeadragon.MouseTracker} event.eventSource
	         *      A reference to the tracker instance.
	         * @param {Number} event.keyCode
	         *      The key code that was pressed.
	         * @param {Boolean} event.ctrl
	         *      True if the ctrl key was pressed during this event.
	         * @param {Boolean} event.shift
	         *      True if the shift key was pressed during this event.
	         * @param {Boolean} event.alt
	         *      True if the alt key was pressed during this event.
	         * @param {Boolean} event.meta
	         *      True if the meta key was pressed during this event.
	         * @param {Object} event.originalEvent
	         *      The original event object.
	         * @param {Boolean} event.preventDefaultAction
	         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.
	         * @param {Object} event.userData
	         *      Arbitrary user-defined object.
	         */
	        keyHandler: function () { },
	
	        /**
	         * Implement or assign implementation to these handlers during or after
	         * calling the constructor.
	         * @function
	         * @param {Object} event
	         * @param {OpenSeadragon.MouseTracker} event.eventSource
	         *      A reference to the tracker instance.
	         * @param {Object} event.originalEvent
	         *      The original event object.
	         * @param {Boolean} event.preventDefaultAction
	         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.
	         * @param {Object} event.userData
	         *      Arbitrary user-defined object.
	         */
	        focusHandler: function () { },
	
	        /**
	         * Implement or assign implementation to these handlers during or after
	         * calling the constructor.
	         * @function
	         * @param {Object} event
	         * @param {OpenSeadragon.MouseTracker} event.eventSource
	         *      A reference to the tracker instance.
	         * @param {Object} event.originalEvent
	         *      The original event object.
	         * @param {Boolean} event.preventDefaultAction
	         *      Set to true to prevent the tracker subscriber from performing its default action (subscriber implementation dependent). Default: false.
	         * @param {Object} event.userData
	         *      Arbitrary user-defined object.
	         */
	        blurHandler: function () { }
	    };
	
	
	    /**
	     * Provides continuous computation of velocity (speed and direction) of active pointers.
	     * This is a singleton, used by all MouseTracker instances, as it is unlikely there will ever be more than
	     * two active gesture pointers at a time.
	     *
	     * @private
	     * @member gesturePointVelocityTracker
	     * @memberof OpenSeadragon.MouseTracker
	     */
	    $.MouseTracker.gesturePointVelocityTracker = (function () {
	        var trackerPoints = [],
	            intervalId = 0,
	            lastTime = 0;
	
	        // Generates a unique identifier for a tracked gesture point
	        var _generateGuid = function ( tracker, gPoint ) {
	            return tracker.hash.toString() + gPoint.type + gPoint.id.toString();
	        };
	
	        // Interval timer callback. Computes velocity for all tracked gesture points.
	        var _doTracking = function () {
	            var i,
	                len = trackerPoints.length,
	                trackPoint,
	                gPoint,
	                now = $.now(),
	                elapsedTime,
	                distance,
	                speed;
	
	            elapsedTime = now - lastTime;
	            lastTime = now;
	
	            for ( i = 0; i < len; i++ ) {
	                trackPoint = trackerPoints[ i ];
	                gPoint = trackPoint.gPoint;
	                // Math.atan2 gives us just what we need for a velocity vector, as we can simply
	                //   use cos()/sin() to extract the x/y velocity components.
	                gPoint.direction = Math.atan2( gPoint.currentPos.y - trackPoint.lastPos.y, gPoint.currentPos.x - trackPoint.lastPos.x );
	                // speed = distance / elapsed time
	                distance = trackPoint.lastPos.distanceTo( gPoint.currentPos );
	                trackPoint.lastPos = gPoint.currentPos;
	                speed = 1000 * distance / ( elapsedTime + 1 );
	                // Simple biased average, favors the most recent speed computation. Smooths out erratic gestures a bit.
	                gPoint.speed = 0.75 * speed + 0.25 * gPoint.speed;
	            }
	        };
	
	        // Public. Add a gesture point to be tracked
	        var addPoint = function ( tracker, gPoint ) {
	            var guid = _generateGuid( tracker, gPoint );
	
	            trackerPoints.push(
	                {
	                    guid: guid,
	                    gPoint: gPoint,
	                    lastPos: gPoint.currentPos
	                } );
	
	            // Only fire up the interval timer when there's gesture pointers to track
	            if ( trackerPoints.length === 1 ) {
	                lastTime = $.now();
	                intervalId = window.setInterval( _doTracking, 50 );
	            }
	        };
	
	        // Public. Stop tracking a gesture point
	        var removePoint = function ( tracker, gPoint ) {
	            var guid = _generateGuid( tracker, gPoint ),
	                i,
	                len = trackerPoints.length;
	            for ( i = 0; i < len; i++ ) {
	                if ( trackerPoints[ i ].guid === guid ) {
	                    trackerPoints.splice( i, 1 );
	                    // Only run the interval timer if theres gesture pointers to track
	                    len--;
	                    if ( len === 0 ) {
	                        window.clearInterval( intervalId );
	                    }
	                    break;
	                }
	            }
	        };
	
	        return {
	            addPoint:    addPoint,
	            removePoint: removePoint
	        };
	    } )();
	
	
	///////////////////////////////////////////////////////////////////////////////
	// Pointer event model and feature detection
	///////////////////////////////////////////////////////////////////////////////
	
	    $.MouseTracker.captureElement = document;
	
	    /**
	     * Detect available mouse wheel event name.
	     */
	    $.MouseTracker.wheelEventName = ( $.Browser.vendor == $.BROWSERS.IE && $.Browser.version > 8 ) ||
	                                                ( 'onwheel' in document.createElement( 'div' ) ) ? 'wheel' : // Modern browsers support 'wheel'
	                                    document.onmousewheel !== undefined ? 'mousewheel' :                     // Webkit and IE support at least 'mousewheel'
	                                    'DOMMouseScroll';                                                        // Assume old Firefox
	
	    /**
	     * Detect legacy mouse capture support.
	     */
	    $.MouseTracker.supportsMouseCapture = (function () {
	        var divElement = document.createElement( 'div' );
	        return $.isFunction( divElement.setCapture ) && $.isFunction( divElement.releaseCapture );
	    }());
	
	    /**
	     * Detect browser pointer device event model(s) and build appropriate list of events to subscribe to.
	     */
	    $.MouseTracker.subscribeEvents = [ "click", "dblclick", "keydown", "keyup", "keypress", "focus", "blur", $.MouseTracker.wheelEventName ];
	
	    if( $.MouseTracker.wheelEventName == "DOMMouseScroll" ) {
	        // Older Firefox
	        $.MouseTracker.subscribeEvents.push( "MozMousePixelScroll" );
	    }
	
	    // Note: window.navigator.pointerEnable is deprecated on IE 11 and not part of W3C spec.
	    if ( window.PointerEvent && ( window.navigator.pointerEnabled || $.Browser.vendor !== $.BROWSERS.IE ) ) {
	        // IE11 and other W3C Pointer Event implementations (see http://www.w3.org/TR/pointerevents)
	        $.MouseTracker.havePointerEvents = true;
	        $.MouseTracker.subscribeEvents.push( "pointerover", "pointerout", "pointerdown", "pointerup", "pointermove", "pointercancel" );
	        $.MouseTracker.unprefixedPointerEvents = true;
	        if( navigator.maxTouchPoints ) {
	            $.MouseTracker.maxTouchPoints = navigator.maxTouchPoints;
	        } else {
	            $.MouseTracker.maxTouchPoints = 0;
	        }
	        $.MouseTracker.haveMouseEnter = false;
	    } else if ( window.MSPointerEvent && window.navigator.msPointerEnabled ) {
	        // IE10
	        $.MouseTracker.havePointerEvents = true;
	        $.MouseTracker.subscribeEvents.push( "MSPointerOver", "MSPointerOut", "MSPointerDown", "MSPointerUp", "MSPointerMove", "MSPointerCancel" );
	        $.MouseTracker.unprefixedPointerEvents = false;
	        if( navigator.msMaxTouchPoints ) {
	            $.MouseTracker.maxTouchPoints = navigator.msMaxTouchPoints;
	        } else {
	            $.MouseTracker.maxTouchPoints = 0;
	        }
	        $.MouseTracker.haveMouseEnter = false;
	    } else {
	        // Legacy W3C mouse events
	        $.MouseTracker.havePointerEvents = false;
	        if ( $.Browser.vendor === $.BROWSERS.IE && $.Browser.version < 9 ) {
	            $.MouseTracker.subscribeEvents.push( "mouseenter", "mouseleave" );
	            $.MouseTracker.haveMouseEnter = true;
	        } else {
	            $.MouseTracker.subscribeEvents.push( "mouseover", "mouseout" );
	            $.MouseTracker.haveMouseEnter = false;
	        }
	        $.MouseTracker.subscribeEvents.push( "mousedown", "mouseup", "mousemove" );
	        if ( 'ontouchstart' in window ) {
	            // iOS, Android, and other W3c Touch Event implementations
	            //    (see http://www.w3.org/TR/touch-events/)
	            //    (see https://developer.apple.com/library/ios/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html)
	            //    (see https://developer.apple.com/library/safari/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html)
	            $.MouseTracker.subscribeEvents.push( "touchstart", "touchend", "touchmove", "touchcancel" );
	        }
	        if ( 'ongesturestart' in window ) {
	            // iOS (see https://developer.apple.com/library/ios/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html)
	            //   Subscribe to these to prevent default gesture handling
	            $.MouseTracker.subscribeEvents.push( "gesturestart", "gesturechange" );
	        }
	        $.MouseTracker.mousePointerId = "legacy-mouse";
	        $.MouseTracker.maxTouchPoints = 10;
	    }
	
	
	///////////////////////////////////////////////////////////////////////////////
	// Classes and typedefs
	///////////////////////////////////////////////////////////////////////////////
	
	    /**
	     * Represents a point of contact on the screen made by a mouse cursor, pen, touch, or other pointer device.
	     *
	     * @typedef {Object} GesturePoint
	     * @memberof OpenSeadragon.MouseTracker
	     *
	     * @property {Number} id
	     *     Identifier unique from all other active GesturePoints for a given pointer device.
	     * @property {String} type
	     *     The pointer device type: "mouse", "touch", "pen", etc.
	     * @property {Boolean} captured
	     *     True if events for the gesture point are captured to the tracked element.
	     * @property {Boolean} isPrimary
	     *     True if the gesture point is a master pointer amongst the set of active pointers for each pointer type. True for mouse and primary (first) touch/pen pointers.
	     * @property {Boolean} insideElementPressed
	     *     True if button pressed or contact point initiated inside the screen area of the tracked element.
	     * @property {Boolean} insideElement
	     *     True if pointer or contact point is currently inside the bounds of the tracked element.
	     * @property {Number} speed
	     *     Current computed speed, in pixels per second.
	     * @property {Number} direction
	     *     Current computed direction, expressed as an angle counterclockwise relative to the positive X axis (-pi to pi, in radians). Only valid if speed > 0.
	     * @property {OpenSeadragon.Point} contactPos
	     *     The initial pointer contact position, relative to the page including any scrolling. Only valid if the pointer has contact (pressed, touch contact, pen contact).
	     * @property {Number} contactTime
	     *     The initial pointer contact time, in milliseconds. Only valid if the pointer has contact (pressed, touch contact, pen contact).
	     * @property {OpenSeadragon.Point} lastPos
	     *     The last pointer position, relative to the page including any scrolling.
	     * @property {Number} lastTime
	     *     The last pointer contact time, in milliseconds.
	     * @property {OpenSeadragon.Point} currentPos
	     *     The current pointer position, relative to the page including any scrolling.
	     * @property {Number} currentTime
	     *     The current pointer contact time, in milliseconds.
	     */
	
	
	    /**
	     * @class GesturePointList
	     * @classdesc Provides an abstraction for a set of active {@link OpenSeadragon.MouseTracker.GesturePoint|GesturePoint} objects for a given pointer device type.
	     *            Active pointers are any pointer being tracked for this element which are in the hit-test area
	     *            of the element (for hover-capable devices) and/or have contact or a button press initiated in the element.
	     * @memberof OpenSeadragon.MouseTracker
	     * @param {String} type - The pointer device type: "mouse", "touch", "pen", etc.
	     */
	    $.MouseTracker.GesturePointList = function ( type ) {
	        this._gPoints = [];
	        /**
	         * The pointer device type: "mouse", "touch", "pen", etc.
	         * @member {String} type
	         * @memberof OpenSeadragon.MouseTracker.GesturePointList#
	         */
	        this.type = type;
	        /**
	         * Current buttons pressed for the device.
	         * Combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.
	         * @member {Number} buttons
	         * @memberof OpenSeadragon.MouseTracker.GesturePointList#
	         */
	        this.buttons = 0;
	        /**
	         * Current number of contact points (touch points, mouse down, etc.) for the device.
	         * @member {Number} contacts
	         * @memberof OpenSeadragon.MouseTracker.GesturePointList#
	         */
	        this.contacts = 0;
	        /**
	         * Current number of clicks for the device. Used for multiple click gesture tracking.
	         * @member {Number} clicks
	         * @memberof OpenSeadragon.MouseTracker.GesturePointList#
	         */
	        this.clicks = 0;
	        /**
	         * Current number of captured pointers for the device.
	         * @member {Number} captureCount
	         * @memberof OpenSeadragon.MouseTracker.GesturePointList#
	         */
	        this.captureCount = 0;
	    };
	
	    /** @lends OpenSeadragon.MouseTracker.GesturePointList.prototype */
	    $.MouseTracker.GesturePointList.prototype = {
	        /**
	         * @function
	         * @returns {Number} Number of gesture points in the list.
	         */
	        getLength: function () {
	            return this._gPoints.length;
	        },
	        /**
	         * @function
	         * @returns {Array.<OpenSeadragon.MouseTracker.GesturePoint>} The list of gesture points in the list as an array (read-only).
	         */
	        asArray: function () {
	            return this._gPoints;
	        },
	        /**
	         * @function
	         * @param {OpenSeadragon.MouseTracker.GesturePoint} gesturePoint - A gesture point to add to the list.
	         * @returns {Number} Number of gesture points in the list.
	         */
	        add: function ( gp ) {
	            return this._gPoints.push( gp );
	        },
	        /**
	         * @function
	         * @param {Number} id - The id of the gesture point to remove from the list.
	         * @returns {Number} Number of gesture points in the list.
	         */
	        removeById: function ( id ) {
	            var i,
	                len = this._gPoints.length;
	            for ( i = 0; i < len; i++ ) {
	                if ( this._gPoints[ i ].id === id ) {
	                    this._gPoints.splice( i, 1 );
	                    break;
	                }
	            }
	            return this._gPoints.length;
	        },
	        /**
	         * @function
	         * @param {Number} index - The index of the gesture point to retrieve from the list.
	         * @returns {OpenSeadragon.MouseTracker.GesturePoint|null} The gesture point at the given index, or null if not found.
	         */
	        getByIndex: function ( index ) {
	            if ( index < this._gPoints.length) {
	                return this._gPoints[ index ];
	            }
	
	            return null;
	        },
	        /**
	         * @function
	         * @param {Number} id - The id of the gesture point to retrieve from the list.
	         * @returns {OpenSeadragon.MouseTracker.GesturePoint|null} The gesture point with the given id, or null if not found.
	         */
	        getById: function ( id ) {
	            var i,
	                len = this._gPoints.length;
	            for ( i = 0; i < len; i++ ) {
	                if ( this._gPoints[ i ].id === id ) {
	                    return this._gPoints[ i ];
	                }
	            }
	            return null;
	        },
	        /**
	         * @function
	         * @returns {OpenSeadragon.MouseTracker.GesturePoint|null} The primary gesture point in the list, or null if not found.
	         */
	        getPrimary: function ( id ) {
	            var i,
	                len = this._gPoints.length;
	            for ( i = 0; i < len; i++ ) {
	                if ( this._gPoints[ i ].isPrimary ) {
	                    return this._gPoints[ i ];
	                }
	            }
	            return null;
	        }
	    };
	
	
	///////////////////////////////////////////////////////////////////////////////
	// Utility functions
	///////////////////////////////////////////////////////////////////////////////
	
	    /**
	     * Removes all tracked pointers.
	     * @private
	     * @inner
	     */
	    function clearTrackedPointers( tracker ) {
	        var delegate = THIS[ tracker.hash ],
	            i,
	            pointerListCount = delegate.activePointersLists.length;
	
	        for ( i = 0; i < pointerListCount; i++ ) {
	            if ( delegate.activePointersLists[ i ].captureCount > 0 ) {
	                $.removeEvent(
	                    $.MouseTracker.captureElement,
	                    'mousemove',
	                    delegate.mousemovecaptured,
	                    true
	                );
	                $.removeEvent(
	                    $.MouseTracker.captureElement,
	                    'mouseup',
	                    delegate.mouseupcaptured,
	                    true
	                );
	                $.removeEvent(
	                    $.MouseTracker.captureElement,
	                    $.MouseTracker.unprefixedPointerEvents ? 'pointermove' : 'MSPointerMove',
	                    delegate.pointermovecaptured,
	                    true
	                );
	                $.removeEvent(
	                    $.MouseTracker.captureElement,
	                    $.MouseTracker.unprefixedPointerEvents ? 'pointerup' : 'MSPointerUp',
	                    delegate.pointerupcaptured,
	                    true
	                );
	                $.removeEvent(
	                    $.MouseTracker.captureElement,
	                    'touchmove',
	                    delegate.touchmovecaptured,
	                    true
	                );
	                $.removeEvent(
	                    $.MouseTracker.captureElement,
	                    'touchend',
	                    delegate.touchendcaptured,
	                    true
	                );
	
	                delegate.activePointersLists[ i ].captureCount = 0;
	            }
	        }
	
	        for ( i = 0; i < pointerListCount; i++ ) {
	            delegate.activePointersLists.pop();
	        }
	    }
	
	    /**
	     * Starts tracking pointer events on the tracked element.
	     * @private
	     * @inner
	     */
	    function startTracking( tracker ) {
	        var delegate = THIS[ tracker.hash ],
	            event,
	            i;
	
	        if ( !delegate.tracking ) {
	            for ( i = 0; i < $.MouseTracker.subscribeEvents.length; i++ ) {
	                event = $.MouseTracker.subscribeEvents[ i ];
	                $.addEvent(
	                    tracker.element,
	                    event,
	                    delegate[ event ],
	                    false
	                );
	            }
	
	            clearTrackedPointers( tracker );
	
	            delegate.tracking = true;
	        }
	    }
	
	    /**
	     * Stops tracking pointer events on the tracked element.
	     * @private
	     * @inner
	     */
	    function stopTracking( tracker ) {
	        var delegate = THIS[ tracker.hash ],
	            event,
	            i;
	
	        if ( delegate.tracking ) {
	            for ( i = 0; i < $.MouseTracker.subscribeEvents.length; i++ ) {
	                event = $.MouseTracker.subscribeEvents[ i ];
	                $.removeEvent(
	                    tracker.element,
	                    event,
	                    delegate[ event ],
	                    false
	                );
	            }
	
	            clearTrackedPointers( tracker );
	
	            delegate.tracking = false;
	        }
	    }
	
	    /**
	     * @private
	     * @inner
	     */
	    function getCaptureEventParams( tracker, pointerType ) {
	        var delegate = THIS[ tracker.hash ];
	
	        if ( pointerType === 'pointerevent' ) {
	            return {
	                upName: $.MouseTracker.unprefixedPointerEvents ? 'pointerup' : 'MSPointerUp',
	                upHandler: delegate.pointerupcaptured,
	                moveName: $.MouseTracker.unprefixedPointerEvents ? 'pointermove' : 'MSPointerMove',
	                moveHandler: delegate.pointermovecaptured
	            };
	        } else if ( pointerType === 'mouse' ) {
	            return {
	                upName: 'mouseup',
	                upHandler: delegate.mouseupcaptured,
	                moveName: 'mousemove',
	                moveHandler: delegate.mousemovecaptured
	            };
	        } else if ( pointerType === 'touch' ) {
	            return {
	                upName: 'touchend',
	                upHandler: delegate.touchendcaptured,
	                moveName: 'touchmove',
	                moveHandler: delegate.touchmovecaptured
	            };
	        } else {
	            throw new Error( "MouseTracker.getCaptureEventParams: Unknown pointer type." );
	        }
	    }
	
	    /**
	     * Begin capturing pointer events to the tracked element.
	     * @private
	     * @inner
	     */
	    function capturePointer( tracker, pointerType, pointerCount ) {
	        var pointsList = tracker.getActivePointersListByType( pointerType ),
	            eventParams;
	
	        pointsList.captureCount += (pointerCount || 1);
	
	        if ( pointsList.captureCount === 1 ) {
	            if ( $.Browser.vendor === $.BROWSERS.IE && $.Browser.version < 9 ) {
	                tracker.element.setCapture( true );
	            } else {
	                eventParams = getCaptureEventParams( tracker, $.MouseTracker.havePointerEvents ? 'pointerevent' : pointerType );
	                // We emulate mouse capture by hanging listeners on the document object.
	                //    (Note we listen on the capture phase so the captured handlers will get called first)
	                if (isInIframe && canAccessEvents(window.top)) {
	                    $.addEvent(
	                        window.top,
	                        eventParams.upName,
	                        eventParams.upHandler,
	                        true
	                    );
	                }
	                $.addEvent(
	                    $.MouseTracker.captureElement,
	                    eventParams.upName,
	                    eventParams.upHandler,
	                    true
	                );
	                $.addEvent(
	                    $.MouseTracker.captureElement,
	                    eventParams.moveName,
	                    eventParams.moveHandler,
	                    true
	                );
	            }
	        }
	    }
	
	
	    /**
	     * Stop capturing pointer events to the tracked element.
	     * @private
	     * @inner
	     */
	    function releasePointer( tracker, pointerType, pointerCount ) {
	        var pointsList = tracker.getActivePointersListByType( pointerType ),
	            eventParams;
	
	        pointsList.captureCount -= (pointerCount || 1);
	
	        if ( pointsList.captureCount === 0 ) {
	            if ( $.Browser.vendor === $.BROWSERS.IE && $.Browser.version < 9 ) {
	                tracker.element.releaseCapture();
	            } else {
	                eventParams = getCaptureEventParams( tracker, $.MouseTracker.havePointerEvents ? 'pointerevent' : pointerType );
	                // We emulate mouse capture by hanging listeners on the document object.
	                //    (Note we listen on the capture phase so the captured handlers will get called first)
	                if (isInIframe && canAccessEvents(window.top)) {
	                    $.removeEvent(
	                        window.top,
	                        eventParams.upName,
	                        eventParams.upHandler,
	                        true
	                    );
	                }
	                $.removeEvent(
	                    $.MouseTracker.captureElement,
	                    eventParams.moveName,
	                    eventParams.moveHandler,
	                    true
	                );
	                $.removeEvent(
	                    $.MouseTracker.captureElement,
	                    eventParams.upName,
	                    eventParams.upHandler,
	                    true
	                );
	            }
	        }
	    }
	
	
	    /**
	     * Gets a W3C Pointer Events model compatible pointer type string from a DOM pointer event.
	     * IE10 used a long integer value, but the W3C specification (and IE11+) use a string "mouse", "touch", "pen", etc.
	     * @private
	     * @inner
	     */
	    function getPointerType( event ) {
	        var pointerTypeStr;
	        if ( $.MouseTracker.unprefixedPointerEvents ) {
	            pointerTypeStr = event.pointerType;
	        } else {
	            // IE10
	            //  MSPOINTER_TYPE_TOUCH: 0x00000002
	            //  MSPOINTER_TYPE_PEN:   0x00000003
	            //  MSPOINTER_TYPE_MOUSE: 0x00000004
	            switch( event.pointerType )
	            {
	                case 0x00000002:
	                    pointerTypeStr = 'touch';
	                    break;
	                case 0x00000003:
	                    pointerTypeStr = 'pen';
	                    break;
	                case 0x00000004:
	                    pointerTypeStr = 'mouse';
	                    break;
	                default:
	                    pointerTypeStr = '';
	            }
	        }
	        return pointerTypeStr;
	    }
	
	
	    /**
	     * @private
	     * @inner
	     */
	    function getMouseAbsolute( event ) {
	        return $.getMousePosition( event );
	    }
	
	    /**
	     * @private
	     * @inner
	     */
	    function getMouseRelative( event, element ) {
	        return getPointRelativeToAbsolute( getMouseAbsolute( event ), element );
	    }
	
	    /**
	     * @private
	     * @inner
	     */
	    function getPointRelativeToAbsolute( point, element ) {
	        var offset = $.getElementOffset( element );
	        return point.minus( offset );
	    }
	
	    /**
	     * @private
	     * @inner
	     */
	    function getCenterPoint( point1, point2 ) {
	        return new $.Point( ( point1.x + point2.x ) / 2, ( point1.y + point2.y ) / 2 );
	    }
	
	
	///////////////////////////////////////////////////////////////////////////////
	// Device-specific DOM event handlers
	///////////////////////////////////////////////////////////////////////////////
	
	    /**
	     * @private
	     * @inner
	     */
	    function onClick( tracker, event ) {
	        if ( tracker.clickHandler ) {
	            $.cancelEvent( event );
	        }
	    }
	
	
	    /**
	     * @private
	     * @inner
	     */
	    function onDblClick( tracker, event ) {
	        if ( tracker.dblClickHandler ) {
	            $.cancelEvent( event );
	        }
	    }
	
	
	    /**
	     * @private
	     * @inner
	     */
	    function onKeyDown( tracker, event ) {
	        //$.console.log( "keydown %s %s %s %s %s", event.keyCode, event.charCode, event.ctrlKey, event.shiftKey, event.altKey );
	        var propagate;
	        if ( tracker.keyDownHandler ) {
	            event = $.getEvent( event );
	            propagate = tracker.keyDownHandler(
	                {
	                    eventSource:          tracker,
	                    keyCode:              event.keyCode ? event.keyCode : event.charCode,
	                    ctrl:                 event.ctrlKey,
	                    shift:                event.shiftKey,
	                    alt:                  event.altKey,
	                    meta:                 event.metaKey,
	                    originalEvent:        event,
	                    preventDefaultAction: false,
	                    userData:             tracker.userData
	                }
	            );
	            if ( !propagate ) {
	                $.cancelEvent( event );
	            }
	        }
	    }
	
	
	    /**
	     * @private
	     * @inner
	     */
	    function onKeyUp( tracker, event ) {
	        //$.console.log( "keyup %s %s %s %s %s", event.keyCode, event.charCode, event.ctrlKey, event.shiftKey, event.altKey );
	        var propagate;
	        if ( tracker.keyUpHandler ) {
	            event = $.getEvent( event );
	            propagate = tracker.keyUpHandler(
	                {
	                    eventSource:          tracker,
	                    keyCode:              event.keyCode ? event.keyCode : event.charCode,
	                    ctrl:                 event.ctrlKey,
	                    shift:                event.shiftKey,
	                    alt:                  event.altKey,
	                    meta:                 event.metaKey,
	                    originalEvent:        event,
	                    preventDefaultAction: false,
	                    userData:             tracker.userData
	                }
	            );
	            if ( !propagate ) {
	                $.cancelEvent( event );
	            }
	        }
	    }
	
	
	    /**
	     * @private
	     * @inner
	     */
	    function onKeyPress( tracker, event ) {
	        //$.console.log( "keypress %s %s %s %s %s", event.keyCode, event.charCode, event.ctrlKey, event.shiftKey, event.altKey );
	        var propagate;
	        if ( tracker.keyHandler ) {
	            event = $.getEvent( event );
	            propagate = tracker.keyHandler(
	                {
	                    eventSource:          tracker,
	                    keyCode:              event.keyCode ? event.keyCode : event.charCode,
	                    ctrl:                 event.ctrlKey,
	                    shift:                event.shiftKey,
	                    alt:                  event.altKey,
	                    meta:                 event.metaKey,
	                    originalEvent:        event,
	                    preventDefaultAction: false,
	                    userData:             tracker.userData
	                }
	            );
	            if ( !propagate ) {
	                $.cancelEvent( event );
	            }
	        }
	    }
	
	
	    /**
	     * @private
	     * @inner
	     */
	    function onFocus( tracker, event ) {
	        //console.log( "focus %s", event );
	        var propagate;
	        if ( tracker.focusHandler ) {
	            event = $.getEvent( event );
	            propagate = tracker.focusHandler(
	                {
	                    eventSource:          tracker,
	                    originalEvent:        event,
	                    preventDefaultAction: false,
	                    userData:             tracker.userData
	                }
	            );
	            if ( propagate === false ) {
	                $.cancelEvent( event );
	            }
	        }
	    }
	
	
	    /**
	     * @private
	     * @inner
	     */
	    function onBlur( tracker, event ) {
	        //console.log( "blur %s", event );
	        var propagate;
	        if ( tracker.blurHandler ) {
	            event = $.getEvent( event );
	            propagate = tracker.blurHandler(
	                {
	                    eventSource:          tracker,
	                    originalEvent:        event,
	                    preventDefaultAction: false,
	                    userData:             tracker.userData
	                }
	            );
	            if ( propagate === false ) {
	                $.cancelEvent( event );
	            }
	        }
	    }
	
	
	    /**
	     * Handler for 'wheel' events
	     *
	     * @private
	     * @inner
	     */
	    function onWheel( tracker, event ) {
	        handleWheelEvent( tracker, event, event );
	    }
	
	
	    /**
	     * Handler for 'mousewheel', 'DOMMouseScroll', and 'MozMousePixelScroll' events
	     *
	     * @private
	     * @inner
	     */
	    function onMouseWheel( tracker, event ) {
	        event = $.getEvent( event );
	
	        // Simulate a 'wheel' event
	        var simulatedEvent = {
	            target:     event.target || event.srcElement,
	            type:       "wheel",
	            shiftKey:   event.shiftKey || false,
	            clientX:    event.clientX,
	            clientY:    event.clientY,
	            pageX:      event.pageX ? event.pageX : event.clientX,
	            pageY:      event.pageY ? event.pageY : event.clientY,
	            deltaMode:  event.type == "MozMousePixelScroll" ? 0 : 1, // 0=pixel, 1=line, 2=page
	            deltaX:     0,
	            deltaZ:     0
	        };
	
	        // Calculate deltaY
	        if ( $.MouseTracker.wheelEventName == "mousewheel" ) {
	            simulatedEvent.deltaY = - 1 / $.DEFAULT_SETTINGS.pixelsPerWheelLine * event.wheelDelta;
	        } else {
	            simulatedEvent.deltaY = event.detail;
	        }
	
	        handleWheelEvent( tracker, simulatedEvent, event );
	    }
	
	
	    /**
	     * Handles 'wheel' events.
	     * The event may be simulated by the legacy mouse wheel event handler (onMouseWheel()).
	     *
	     * @private
	     * @inner
	     */
	    function handleWheelEvent( tracker, event, originalEvent ) {
	        var nDelta = 0,
	            propagate;
	
	        // The nDelta variable is gated to provide smooth z-index scrolling
	        //   since the mouse wheel allows for substantial deltas meant for rapid
	        //   y-index scrolling.
	        // event.deltaMode: 0=pixel, 1=line, 2=page
	        // TODO: Deltas in pixel mode should be accumulated then a scroll value computed after $.DEFAULT_SETTINGS.pixelsPerWheelLine threshold reached
	        nDelta = event.deltaY < 0 ? 1 : -1;
	
	        if ( tracker.scrollHandler ) {
	            propagate = tracker.scrollHandler(
	                {
	                    eventSource:          tracker,
	                    pointerType:          'mouse',
	                    position:             getMouseRelative( event, tracker.element ),
	                    scroll:               nDelta,
	                    shift:                event.shiftKey,
	                    isTouchEvent:         false,
	                    originalEvent:        originalEvent,
	                    preventDefaultAction: false,
	                    userData:             tracker.userData
	                }
	            );
	            if ( propagate === false ) {
	                $.cancelEvent( originalEvent );
	            }
	        }
	    }
	
	
	    /**
	     * @private
	     * @inner
	     */
	    function isParentChild( parent, child )
	    {
	       if ( parent === child ) {
	           return false;
	       }
	       while ( child && child !== parent ) {
	           child = child.parentNode;
	       }
	       return child === parent;
	    }
	
	
	    /**
	     * Only used on IE 8
	     *
	     * @private
	     * @inner
	     */
	    function onMouseEnter( tracker, event ) {
	        event = $.getEvent( event );
	
	        handleMouseEnter( tracker, event );
	    }
	
	
	    /**
	     * @private
	     * @inner
	     */
	    function onMouseOver( tracker, event ) {
	        event = $.getEvent( event );
	
	        if ( event.currentTarget === event.relatedTarget || isParentChild( event.currentTarget, event.relatedTarget ) ) {
	            return;
	        }
	
	        handleMouseEnter( tracker, event );
	    }
	
	
	    /**
	     * @private
	     * @inner
	     */
	    function handleMouseEnter( tracker, event ) {
	        var gPoint = {
	            id: $.MouseTracker.mousePointerId,
	            type: 'mouse',
	            isPrimary: true,
	            currentPos: getMouseAbsolute( event ),
	            currentTime: $.now()
	        };
	
	        updatePointersEnter( tracker, event, [ gPoint ] );
	    }
	
	
	    /**
	     * Only used on IE 8
	     *
	     * @private
	     * @inner
	     */
	    function onMouseLeave( tracker, event ) {
	        event = $.getEvent( event );
	
	        handleMouseExit( tracker, event );
	    }
	
	
	    /**
	     * @private
	     * @inner
	     */
	    function onMouseOut( tracker, event ) {
	        event = $.getEvent( event );
	
	        if ( event.currentTarget === event.relatedTarget || isParentChild( event.currentTarget, event.relatedTarget ) ) {
	            return;
	        }
	
	        handleMouseExit( tracker, event );
	    }
	
	
	    /**
	     * @private
	     * @inner
	     */
	    function handleMouseExit( tracker, event ) {
	        var gPoint = {
	            id: $.MouseTracker.mousePointerId,
	            type: 'mouse',
	            isPrimary: true,
	            currentPos: getMouseAbsolute( event ),
	            currentTime: $.now()
	        };
	
	        updatePointersExit( tracker, event, [ gPoint ] );
	    }
	
	
	    /**
	     * Returns a W3C DOM level 3 standard button value given an event.button property:
	     *   -1 == none, 0 == primary/left, 1 == middle, 2 == secondary/right, 3 == X1/back, 4 == X2/forward, 5 == eraser (pen)
	     * @private
	     * @inner
	     */
	    function getStandardizedButton( button ) {
	        if ( $.Browser.vendor === $.BROWSERS.IE && $.Browser.version < 9 ) {
	            // On IE 8, 0 == none, 1 == left, 2 == right, 3 == left and right, 4 == middle, 5 == left and middle, 6 == right and middle, 7 == all three
	            // TODO: Support chorded (multiple) button presses on IE 8?
	            if ( button === 1 ) {
	                return 0;
	            } else if ( button === 2 ) {
	                return 2;
	            } else if ( button === 4 ) {
	                return 1;
	            } else {
	                return -1;
	            }
	        } else {
	            return button;
	        }
	    }
	
	
	    /**
	     * @private
	     * @inner
	     */
	    function onMouseDown( tracker, event ) {
	        var gPoint;
	
	        event = $.getEvent( event );
	
	        gPoint = {
	            id: $.MouseTracker.mousePointerId,
	            type: 'mouse',
	            isPrimary: true,
	            currentPos: getMouseAbsolute( event ),
	            currentTime: $.now()
	        };
	
	        if ( updatePointersDown( tracker, event, [ gPoint ], getStandardizedButton( event.button ) ) ) {
	            $.stopEvent( event );
	            capturePointer( tracker, 'mouse' );
	        }
	
	        if ( tracker.clickHandler || tracker.dblClickHandler || tracker.pressHandler || tracker.dragHandler || tracker.dragEndHandler ) {
	            $.cancelEvent( event );
	        }
	    }
	
	
	    /**
	     * @private
	     * @inner
	     */
	    function onMouseUp( tracker, event ) {
	        handleMouseUp( tracker, event );
	    }
	
	    /**
	     * This handler is attached to the window object (on the capture phase) to emulate mouse capture.
	     * onMouseUp is still attached to the tracked element, so stop propagation to avoid processing twice.
	     *
	     * @private
	     * @inner
	     */
	    function onMouseUpCaptured( tracker, event ) {
	        handleMouseUp( tracker, event );
	        $.stopEvent( event );
	    }
	
	
	    /**
	     * @private
	     * @inner
	     */
	    function handleMouseUp( tracker, event ) {
	        var gPoint;
	
	        event = $.getEvent( event );
	
	        gPoint = {
	            id: $.MouseTracker.mousePointerId,
	            type: 'mouse',
	            isPrimary: true,
	            currentPos: getMouseAbsolute( event ),
	            currentTime: $.now()
	        };
	
	        if ( updatePointersUp( tracker, event, [ gPoint ], getStandardizedButton( event.button ) ) ) {
	            releasePointer( tracker, 'mouse' );
	        }
	    }
	
	
	    /**
	     * @private
	     * @inner
	     */
	    function onMouseMove( tracker, event ) {
	        handleMouseMove( tracker, event );
	   }
	
	
	    /**
	     * This handler is attached to the window object (on the capture phase) to emulate mouse capture.
	     * onMouseMove is still attached to the tracked element, so stop propagation to avoid processing twice.
	     *
	     * @private
	     * @inner
	     */
	    function onMouseMoveCaptured( tracker, event ) {
	        handleMouseMove( tracker, event );
	        $.stopEvent( event );
	    }
	
	
	    /**
	     * @private
	     * @inner
	     */
	    function handleMouseMove( tracker, event ) {
	        var gPoint;
	
	        event = $.getEvent( event );
	
	        gPoint = {
	            id: $.MouseTracker.mousePointerId,
	            type: 'mouse',
	            isPrimary: true,
	            currentPos: getMouseAbsolute( event ),
	            currentTime: $.now()
	        };
	
	        updatePointersMove( tracker, event, [ gPoint ] );
	    }
	
	
	    /**
	     * @private
	     * @inner
	     */
	    function abortTouchContacts( tracker, event, pointsList ) {
	        var i,
	            gPointCount = pointsList.getLength(),
	            abortGPoints = [];
	
	        for ( i = 0; i < gPointCount; i++ ) {
	            abortGPoints.push( pointsList.getByIndex( i ) );
	        }
	
	        if ( abortGPoints.length > 0 ) {
	            // simulate touchend
	            updatePointersUp( tracker, event, abortGPoints, 0 ); // 0 means primary button press/release or touch contact
	            // release pointer capture
	            pointsList.captureCount = 1;
	            releasePointer( tracker, 'touch' );
	            // simulate touchleave
	            updatePointersExit( tracker, event, abortGPoints );
	        }
	    }
	
	
	    /**
	     * @private
	     * @inner
	     */
	    function onTouchStart( tracker, event ) {
	        var time,
	            i,
	            j,
	            touchCount = event.changedTouches.length,
	            gPoints = [],
	            parentGPoints,
	            pointsList = tracker.getActivePointersListByType( 'touch' );
	
	        time = $.now();
	
	        if ( pointsList.getLength() > event.touches.length - touchCount ) {
	            $.console.warn('Tracked touch contact count doesn\'t match event.touches.length. Removing all tracked touch pointers.');
	            abortTouchContacts( tracker, event, pointsList );
	        }
	
	        for ( i = 0; i < touchCount; i++ ) {
	            gPoints.push( {
	                id: event.changedTouches[ i ].identifier,
	                type: 'touch',
	                // isPrimary not set - let the updatePointers functions determine it
	                currentPos: getMouseAbsolute( event.changedTouches[ i ] ),
	                currentTime: time
	            } );
	        }
	
	        // simulate touchenter on our tracked element
	        updatePointersEnter( tracker, event, gPoints );
	
	        // simulate touchenter on our tracked element's tracked ancestor elements
	        for ( i = 0; i < MOUSETRACKERS.length; i++ ) {
	            if ( MOUSETRACKERS[ i ] !== tracker && MOUSETRACKERS[ i ].isTracking() && isParentChild( MOUSETRACKERS[ i ].element, tracker.element ) ) {
	                parentGPoints = [];
	                for ( j = 0; j < touchCount; j++ ) {
	                    parentGPoints.push( {
	                        id: event.changedTouches[ j ].identifier,
	                        type: 'touch',
	                        // isPrimary not set - let the updatePointers functions determine it
	                        currentPos: getMouseAbsolute( event.changedTouches[ j ] ),
	                        currentTime: time
	                    } );
	                }
	                updatePointersEnter( MOUSETRACKERS[ i ], event, parentGPoints );
	            }
	        }
	
	        if ( updatePointersDown( tracker, event, gPoints, 0 ) ) { // 0 means primary button press/release or touch contact
	            $.stopEvent( event );
	            capturePointer( tracker, 'touch', touchCount );
	        }
	
	        $.cancelEvent( event );
	    }
	
	
	    /**
	     * @private
	     * @inner
	     */
	    function onTouchEnd( tracker, event ) {
	        handleTouchEnd( tracker, event );
	    }
	
	
	    /**
	     * This handler is attached to the window object (on the capture phase) to emulate pointer capture.
	     * onTouchEnd is still attached to the tracked element, so stop propagation to avoid processing twice.
	     *
	     * @private
	     * @inner
	     */
	    function onTouchEndCaptured( tracker, event ) {
	        handleTouchEnd( tracker, event );
	        $.stopEvent( event );
	    }
	
	
	    /**
	     * @private
	     * @inner
	     */
	    function handleTouchEnd( tracker, event ) {
	        var time,
	            i,
	            j,
	            touchCount = event.changedTouches.length,
	            gPoints = [],
	            parentGPoints;
	
	        time = $.now();
	
	        for ( i = 0; i < touchCount; i++ ) {
	            gPoints.push( {
	                id: event.changedTouches[ i ].identifier,
	                type: 'touch',
	                // isPrimary not set - let the updatePointers functions determine it
	                currentPos: getMouseAbsolute( event.changedTouches[ i ] ),
	                currentTime: time
	            } );
	        }
	
	        if ( updatePointersUp( tracker, event, gPoints, 0 ) ) {
	            releasePointer( tracker, 'touch', touchCount );
	        }
	
	        // simulate touchleave on our tracked element
	        updatePointersExit( tracker, event, gPoints );
	
	        // simulate touchleave on our tracked element's tracked ancestor elements
	        for ( i = 0; i < MOUSETRACKERS.length; i++ ) {
	            if ( MOUSETRACKERS[ i ] !== tracker && MOUSETRACKERS[ i ].isTracking() && isParentChild( MOUSETRACKERS[ i ].element, tracker.element ) ) {
	                parentGPoints = [];
	                for ( j = 0; j < touchCount; j++ ) {
	                    parentGPoints.push( {
	                        id: event.changedTouches[ j ].identifier,
	                        type: 'touch',
	                        // isPrimary not set - let the updatePointers functions determine it
	                        currentPos: getMouseAbsolute( event.changedTouches[ j ] ),
	                        currentTime: time
	                    } );
	                }
	                updatePointersExit( MOUSETRACKERS[ i ], event, parentGPoints );
	            }
	        }
	
	        $.cancelEvent( event );
	    }
	
	
	    /**
	     * @private
	     * @inner
	     */
	    function onTouchMove( tracker, event ) {
	        handleTouchMove( tracker, event );
	    }
	
	
	    /**
	     * This handler is attached to the window object (on the capture phase) to emulate pointer capture.
	     * onTouchMove is still attached to the tracked element, so stop propagation to avoid processing twice.
	     *
	     * @private
	     * @inner
	     */
	    function onTouchMoveCaptured( tracker, event ) {
	        handleTouchMove( tracker, event );
	        $.stopEvent( event );
	    }
	
	
	    /**
	     * @private
	     * @inner
	     */
	    function handleTouchMove( tracker, event ) {
	        var i,
	            touchCount = event.changedTouches.length,
	            gPoints = [];
	
	        for ( i = 0; i < touchCount; i++ ) {
	            gPoints.push( {
	                id: event.changedTouches[ i ].identifier,
	                type: 'touch',
	                // isPrimary not set - let the updatePointers functions determine it
	                currentPos: getMouseAbsolute( event.changedTouches[ i ] ),
	                currentTime: $.now()
	            } );
	        }
	
	        updatePointersMove( tracker, event, gPoints );
	
	        $.cancelEvent( event );
	    }
	
	
	    /**
	     * @private
	     * @inner
	     */
	    function onTouchCancel( tracker, event ) {
	        var i,
	            touchCount = event.changedTouches.length,
	            gPoints = [],
	            pointsList = tracker.getActivePointersListByType( 'touch' );
	        
	        abortTouchContacts( tracker, event, pointsList );
	    }
	
	
	    /**
	     * @private
	     * @inner
	     */
	    function onGestureStart( tracker, event ) {
	        event.stopPropagation();
	        event.preventDefault();
	        return false;
	    }
	
	
	    /**
	     * @private
	     * @inner
	     */
	    function onGestureChange( tracker, event ) {
	        event.stopPropagation();
	        event.preventDefault();
	        return false;
	    }
	
	
	    /**
	     * @private
	     * @inner
	     */
	    function onPointerOver( tracker, event ) {
	        var gPoint;
	
	        if ( event.currentTarget === event.relatedTarget || isParentChild( event.currentTarget, event.relatedTarget ) ) {
	            return;
	        }
	
	        gPoint = {
	            id: event.pointerId,
	            type: getPointerType( event ),
	            isPrimary: event.isPrimary,
	            currentPos: getMouseAbsolute( event ),
	            currentTime: $.now()
	        };
	
	        updatePointersEnter( tracker, event, [ gPoint ] );
	    }
	
	
	    /**
	     * @private
	     * @inner
	     */
	    function onPointerOut( tracker, event ) {
	        var gPoint;
	
	        if ( event.currentTarget === event.relatedTarget || isParentChild( event.currentTarget, event.relatedTarget ) ) {
	            return;
	        }
	
	        gPoint = {
	            id: event.pointerId,
	            type: getPointerType( event ),
	            isPrimary: event.isPrimary,
	            currentPos: getMouseAbsolute( event ),
	            currentTime: $.now()
	        };
	
	        updatePointersExit( tracker, event, [ gPoint ] );
	    }
	
	
	    /**
	     * @private
	     * @inner
	     */
	    function onPointerDown( tracker, event ) {
	        var gPoint;
	
	        gPoint = {
	            id: event.pointerId,
	            type: getPointerType( event ),
	            isPrimary: event.isPrimary,
	            currentPos: getMouseAbsolute( event ),
	            currentTime: $.now()
	        };
	
	        if ( updatePointersDown( tracker, event, [ gPoint ], event.button ) ) {
	            $.stopEvent( event );
	            capturePointer( tracker, gPoint.type );
	        }
	
	        if ( tracker.clickHandler || tracker.dblClickHandler || tracker.pressHandler || tracker.dragHandler || tracker.dragEndHandler || tracker.pinchHandler ) {
	            $.cancelEvent( event );
	        }
	    }
	
	
	    /**
	     * @private
	     * @inner
	     */
	    function onPointerUp( tracker, event ) {
	        handlePointerUp( tracker, event );
	    }
	
	
	    /**
	     * This handler is attached to the window object (on the capture phase) to emulate mouse capture.
	     * onPointerUp is still attached to the tracked element, so stop propagation to avoid processing twice.
	     *
	     * @private
	     * @inner
	     */
	    function onPointerUpCaptured( tracker, event ) {
	        var pointsList = tracker.getActivePointersListByType( getPointerType( event ) );
	        if ( pointsList.getById( event.pointerId ) ) {
	            handlePointerUp( tracker, event );
	        }
	        $.stopEvent( event );
	    }
	
	
	    /**
	     * @private
	     * @inner
	     */
	    function handlePointerUp( tracker, event ) {
	        var gPoint;
	
	        gPoint = {
	            id: event.pointerId,
	            type: getPointerType( event ),
	            isPrimary: event.isPrimary,
	            currentPos: getMouseAbsolute( event ),
	            currentTime: $.now()
	        };
	
	        if ( updatePointersUp( tracker, event, [ gPoint ], event.button ) ) {
	            releasePointer( tracker, gPoint.type );
	        }
	    }
	
	
	    /**
	     * @private
	     * @inner
	     */
	    function onPointerMove( tracker, event ) {
	        handlePointerMove( tracker, event );
	    }
	
	
	    /**
	     * This handler is attached to the window object (on the capture phase) to emulate mouse capture.
	     * onPointerMove is still attached to the tracked element, so stop propagation to avoid processing twice.
	     *
	     * @private
	     * @inner
	     */
	    function onPointerMoveCaptured( tracker, event ) {
	        var pointsList = tracker.getActivePointersListByType( getPointerType( event ) );
	        if ( pointsList.getById( event.pointerId ) ) {
	            handlePointerMove( tracker, event );
	        }
	        $.stopEvent( event );
	    }
	
	
	    /**
	     * @private
	     * @inner
	     */
	    function handlePointerMove( tracker, event ) {
	        // Pointer changed coordinates, button state, pressure, tilt, or contact geometry (e.g. width and height)
	        var gPoint;
	
	        gPoint = {
	            id: event.pointerId,
	            type: getPointerType( event ),
	            isPrimary: event.isPrimary,
	            currentPos: getMouseAbsolute( event ),
	            currentTime: $.now()
	        };
	
	        updatePointersMove( tracker, event, [ gPoint ] );
	    }
	
	
	    /**
	     * @private
	     * @inner
	     */
	    function onPointerCancel( tracker, event ) {
	        var gPoint;
	
	        gPoint = {
	            id: event.pointerId,
	            type: getPointerType( event )
	        };
	
	        updatePointersCancel( tracker, event, [ gPoint ] );
	    }
	
	
	///////////////////////////////////////////////////////////////////////////////
	// Device-agnostic DOM event handlers
	///////////////////////////////////////////////////////////////////////////////
	
	    /**
	     * @function
	     * @private
	     * @inner
	     * @param {OpenSeadragon.MouseTracker.GesturePointList} pointsList
	     *     The GesturePointList to track the pointer in.
	     * @param {OpenSeadragon.MouseTracker.GesturePoint} gPoint
	     *      Gesture point to track.
	     * @returns {Number} Number of gesture points in pointsList.
	     */
	    function startTrackingPointer( pointsList, gPoint ) {
	
	        // If isPrimary is not known for the pointer then set it according to our rules:
	        //    true if the first pointer in the gesture, otherwise false
	        if ( !gPoint.hasOwnProperty( 'isPrimary' ) ) {
	            if ( pointsList.getLength() === 0 ) {
	                gPoint.isPrimary = true;
	            } else {
	                gPoint.isPrimary = false;
	            }
	        }
	        gPoint.speed = 0;
	        gPoint.direction = 0;
	        gPoint.contactPos = gPoint.currentPos;
	        gPoint.contactTime = gPoint.currentTime;
	        gPoint.lastPos = gPoint.currentPos;
	        gPoint.lastTime = gPoint.currentTime;
	
	        return pointsList.add( gPoint );
	    }
	
	
	    /**
	     * @function
	     * @private
	     * @inner
	     * @param {OpenSeadragon.MouseTracker.GesturePointList} pointsList
	     *     The GesturePointList to stop tracking the pointer on.
	     * @param {OpenSeadragon.MouseTracker.GesturePoint} gPoint
	     *      Gesture point to stop tracking.
	     * @returns {Number} Number of gesture points in pointsList.
	     */
	    function stopTrackingPointer( pointsList, gPoint ) {
	        var listLength,
	            primaryPoint;
	
	        if ( pointsList.getById( gPoint.id ) ) {
	            listLength = pointsList.removeById( gPoint.id );
	
	            // If isPrimary is not known for the pointer and we just removed the primary pointer from the list then we need to set another pointer as primary
	            if ( !gPoint.hasOwnProperty( 'isPrimary' ) ) {
	                primaryPoint = pointsList.getPrimary();
	                if ( !primaryPoint ) {
	                    primaryPoint = pointsList.getByIndex( 0 );
	                    if ( primaryPoint ) {
	                        primaryPoint.isPrimary = true;
	                    }
	                }
	            }
	        } else {
	            listLength = pointsList.getLength();
	        }
	
	        return listLength;
	    }
	
	
	    /**
	     * @function
	     * @private
	     * @inner
	     * @param {OpenSeadragon.MouseTracker} tracker
	     *     A reference to the MouseTracker instance.
	     * @param {Object} event
	     *     A reference to the originating DOM event.
	     * @param {Array.<OpenSeadragon.MouseTracker.GesturePoint>} gPoints
	     *      Gesture points associated with the event.
	     */
	    function updatePointersEnter( tracker, event, gPoints ) {
	        var pointsList = tracker.getActivePointersListByType( gPoints[ 0 ].type ),
	            i,
	            gPointCount = gPoints.length,
	            curGPoint,
	            updateGPoint,
	            propagate;
	
	        for ( i = 0; i < gPointCount; i++ ) {
	            curGPoint = gPoints[ i ];
	            updateGPoint = pointsList.getById( curGPoint.id );
	
	            if ( updateGPoint ) {
	                // Already tracking the pointer...update it
	                updateGPoint.insideElement = true;
	                updateGPoint.lastPos = updateGPoint.currentPos;
	                updateGPoint.lastTime = updateGPoint.currentTime;
	                updateGPoint.currentPos = curGPoint.currentPos;
	                updateGPoint.currentTime = curGPoint.currentTime;
	
	                curGPoint = updateGPoint;
	            } else {
	                // Initialize for tracking and add to the tracking list
	                curGPoint.captured = false;
	                curGPoint.insideElementPressed = false;
	                curGPoint.insideElement = true;
	                startTrackingPointer( pointsList, curGPoint );
	            }
	
	            // Enter
	            if ( tracker.enterHandler ) {
	                propagate = tracker.enterHandler(
	                    {
	                        eventSource:          tracker,
	                        pointerType:          curGPoint.type,
	                        position:             getPointRelativeToAbsolute( curGPoint.currentPos, tracker.element ),
	                        buttons:              pointsList.buttons,
	                        pointers:             tracker.getActivePointerCount(),
	                        insideElementPressed: curGPoint.insideElementPressed,
	                        buttonDownAny:        pointsList.buttons !== 0,
	                        isTouchEvent:         curGPoint.type === 'touch',
	                        originalEvent:        event,
	                        preventDefaultAction: false,
	                        userData:             tracker.userData
	                    }
	                );
	                if ( propagate === false ) {
	                    $.cancelEvent( event );
	                }
	            }
	        }
	    }
	
	
	    /**
	     * @function
	     * @private
	     * @inner
	     * @param {OpenSeadragon.MouseTracker} tracker
	     *     A reference to the MouseTracker instance.
	     * @param {Object} event
	     *     A reference to the originating DOM event.
	     * @param {Array.<OpenSeadragon.MouseTracker.GesturePoint>} gPoints
	     *      Gesture points associated with the event.
	     */
	    function updatePointersExit( tracker, event, gPoints ) {
	        var delegate = THIS[ tracker.hash ],
	            pointsList = tracker.getActivePointersListByType( gPoints[ 0 ].type ),
	            i,
	            gPointCount = gPoints.length,
	            curGPoint,
	            updateGPoint,
	            propagate;
	
	        for ( i = 0; i < gPointCount; i++ ) {
	            curGPoint = gPoints[ i ];
	            updateGPoint = pointsList.getById( curGPoint.id );
	
	            if ( updateGPoint ) {
	                // Already tracking the pointer. If captured then update it, else stop tracking it
	                if ( updateGPoint.captured ) {
	                    updateGPoint.insideElement = false;
	                    updateGPoint.lastPos = updateGPoint.currentPos;
	                    updateGPoint.lastTime = updateGPoint.currentTime;
	                    updateGPoint.currentPos = curGPoint.currentPos;
	                    updateGPoint.currentTime = curGPoint.currentTime;
	                } else {
	                    stopTrackingPointer( pointsList, updateGPoint );
	                }
	
	                curGPoint = updateGPoint;
	            }
	
	            // Exit
	            if ( tracker.exitHandler ) {
	                propagate = tracker.exitHandler(
	                    {
	                        eventSource:          tracker,
	                        pointerType:          curGPoint.type,
	                        position:             getPointRelativeToAbsolute( curGPoint.currentPos, tracker.element ),
	                        buttons:              pointsList.buttons,
	                        pointers:             tracker.getActivePointerCount(),
	                        insideElementPressed: updateGPoint ? updateGPoint.insideElementPressed : false,
	                        buttonDownAny:        pointsList.buttons !== 0,
	                        isTouchEvent:         curGPoint.type === 'touch',
	                        originalEvent:        event,
	                        preventDefaultAction: false,
	                        userData:             tracker.userData
	                    }
	                );
	
	                if ( propagate === false ) {
	                    $.cancelEvent( event );
	                }
	            }
	        }
	    }
	
	
	    /**
	     * @function
	     * @private
	     * @inner
	     * @param {OpenSeadragon.MouseTracker} tracker
	     *     A reference to the MouseTracker instance.
	     * @param {Object} event
	     *     A reference to the originating DOM event.
	     * @param {Array.<OpenSeadragon.MouseTracker.GesturePoint>} gPoints
	     *      Gesture points associated with the event.
	     * @param {Number} buttonChanged
	     *      The button involved in the event: -1: none, 0: primary/left, 1: aux/middle, 2: secondary/right, 3: X1/back, 4: X2/forward, 5: pen eraser.
	     *      Note on chorded button presses (a button pressed when another button is already pressed): In the W3C Pointer Events model,
	     *      only one pointerdown/pointerup event combo is fired. Chorded button state changes instead fire pointermove events.
	     *
	     * @returns {Boolean} True if pointers should be captured to the tracked element, otherwise false.
	     */
	    function updatePointersDown( tracker, event, gPoints, buttonChanged ) {
	        var delegate = THIS[ tracker.hash ],
	            propagate,
	            pointsList = tracker.getActivePointersListByType( gPoints[ 0 ].type ),
	            i,
	            gPointCount = gPoints.length,
	            curGPoint,
	            updateGPoint;
	
	        if ( typeof event.buttons !== 'undefined' ) {
	            pointsList.buttons = event.buttons;
	        } else {
	            if ( $.Browser.vendor === $.BROWSERS.IE && $.Browser.version < 9 ) {
	                if ( buttonChanged === 0 ) {
	                    // Primary
	                    pointsList.buttons += 1;
	                } else if ( buttonChanged === 1 ) {
	                    // Aux
	                    pointsList.buttons += 4;
	                } else if ( buttonChanged === 2 ) {
	                    // Secondary
	                    pointsList.buttons += 2;
	                } else if ( buttonChanged === 3 ) {
	                    // X1 (Back)
	                    pointsList.buttons += 8;
	                } else if ( buttonChanged === 4 ) {
	                    // X2 (Forward)
	                    pointsList.buttons += 16;
	                } else if ( buttonChanged === 5 ) {
	                    // Pen Eraser
	                    pointsList.buttons += 32;
	                }
	            } else {
	                if ( buttonChanged === 0 ) {
	                    // Primary
	                    pointsList.buttons |= 1;
	                } else if ( buttonChanged === 1 ) {
	                    // Aux
	                    pointsList.buttons |= 4;
	                } else if ( buttonChanged === 2 ) {
	                    // Secondary
	                    pointsList.buttons |= 2;
	                } else if ( buttonChanged === 3 ) {
	                    // X1 (Back)
	                    pointsList.buttons |= 8;
	                } else if ( buttonChanged === 4 ) {
	                    // X2 (Forward)
	                    pointsList.buttons |= 16;
	                } else if ( buttonChanged === 5 ) {
	                    // Pen Eraser
	                    pointsList.buttons |= 32;
	                }
	            }
	        }
	
	        // Only capture and track primary button, pen, and touch contacts
	        if ( buttonChanged !== 0 ) {
	            // Aux Press
	            if ( tracker.nonPrimaryPressHandler ) {
	                propagate = tracker.nonPrimaryPressHandler(
	                    {
	                        eventSource:          tracker,
	                        pointerType:          gPoints[ 0 ].type,
	                        position:             getPointRelativeToAbsolute( gPoints[ 0 ].currentPos, tracker.element ),
	                        button:               buttonChanged,
	                        buttons:              pointsList.buttons,
	                        isTouchEvent:         gPoints[ 0 ].type === 'touch',
	                        originalEvent:        event,
	                        preventDefaultAction: false,
	                        userData:             tracker.userData
	                    }
	                );
	                if ( propagate === false ) {
	                    $.cancelEvent( event );
	                }
	            }
	
	            return false;
	        }
	
	        for ( i = 0; i < gPointCount; i++ ) {
	            curGPoint = gPoints[ i ];
	            updateGPoint = pointsList.getById( curGPoint.id );
	
	            if ( updateGPoint ) {
	                // Already tracking the pointer...update it
	                updateGPoint.captured = true;
	                updateGPoint.insideElementPressed = true;
	                updateGPoint.insideElement = true;
	                updateGPoint.contactPos = curGPoint.currentPos;
	                updateGPoint.contactTime = curGPoint.currentTime;
	                updateGPoint.lastPos = updateGPoint.currentPos;
	                updateGPoint.lastTime = updateGPoint.currentTime;
	                updateGPoint.currentPos = curGPoint.currentPos;
	                updateGPoint.currentTime = curGPoint.currentTime;
	
	                curGPoint = updateGPoint;
	            } else {
	                // Initialize for tracking and add to the tracking list (no pointerover or pointermove event occurred before this)
	                curGPoint.captured = true;
	                curGPoint.insideElementPressed = true;
	                curGPoint.insideElement = true;
	                startTrackingPointer( pointsList, curGPoint );
	            }
	
	            pointsList.contacts++;
	            //$.console.log('contacts++ ', pointsList.contacts);
	
	            if ( tracker.dragHandler || tracker.dragEndHandler || tracker.pinchHandler ) {
	                $.MouseTracker.gesturePointVelocityTracker.addPoint( tracker, curGPoint );
	            }
	
	            if ( pointsList.contacts === 1 ) {
	                // Press
	                if ( tracker.pressHandler ) {
	                    propagate = tracker.pressHandler(
	                        {
	                            eventSource:          tracker,
	                            pointerType:          curGPoint.type,
	                            position:             getPointRelativeToAbsolute( curGPoint.contactPos, tracker.element ),
	                            buttons:              pointsList.buttons,
	                            isTouchEvent:         curGPoint.type === 'touch',
	                            originalEvent:        event,
	                            preventDefaultAction: false,
	                            userData:             tracker.userData
	                        }
	                    );
	                    if ( propagate === false ) {
	                        $.cancelEvent( event );
	                    }
	                }
	            } else if ( pointsList.contacts === 2 ) {
	                if ( tracker.pinchHandler && curGPoint.type === 'touch' ) {
	                    // Initialize for pinch
	                    delegate.pinchGPoints = pointsList.asArray();
	                    delegate.lastPinchDist = delegate.currentPinchDist = delegate.pinchGPoints[ 0 ].currentPos.distanceTo( delegate.pinchGPoints[ 1 ].currentPos );
	                    delegate.lastPinchCenter = delegate.currentPinchCenter = getCenterPoint( delegate.pinchGPoints[ 0 ].currentPos, delegate.pinchGPoints[ 1 ].currentPos );
	                }
	            }
	        }
	
	        return true;
	    }
	
	
	    /**
	     * @function
	     * @private
	     * @inner
	     * @param {OpenSeadragon.MouseTracker} tracker
	     *     A reference to the MouseTracker instance.
	     * @param {Object} event
	     *     A reference to the originating DOM event.
	     * @param {Array.<OpenSeadragon.MouseTracker.GesturePoint>} gPoints
	     *      Gesture points associated with the event.
	     * @param {Number} buttonChanged
	     *      The button involved in the event: -1: none, 0: primary/left, 1: aux/middle, 2: secondary/right, 3: X1/back, 4: X2/forward, 5: pen eraser.
	     *      Note on chorded button presses (a button pressed when another button is already pressed): In the W3C Pointer Events model,
	     *      only one pointerdown/pointerup event combo is fired. Chorded button state changes instead fire pointermove events.
	     *
	     * @returns {Boolean} True if pointer capture should be released from the tracked element, otherwise false.
	     */
	    function updatePointersUp( tracker, event, gPoints, buttonChanged ) {
	        var delegate = THIS[ tracker.hash ],
	            pointsList = tracker.getActivePointersListByType( gPoints[ 0 ].type ),
	            propagate,
	            insideElementReleased,
	            releasePoint,
	            releaseTime,
	            i,
	            gPointCount = gPoints.length,
	            curGPoint,
	            updateGPoint,
	            releaseCapture = false,
	            wasCaptured = false,
	            quick;
	
	        if ( typeof event.buttons !== 'undefined' ) {
	            pointsList.buttons = event.buttons;
	        } else {
	            if ( $.Browser.vendor === $.BROWSERS.IE && $.Browser.version < 9 ) {
	                if ( buttonChanged === 0 ) {
	                    // Primary
	                    pointsList.buttons -= 1;
	                } else if ( buttonChanged === 1 ) {
	                    // Aux
	                    pointsList.buttons -= 4;
	                } else if ( buttonChanged === 2 ) {
	                    // Secondary
	                    pointsList.buttons -= 2;
	                } else if ( buttonChanged === 3 ) {
	                    // X1 (Back)
	                    pointsList.buttons -= 8;
	                } else if ( buttonChanged === 4 ) {
	                    // X2 (Forward)
	                    pointsList.buttons -= 16;
	                } else if ( buttonChanged === 5 ) {
	                    // Pen Eraser
	                    pointsList.buttons -= 32;
	                }
	            } else {
	                if ( buttonChanged === 0 ) {
	                    // Primary
	                    pointsList.buttons ^= ~1;
	                } else if ( buttonChanged === 1 ) {
	                    // Aux
	                    pointsList.buttons ^= ~4;
	                } else if ( buttonChanged === 2 ) {
	                    // Secondary
	                    pointsList.buttons ^= ~2;
	                } else if ( buttonChanged === 3 ) {
	                    // X1 (Back)
	                    pointsList.buttons ^= ~8;
	                } else if ( buttonChanged === 4 ) {
	                    // X2 (Forward)
	                    pointsList.buttons ^= ~16;
	                } else if ( buttonChanged === 5 ) {
	                    // Pen Eraser
	                    pointsList.buttons ^= ~32;
	                }
	            }
	        }
	
	        // Only capture and track primary button, pen, and touch contacts
	        if ( buttonChanged !== 0 ) {
	            // Aux Release
	            if ( tracker.nonPrimaryReleaseHandler ) {
	                propagate = tracker.nonPrimaryReleaseHandler(
	                    {
	                        eventSource:           tracker,
	                        pointerType:           gPoints[ 0 ].type,
	                        position:              getPointRelativeToAbsolute(  gPoints[ 0 ].currentPos, tracker.element ),
	                        button:                buttonChanged,
	                        buttons:               pointsList.buttons,
	                        isTouchEvent:          gPoints[ 0 ].type === 'touch',
	                        originalEvent:         event,
	                        preventDefaultAction:  false,
	                        userData:              tracker.userData
	                    }
	                );
	                if ( propagate === false ) {
	                    $.cancelEvent( event );
	                }
	            }
	
	            return false;
	        }
	
	        for ( i = 0; i < gPointCount; i++ ) {
	            curGPoint = gPoints[ i ];
	            updateGPoint = pointsList.getById( curGPoint.id );
	
	            if ( updateGPoint ) {
	                // Update the pointer, stop tracking it if not still in this element
	                if ( updateGPoint.captured ) {
	                    updateGPoint.captured = false;
	                    releaseCapture = true;
	                    wasCaptured = true;
	                }
	                updateGPoint.lastPos = updateGPoint.currentPos;
	                updateGPoint.lastTime = updateGPoint.currentTime;
	                updateGPoint.currentPos = curGPoint.currentPos;
	                updateGPoint.currentTime = curGPoint.currentTime;
	                if ( !updateGPoint.insideElement ) {
	                    stopTrackingPointer( pointsList, updateGPoint );
	                }
	
	                releasePoint = updateGPoint.currentPos;
	                releaseTime = updateGPoint.currentTime;
	
	                if ( wasCaptured ) {
	                    // Pointer was activated in our element but could have been removed in any element since events are captured to our element
	
	                    pointsList.contacts--;
	                    //$.console.log('contacts-- ', pointsList.contacts);
	
	                    if ( tracker.dragHandler || tracker.dragEndHandler || tracker.pinchHandler ) {
	                        $.MouseTracker.gesturePointVelocityTracker.removePoint( tracker, updateGPoint );
	                    }
	
	                    if ( pointsList.contacts === 0 ) {
	
	                        // Release (pressed in our element)
	                        if ( tracker.releaseHandler ) {
	                            propagate = tracker.releaseHandler(
	                                {
	                                    eventSource:           tracker,
	                                    pointerType:           updateGPoint.type,
	                                    position:              getPointRelativeToAbsolute( releasePoint, tracker.element ),
	                                    buttons:               pointsList.buttons,
	                                    insideElementPressed:  updateGPoint.insideElementPressed,
	                                    insideElementReleased: updateGPoint.insideElement,
	                                    isTouchEvent:          updateGPoint.type === 'touch',
	                                    originalEvent:         event,
	                                    preventDefaultAction:  false,
	                                    userData:              tracker.userData
	                                }
	                            );
	                            if ( propagate === false ) {
	                                $.cancelEvent( event );
	                            }
	                        }
	
	                        // Drag End
	                        if ( tracker.dragEndHandler && !updateGPoint.currentPos.equals( updateGPoint.contactPos ) ) {
	                            propagate = tracker.dragEndHandler(
	                                {
	                                    eventSource:          tracker,
	                                    pointerType:          updateGPoint.type,
	                                    position:             getPointRelativeToAbsolute( updateGPoint.currentPos, tracker.element ),
	                                    speed:                updateGPoint.speed,
	                                    direction:            updateGPoint.direction,
	                                    shift:                event.shiftKey,
	                                    isTouchEvent:         updateGPoint.type === 'touch',
	                                    originalEvent:        event,
	                                    preventDefaultAction: false,
	                                    userData:             tracker.userData
	                                }
	                            );
	                            if ( propagate === false ) {
	                                $.cancelEvent( event );
	                            }
	                        }
	
	                        // Click / Double-Click
	                        if ( ( tracker.clickHandler || tracker.dblClickHandler ) && updateGPoint.insideElement ) {
	                            quick = releaseTime - updateGPoint.contactTime <= tracker.clickTimeThreshold &&
	                                            updateGPoint.contactPos.distanceTo( releasePoint ) <= tracker.clickDistThreshold;
	
	                            // Click
	                            if ( tracker.clickHandler ) {
	                                propagate = tracker.clickHandler(
	                                    {
	                                        eventSource:          tracker,
	                                        pointerType:          updateGPoint.type,
	                                        position:             getPointRelativeToAbsolute( updateGPoint.currentPos, tracker.element ),
	                                        quick:                quick,
	                                        shift:                event.shiftKey,
	                                        isTouchEvent:         updateGPoint.type === 'touch',
	                                        originalEvent:        event,
	                                        preventDefaultAction: false,
	                                        userData:             tracker.userData
	                                    }
	                                );
	                                if ( propagate === false ) {
	                                    $.cancelEvent( event );
	                                }
	                            }
	
	                            // Double-Click
	                            if ( tracker.dblClickHandler && quick ) {
	                                pointsList.clicks++;
	                                if ( pointsList.clicks === 1 ) {
	                                    delegate.lastClickPos = releasePoint;
	                                    /*jshint loopfunc:true*/
	                                    delegate.dblClickTimeOut = setTimeout( function() {
	                                        pointsList.clicks = 0;
	                                    }, tracker.dblClickTimeThreshold );
	                                    /*jshint loopfunc:false*/
	                                } else if ( pointsList.clicks === 2 ) {
	                                    clearTimeout( delegate.dblClickTimeOut );
	                                    pointsList.clicks = 0;
	                                    if ( delegate.lastClickPos.distanceTo( releasePoint ) <= tracker.dblClickDistThreshold ) {
	                                        propagate = tracker.dblClickHandler(
	                                            {
	                                                eventSource:          tracker,
	                                                pointerType:          updateGPoint.type,
	                                                position:             getPointRelativeToAbsolute( updateGPoint.currentPos, tracker.element ),
	                                                shift:                event.shiftKey,
	                                                isTouchEvent:         updateGPoint.type === 'touch',
	                                                originalEvent:        event,
	                                                preventDefaultAction: false,
	                                                userData:             tracker.userData
	                                            }
	                                        );
	                                        if ( propagate === false ) {
	                                            $.cancelEvent( event );
	                                        }
	                                    }
	                                    delegate.lastClickPos = null;
	                                }
	                            }
	                        }
	                    } else if ( pointsList.contacts === 2 ) {
	                        if ( tracker.pinchHandler && updateGPoint.type === 'touch' ) {
	                            // Reset for pinch
	                            delegate.pinchGPoints = pointsList.asArray();
	                            delegate.lastPinchDist = delegate.currentPinchDist = delegate.pinchGPoints[ 0 ].currentPos.distanceTo( delegate.pinchGPoints[ 1 ].currentPos );
	                            delegate.lastPinchCenter = delegate.currentPinchCenter = getCenterPoint( delegate.pinchGPoints[ 0 ].currentPos, delegate.pinchGPoints[ 1 ].currentPos );
	                        }
	                    }
	                } else {
	                    // Pointer was activated in another element but removed in our element
	
	                    // Release (pressed in another element)
	                    if ( tracker.releaseHandler ) {
	                        propagate = tracker.releaseHandler(
	                            {
	                                eventSource:           tracker,
	                                pointerType:           updateGPoint.type,
	                                position:              getPointRelativeToAbsolute( releasePoint, tracker.element ),
	                                buttons:               pointsList.buttons,
	                                insideElementPressed:  updateGPoint.insideElementPressed,
	                                insideElementReleased: updateGPoint.insideElement,
	                                isTouchEvent:          updateGPoint.type === 'touch',
	                                originalEvent:         event,
	                                preventDefaultAction:  false,
	                                userData:              tracker.userData
	                            }
	                        );
	                        if ( propagate === false ) {
	                            $.cancelEvent( event );
	                        }
	                    }
	                }
	            }
	        }
	
	        return releaseCapture;
	    }
	
	
	    /**
	     * Call when pointer(s) change coordinates, button state, pressure, tilt, or contact geometry (e.g. width and height)
	     *
	     * @function
	     * @private
	     * @inner
	     * @param {OpenSeadragon.MouseTracker} tracker
	     *     A reference to the MouseTracker instance.
	     * @param {Object} event
	     *     A reference to the originating DOM event.
	     * @param {Array.<OpenSeadragon.MouseTracker.GesturePoint>} gPoints
	     *      Gesture points associated with the event.
	     */
	    function updatePointersMove( tracker, event, gPoints ) {
	        var delegate = THIS[ tracker.hash ],
	            pointsList = tracker.getActivePointersListByType( gPoints[ 0 ].type ),
	            i,
	            gPointCount = gPoints.length,
	            curGPoint,
	            updateGPoint,
	            gPointArray,
	            delta,
	            propagate;
	
	        if ( typeof event.buttons !== 'undefined' ) {
	            pointsList.buttons = event.buttons;
	        }
	
	        for ( i = 0; i < gPointCount; i++ ) {
	            curGPoint = gPoints[ i ];
	            updateGPoint = pointsList.getById( curGPoint.id );
	
	            if ( updateGPoint ) {
	                // Already tracking the pointer...update it
	                if ( curGPoint.hasOwnProperty( 'isPrimary' ) ) {
	                    updateGPoint.isPrimary = curGPoint.isPrimary;
	                }
	                updateGPoint.lastPos = updateGPoint.currentPos;
	                updateGPoint.lastTime = updateGPoint.currentTime;
	                updateGPoint.currentPos = curGPoint.currentPos;
	                updateGPoint.currentTime = curGPoint.currentTime;
	            } else {
	                // Initialize for tracking and add to the tracking list (no pointerover or pointerdown event occurred before this)
	                curGPoint.captured = false;
	                curGPoint.insideElementPressed = false;
	                curGPoint.insideElement = true;
	                startTrackingPointer( pointsList, curGPoint );
	            }
	        }
	
	        // Stop (mouse only)
	        if ( tracker.stopHandler && gPoints[ 0 ].type === 'mouse' ) {
	            clearTimeout( tracker.stopTimeOut );
	            tracker.stopTimeOut = setTimeout( function() {
	                handlePointerStop( tracker, event, gPoints[ 0 ].type );
	            }, tracker.stopDelay );
	        }
	
	        if ( pointsList.contacts === 0 ) {
	            // Move (no contacts: hovering mouse or other hover-capable device)
	            if ( tracker.moveHandler ) {
	                propagate = tracker.moveHandler(
	                    {
	                        eventSource:          tracker,
	                        pointerType:          gPoints[ 0 ].type,
	                        position:             getPointRelativeToAbsolute( gPoints[ 0 ].currentPos, tracker.element ),
	                        buttons:              pointsList.buttons,
	                        isTouchEvent:         gPoints[ 0 ].type === 'touch',
	                        originalEvent:        event,
	                        preventDefaultAction: false,
	                        userData:             tracker.userData
	                    }
	                );
	                if ( propagate === false ) {
	                    $.cancelEvent( event );
	                }
	            }
	        } else if ( pointsList.contacts === 1 ) {
	            // Move (1 contact)
	            if ( tracker.moveHandler ) {
	                updateGPoint = pointsList.asArray()[ 0 ];
	                propagate = tracker.moveHandler(
	                    {
	                        eventSource:          tracker,
	                        pointerType:          updateGPoint.type,
	                        position:             getPointRelativeToAbsolute( updateGPoint.currentPos, tracker.element ),
	                        buttons:              pointsList.buttons,
	                        isTouchEvent:         updateGPoint.type === 'touch',
	                        originalEvent:        event,
	                        preventDefaultAction: false,
	                        userData:             tracker.userData
	                    }
	                );
	                if ( propagate === false ) {
	                    $.cancelEvent( event );
	                }
	            }
	
	            // Drag
	            if ( tracker.dragHandler ) {
	                updateGPoint = pointsList.asArray()[ 0 ];
	                delta = updateGPoint.currentPos.minus( updateGPoint.lastPos );
	                propagate = tracker.dragHandler(
	                    {
	                        eventSource:          tracker,
	                        pointerType:          updateGPoint.type,
	                        position:             getPointRelativeToAbsolute( updateGPoint.currentPos, tracker.element ),
	                        buttons:              pointsList.buttons,
	                        delta:                delta,
	                        speed:                updateGPoint.speed,
	                        direction:            updateGPoint.direction,
	                        shift:                event.shiftKey,
	                        isTouchEvent:         updateGPoint.type === 'touch',
	                        originalEvent:        event,
	                        preventDefaultAction: false,
	                        userData:             tracker.userData
	                    }
	                );
	                if ( propagate === false ) {
	                    $.cancelEvent( event );
	                }
	            }
	        } else if ( pointsList.contacts === 2 ) {
	            // Move (2 contacts, use center)
	            if ( tracker.moveHandler ) {
	                gPointArray = pointsList.asArray();
	                propagate = tracker.moveHandler(
	                    {
	                        eventSource:          tracker,
	                        pointerType:          gPointArray[ 0 ].type,
	                        position:             getPointRelativeToAbsolute( getCenterPoint( gPointArray[ 0 ].currentPos, gPointArray[ 1 ].currentPos ), tracker.element ),
	                        buttons:              pointsList.buttons,
	                        isTouchEvent:         gPointArray[ 0 ].type === 'touch',
	                        originalEvent:        event,
	                        preventDefaultAction: false,
	                        userData:             tracker.userData
	                    }
	                );
	                if ( propagate === false ) {
	                    $.cancelEvent( event );
	                }
	            }
	
	            // Pinch
	            if ( tracker.pinchHandler && gPoints[ 0 ].type === 'touch' ) {
	                delta = delegate.pinchGPoints[ 0 ].currentPos.distanceTo( delegate.pinchGPoints[ 1 ].currentPos );
	                if ( delta != delegate.currentPinchDist ) {
	                    delegate.lastPinchDist = delegate.currentPinchDist;
	                    delegate.currentPinchDist = delta;
	                    delegate.lastPinchCenter = delegate.currentPinchCenter;
	                    delegate.currentPinchCenter = getCenterPoint( delegate.pinchGPoints[ 0 ].currentPos, delegate.pinchGPoints[ 1 ].currentPos );
	                    propagate = tracker.pinchHandler(
	                        {
	                            eventSource:          tracker,
	                            pointerType:          'touch',
	                            gesturePoints:        delegate.pinchGPoints,
	                            lastCenter:           getPointRelativeToAbsolute( delegate.lastPinchCenter, tracker.element ),
	                            center:               getPointRelativeToAbsolute( delegate.currentPinchCenter, tracker.element ),
	                            lastDistance:         delegate.lastPinchDist,
	                            distance:             delegate.currentPinchDist,
	                            shift:                event.shiftKey,
	                            originalEvent:        event,
	                            preventDefaultAction: false,
	                            userData:             tracker.userData
	                        }
	                    );
	                    if ( propagate === false ) {
	                        $.cancelEvent( event );
	                    }
	                }
	            }
	        }
	    }
	
	
	    /**
	     * @function
	     * @private
	     * @inner
	     * @param {OpenSeadragon.MouseTracker} tracker
	     *     A reference to the MouseTracker instance.
	     * @param {Object} event
	     *     A reference to the originating DOM event.
	     * @param {Array.<OpenSeadragon.MouseTracker.GesturePoint>} gPoints
	     *      Gesture points associated with the event.
	     */
	    function updatePointersCancel( tracker, event, gPoints ) {
	        updatePointersUp( tracker, event, gPoints, 0 );
	        updatePointersExit( tracker, event, gPoints );
	    }
	
	
	    /**
	     * @private
	     * @inner
	     */
	    function handlePointerStop( tracker, originalMoveEvent, pointerType ) {
	        if ( tracker.stopHandler ) {
	            tracker.stopHandler( {
	                eventSource:          tracker,
	                pointerType:          pointerType,
	                position:             getMouseRelative( originalMoveEvent, tracker.element ),
	                buttons:              tracker.getActivePointersListByType( pointerType ).buttons,
	                isTouchEvent:         pointerType === 'touch',
	                originalEvent:        originalMoveEvent,
	                preventDefaultAction: false,
	                userData:             tracker.userData
	            } );
	        }
	    }
	    
	    // True if inside an iframe, otherwise false.
	    // @member {Boolean} isInIframe
	    // @private
	    // @inner
	    var isInIframe = (function() {
	        try {
	            return window.self !== window.top;
	        } catch (e) {
	            return true;
	        }
	    })();
	 
	    // @function
	    // @private
	    // @inner
	    // @returns {Boolean} True if the target has access rights to events, otherwise false.
	    function canAccessEvents (target) {
	        try {
	            return target.addEventListener && target.removeEventListener;
	        } catch (e) {
	            return false;
	        }
	    }
	
	} ( OpenSeadragon ) );
	
	/*
	 * OpenSeadragon - Control
	 *
	 * Copyright (C) 2009 CodePlex Foundation
	 * Copyright (C) 2010-2013 OpenSeadragon contributors
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 * - Redistributions of source code must retain the above copyright notice,
	 *   this list of conditions and the following disclaimer.
	 *
	 * - Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * - Neither the name of CodePlex Foundation nor the names of its
	 *   contributors may be used to endorse or promote products derived from
	 *   this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
	 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */
	
	(function( $ ){
	
	/**
	 * An enumeration of supported locations where controls can be anchored.
	 * The anchoring is always relative to the container.
	 * @member ControlAnchor
	 * @memberof OpenSeadragon
	 * @static
	 * @type {Object}
	 * @property {Number} NONE
	 * @property {Number} TOP_LEFT
	 * @property {Number} TOP_RIGHT
	 * @property {Number} BOTTOM_LEFT
	 * @property {Number} BOTTOM_RIGHT
	 * @property {Number} ABSOLUTE
	 */
	$.ControlAnchor = {
	    NONE: 0,
	    TOP_LEFT: 1,
	    TOP_RIGHT: 2,
	    BOTTOM_RIGHT: 3,
	    BOTTOM_LEFT: 4,
	    ABSOLUTE: 5
	};
	
	/**
	 * @class Control
	 * @classdesc A Control represents any interface element which is meant to allow the user
	 * to interact with the zoomable interface. Any control can be anchored to any
	 * element.
	 *
	 * @memberof OpenSeadragon
	 * @param {Element} element - the control element to be anchored in the container.
	 * @param {Object } options - All required and optional settings for configuring a control element.
	 * @param {OpenSeadragon.ControlAnchor} [options.anchor=OpenSeadragon.ControlAnchor.NONE] - the position of the control
	 *  relative to the container.
	 * @param {Boolean} [options.attachToViewer=true] - Whether the control should be added directly to the viewer, or
	 *  directly to the container
	 * @param {Boolean} [options.autoFade=true] - Whether the control should have the autofade behavior
	 * @param {Element} container - the element to control will be anchored too.
	 */
	$.Control = function ( element, options, container ) {
	    var parent = element.parentNode;
	    if (typeof options === 'number')
	    {
	        $.console.error("Passing an anchor directly into the OpenSeadragon.Control constructor is deprecated; " +
	                        "please use an options object instead.  " +
	                        "Support for this deprecated variant is scheduled for removal in December 2013");
	         options = {anchor: options};
	    }
	    options.attachToViewer = (typeof options.attachToViewer === 'undefined') ? true : options.attachToViewer;
	    /**
	     * True if the control should have autofade behavior.
	     * @member {Boolean} autoFade
	     * @memberof OpenSeadragon.Control#
	     */
	    this.autoFade = (typeof options.autoFade === 'undefined') ? true : options.autoFade;
	    /**
	     * The element providing the user interface with some type of control (e.g. a zoom-in button).
	     * @member {Element} element
	     * @memberof OpenSeadragon.Control#
	     */
	    this.element    = element;
	    /**
	     * The position of the Control relative to its container.
	     * @member {OpenSeadragon.ControlAnchor} anchor
	     * @memberof OpenSeadragon.Control#
	     */
	    this.anchor     = options.anchor;
	    /**
	     * The Control's containing element.
	     * @member {Element} container
	     * @memberof OpenSeadragon.Control#
	     */
	    this.container  = container;
	    /**
	     * A neutral element surrounding the control element.
	     * @member {Element} wrapper
	     * @memberof OpenSeadragon.Control#
	     */
	    if ( this.anchor == $.ControlAnchor.ABSOLUTE ) {
	        this.wrapper    = $.makeNeutralElement( "div" );
	        this.wrapper.style.position = "absolute";
	        this.wrapper.style.top = typeof ( options.top )  == "number" ? ( options.top + 'px' ) : options.top;
	        this.wrapper.style.left  = typeof ( options.left )  == "number" ?  (options.left + 'px' ) : options.left;
	        this.wrapper.style.height = typeof ( options.height )  == "number" ? ( options.height + 'px' ) : options.height;
	        this.wrapper.style.width  = typeof ( options.width )  == "number" ? ( options.width + 'px' ) : options.width;
	        this.wrapper.style.margin = "0px";
	        this.wrapper.style.padding = "0px";
	
	        this.element.style.position = "relative";
	        this.element.style.top = "0px";
	        this.element.style.left = "0px";
	        this.element.style.height = "100%";
	        this.element.style.width = "100%";
	    } else {
	        this.wrapper    = $.makeNeutralElement( "div" );
	        this.wrapper.style.display = "inline-block";
	        if ( this.anchor == $.ControlAnchor.NONE ) {
	            // IE6 fix
	            this.wrapper.style.width = this.wrapper.style.height = "100%";
	        }
	    }
	    this.wrapper.appendChild( this.element );
	
	    if (options.attachToViewer ) {
	        if ( this.anchor == $.ControlAnchor.TOP_RIGHT ||
	             this.anchor == $.ControlAnchor.BOTTOM_RIGHT ) {
	            this.container.insertBefore(
	                this.wrapper,
	                this.container.firstChild
	            );
	        } else {
	            this.container.appendChild( this.wrapper );
	        }
	    } else {
	        parent.appendChild( this.wrapper );
	    }
	};
	
	/** @lends OpenSeadragon.Control.prototype */
	$.Control.prototype = {
	
	    /**
	     * Removes the control from the container.
	     * @function
	     */
	    destroy: function() {
	        this.wrapper.removeChild( this.element );
	        this.container.removeChild( this.wrapper );
	    },
	
	    /**
	     * Determines if the control is currently visible.
	     * @function
	     * @return {Boolean} true if currenly visible, false otherwise.
	     */
	    isVisible: function() {
	        return this.wrapper.style.display != "none";
	    },
	
	    /**
	     * Toggles the visibility of the control.
	     * @function
	     * @param {Boolean} visible - true to make visible, false to hide.
	     */
	    setVisible: function( visible ) {
	        this.wrapper.style.display = visible ?
	            ( this.anchor == $.ControlAnchor.ABSOLUTE ? 'block' : 'inline-block' ) :
	            "none";
	    },
	
	    /**
	     * Sets the opacity level for the control.
	     * @function
	     * @param {Number} opactiy - a value between 1 and 0 inclusively.
	     */
	    setOpacity: function( opacity ) {
	        if ( this.element[ $.SIGNAL ] && $.Browser.vendor == $.BROWSERS.IE ) {
	            $.setElementOpacity( this.element, opacity, true );
	        } else {
	            $.setElementOpacity( this.wrapper, opacity, true );
	        }
	    }
	};
	
	}( OpenSeadragon ));
	
	/*
	 * OpenSeadragon - ControlDock
	 *
	 * Copyright (C) 2009 CodePlex Foundation
	 * Copyright (C) 2010-2013 OpenSeadragon contributors
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 * - Redistributions of source code must retain the above copyright notice,
	 *   this list of conditions and the following disclaimer.
	 *
	 * - Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * - Neither the name of CodePlex Foundation nor the names of its
	 *   contributors may be used to endorse or promote products derived from
	 *   this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
	 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */
	
	(function( $ ){
	    /**
	     * @class ControlDock
	     * @classdesc Provides a container element (a &lt;form&gt; element) with support for the layout of control elements.
	     *
	     * @memberof OpenSeadragon
	     */
	    $.ControlDock = function( options ){
	        var layouts = [ 'topleft', 'topright', 'bottomright', 'bottomleft'],
	            layout,
	            i;
	
	        $.extend( true, this, {
	            id: 'controldock-'+$.now()+'-'+Math.floor(Math.random()*1000000),
	            container: $.makeNeutralElement( 'div' ),
	            controls: []
	        }, options );
	
	        // Disable the form's submit; otherwise button clicks and return keys
	        // can trigger it.
	        this.container.onsubmit = function() {
	            return false;
	        };
	
	        if( this.element ){
	            this.element = $.getElement( this.element );
	            this.element.appendChild( this.container );
	            this.element.style.position = 'relative';
	            this.container.style.width = '100%';
	            this.container.style.height = '100%';
	        }
	
	        for( i = 0; i < layouts.length; i++ ){
	            layout = layouts[ i ];
	            this.controls[ layout ] = $.makeNeutralElement( "div" );
	            this.controls[ layout ].style.position = 'absolute';
	            if ( layout.match( 'left' ) ){
	                this.controls[ layout ].style.left = '0px';
	            }
	            if ( layout.match( 'right' ) ){
	                this.controls[ layout ].style.right = '0px';
	            }
	            if ( layout.match( 'top' ) ){
	                this.controls[ layout ].style.top = '0px';
	            }
	            if ( layout.match( 'bottom' ) ){
	                this.controls[ layout ].style.bottom = '0px';
	            }
	        }
	
	        this.container.appendChild( this.controls.topleft );
	        this.container.appendChild( this.controls.topright );
	        this.container.appendChild( this.controls.bottomright );
	        this.container.appendChild( this.controls.bottomleft );
	    };
	
	    /** @lends OpenSeadragon.ControlDock.prototype */
	    $.ControlDock.prototype = {
	
	        /**
	         * @function
	         */
	        addControl: function ( element, controlOptions ) {
	            element = $.getElement( element );
	            var div = null;
	
	            if ( getControlIndex( this, element ) >= 0 ) {
	                return;     // they're trying to add a duplicate control
	            }
	
	            switch ( controlOptions.anchor ) {
	                case $.ControlAnchor.TOP_RIGHT:
	                    div = this.controls.topright;
	                    element.style.position = "relative";
	                    element.style.paddingRight = "0px";
	                    element.style.paddingTop = "0px";
	                    break;
	                case $.ControlAnchor.BOTTOM_RIGHT:
	                    div = this.controls.bottomright;
	                    element.style.position = "relative";
	                    element.style.paddingRight = "0px";
	                    element.style.paddingBottom = "0px";
	                    break;
	                case $.ControlAnchor.BOTTOM_LEFT:
	                    div = this.controls.bottomleft;
	                    element.style.position = "relative";
	                    element.style.paddingLeft = "0px";
	                    element.style.paddingBottom = "0px";
	                    break;
	                case $.ControlAnchor.TOP_LEFT:
	                    div = this.controls.topleft;
	                    element.style.position = "relative";
	                    element.style.paddingLeft = "0px";
	                    element.style.paddingTop = "0px";
	                    break;
	                case $.ControlAnchor.ABSOLUTE:
	                    div = this.container;
	                    element.style.margin = "0px";
	                    element.style.padding = "0px";
	                    break;
	                default:
	                case $.ControlAnchor.NONE:
	                    div = this.container;
	                    element.style.margin = "0px";
	                    element.style.padding = "0px";
	                    break;
	            }
	
	            this.controls.push(
	                new $.Control( element, controlOptions, div )
	            );
	            element.style.display = "inline-block";
	        },
	
	
	        /**
	         * @function
	         * @return {OpenSeadragon.ControlDock} Chainable.
	         */
	        removeControl: function ( element ) {
	            element = $.getElement( element );
	            var i = getControlIndex( this, element );
	
	            if ( i >= 0 ) {
	                this.controls[ i ].destroy();
	                this.controls.splice( i, 1 );
	            }
	
	            return this;
	        },
	
	        /**
	         * @function
	         * @return {OpenSeadragon.ControlDock} Chainable.
	         */
	        clearControls: function () {
	            while ( this.controls.length > 0 ) {
	                this.controls.pop().destroy();
	            }
	
	            return this;
	        },
	
	
	        /**
	         * @function
	         * @return {Boolean}
	         */
	        areControlsEnabled: function () {
	            var i;
	
	            for ( i = this.controls.length - 1; i >= 0; i-- ) {
	                if ( this.controls[ i ].isVisible() ) {
	                    return true;
	                }
	            }
	
	            return false;
	        },
	
	
	        /**
	         * @function
	         * @return {OpenSeadragon.ControlDock} Chainable.
	         */
	        setControlsEnabled: function( enabled ) {
	            var i;
	
	            for ( i = this.controls.length - 1; i >= 0; i-- ) {
	                this.controls[ i ].setVisible( enabled );
	            }
	
	            return this;
	        }
	
	    };
	
	
	    ///////////////////////////////////////////////////////////////////////////////
	    // Utility methods
	    ///////////////////////////////////////////////////////////////////////////////
	    function getControlIndex( dock, element ) {
	        var controls = dock.controls,
	            i;
	
	        for ( i = controls.length - 1; i >= 0; i-- ) {
	            if ( controls[ i ].element == element ) {
	                return i;
	            }
	        }
	
	        return -1;
	    }
	
	}( OpenSeadragon ));
	
	/*
	 * OpenSeadragon - Placement
	 *
	 * Copyright (C) 2010-2016 OpenSeadragon contributors
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 * - Redistributions of source code must retain the above copyright notice,
	 *   this list of conditions and the following disclaimer.
	 *
	 * - Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * - Neither the name of CodePlex Foundation nor the names of its
	 *   contributors may be used to endorse or promote products derived from
	 *   this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
	 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */
	
	(function($) {
	
	    /**
	     * An enumeration of positions to anchor an element.
	     * @member Placement
	     * @memberOf OpenSeadragon
	     * @static
	     * @readonly
	     * @property {OpenSeadragon.Placement} CENTER
	     * @property {OpenSeadragon.Placement} TOP_LEFT
	     * @property {OpenSeadragon.Placement} TOP
	     * @property {OpenSeadragon.Placement} TOP_RIGHT
	     * @property {OpenSeadragon.Placement} RIGHT
	     * @property {OpenSeadragon.Placement} BOTTOM_RIGHT
	     * @property {OpenSeadragon.Placement} BOTTOM
	     * @property {OpenSeadragon.Placement} BOTTOM_LEFT
	     * @property {OpenSeadragon.Placement} LEFT
	     */
	    $.Placement = $.freezeObject({
	        CENTER:       0,
	        TOP_LEFT:     1,
	        TOP:          2,
	        TOP_RIGHT:    3,
	        RIGHT:        4,
	        BOTTOM_RIGHT: 5,
	        BOTTOM:       6,
	        BOTTOM_LEFT:  7,
	        LEFT:         8,
	        properties: {
	            0: {
	                isLeft: false,
	                isHorizontallyCentered: true,
	                isRight: false,
	                isTop: false,
	                isVerticallyCentered: true,
	                isBottom: false
	            },
	            1: {
	                isLeft: true,
	                isHorizontallyCentered: false,
	                isRight: false,
	                isTop: true,
	                isVerticallyCentered: false,
	                isBottom: false
	            },
	            2: {
	                isLeft: false,
	                isHorizontallyCentered: true,
	                isRight: false,
	                isTop: true,
	                isVerticallyCentered: false,
	                isBottom: false
	            },
	            3: {
	                isLeft: false,
	                isHorizontallyCentered: false,
	                isRight: true,
	                isTop: true,
	                isVerticallyCentered: false,
	                isBottom: false
	            },
	            4: {
	                isLeft: false,
	                isHorizontallyCentered: false,
	                isRight: true,
	                isTop: false,
	                isVerticallyCentered: true,
	                isBottom: false
	            },
	            5: {
	                isLeft: false,
	                isHorizontallyCentered: false,
	                isRight: true,
	                isTop: false,
	                isVerticallyCentered: false,
	                isBottom: true
	            },
	            6: {
	                isLeft: false,
	                isHorizontallyCentered: true,
	                isRight: false,
	                isTop: false,
	                isVerticallyCentered: false,
	                isBottom: true
	            },
	            7: {
	                isLeft: true,
	                isHorizontallyCentered: false,
	                isRight: false,
	                isTop: false,
	                isVerticallyCentered: false,
	                isBottom: true
	            },
	            8: {
	                isLeft: true,
	                isHorizontallyCentered: false,
	                isRight: false,
	                isTop: false,
	                isVerticallyCentered: true,
	                isBottom: false
	            }
	        }
	    });
	
	}(OpenSeadragon));
	
	/*
	 * OpenSeadragon - Viewer
	 *
	 * Copyright (C) 2009 CodePlex Foundation
	 * Copyright (C) 2010-2013 OpenSeadragon contributors
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 * - Redistributions of source code must retain the above copyright notice,
	 *   this list of conditions and the following disclaimer.
	 *
	 * - Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * - Neither the name of CodePlex Foundation nor the names of its
	 *   contributors may be used to endorse or promote products derived from
	 *   this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
	 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */
	
	(function( $ ){
	
	// dictionary from hash to private properties
	var THIS = {};
	var nextHash = 1;
	
	/**
	 *
	 * The main point of entry into creating a zoomable image on the page.<br>
	 * <br>
	 * We have provided an idiomatic javascript constructor which takes
	 * a single object, but still support the legacy positional arguments.<br>
	 * <br>
	 * The options below are given in order that they appeared in the constructor
	 * as arguments and we translate a positional call into an idiomatic call.<br>
	 * <br>
	 * To create a viewer, you can use either of this methods:<br>
	 * <ul>
	 * <li><code>var viewer = new OpenSeadragon.Viewer(options);</code></li>
	 * <li><code>var viewer = OpenSeadragon(options);</code></li>
	 * </ul>
	 * @class Viewer
	 * @classdesc The main OpenSeadragon viewer class.
	 *
	 * @memberof OpenSeadragon
	 * @extends OpenSeadragon.EventSource
	 * @extends OpenSeadragon.ControlDock
	 * @param {OpenSeadragon.Options} options - Viewer options.
	 *
	 **/
	$.Viewer = function( options ) {
	
	    var args  = arguments,
	        _this = this,
	        i;
	
	
	    //backward compatibility for positional args while prefering more
	    //idiomatic javascript options object as the only argument
	    if( !$.isPlainObject( options ) ){
	        options = {
	            id:                 args[ 0 ],
	            xmlPath:            args.length > 1 ? args[ 1 ] : undefined,
	            prefixUrl:          args.length > 2 ? args[ 2 ] : undefined,
	            controls:           args.length > 3 ? args[ 3 ] : undefined,
	            overlays:           args.length > 4 ? args[ 4 ] : undefined
	        };
	    }
	
	    //options.config and the general config argument are deprecated
	    //in favor of the more direct specification of optional settings
	    //being pass directly on the options object
	    if ( options.config ){
	        $.extend( true, options, options.config );
	        delete options.config;
	    }
	
	    //Public properties
	    //Allow the options object to override global defaults
	    $.extend( true, this, {
	
	        //internal state and dom identifiers
	        id:             options.id,
	        hash:           options.hash || nextHash++,
	
	        //dom nodes
	        /**
	         * The parent element of this Viewer instance, passed in when the Viewer was created.
	         * @member {Element} element
	         * @memberof OpenSeadragon.Viewer#
	         */
	        element:        null,
	        /**
	         * A &lt;div&gt; element (provided by {@link OpenSeadragon.ControlDock}), the base element of this Viewer instance.<br><br>
	         * Child element of {@link OpenSeadragon.Viewer#element}.
	         * @member {Element} container
	         * @memberof OpenSeadragon.Viewer#
	         */
	        container:      null,
	        /**
	         * A &lt;div&gt; element, the element where user-input events are handled for panning and zooming.<br><br>
	         * Child element of {@link OpenSeadragon.Viewer#container},
	         * positioned on top of {@link OpenSeadragon.Viewer#keyboardCommandArea}.<br><br>
	         * The parent of {@link OpenSeadragon.Drawer#canvas} instances.
	         * @member {Element} canvas
	         * @memberof OpenSeadragon.Viewer#
	         */
	        canvas:         null,
	
	        // Overlays list. An overlay allows to add html on top of the viewer.
	        overlays:           [],
	        // Container inside the canvas where overlays are drawn.
	        overlaysContainer:  null,
	
	        //private state properties
	        previousBody:   [],
	
	        //This was originally initialized in the constructor and so could never
	        //have anything in it.  now it can because we allow it to be specified
	        //in the options and is only empty by default if not specified. Also
	        //this array was returned from get_controls which I find confusing
	        //since this object has a controls property which is treated in other
	        //functions like clearControls.  I'm removing the accessors.
	        customControls: [],
	
	        //These are originally not part options but declared as members
	        //in initialize.  It's still considered idiomatic to put them here
	        source:         null,
	        /**
	         * Handles rendering of tiles in the viewer. Created for each TileSource opened.
	         * @member {OpenSeadragon.Drawer} drawer
	         * @memberof OpenSeadragon.Viewer#
	         */
	        drawer:             null,
	        world:              null,
	        /**
	         * Handles coordinate-related functionality - zoom, pan, rotation, etc. Created for each TileSource opened.
	         * @member {OpenSeadragon.Viewport} viewport
	         * @memberof OpenSeadragon.Viewer#
	         */
	        viewport:       null,
	        /**
	         * @member {OpenSeadragon.Navigator} navigator
	         * @memberof OpenSeadragon.Viewer#
	         */
	        navigator:      null,
	
	        //A collection viewport is a separate viewport used to provide
	        //simultaneous rendering of sets of tiles
	        collectionViewport:     null,
	        collectionDrawer:       null,
	
	        //UI image resources
	        //TODO: rename navImages to uiImages
	        navImages:      null,
	
	        //interface button controls
	        buttons:        null,
	
	        //TODO: this is defunct so safely remove it
	        profiler:       null
	
	    }, $.DEFAULT_SETTINGS, options );
	
	    if ( typeof( this.hash) === "undefined" ) {
	        throw new Error("A hash must be defined, either by specifying options.id or options.hash.");
	    }
	    if ( typeof( THIS[ this.hash ] ) !== "undefined" ) {
	        // We don't want to throw an error here, as the user might have discarded
	        // the previous viewer with the same hash and now want to recreate it.
	        $.console.warn("Hash " + this.hash + " has already been used.");
	    }
	
	    //Private state properties
	    THIS[ this.hash ] = {
	        "fsBoundsDelta":     new $.Point( 1, 1 ),
	        "prevContainerSize": null,
	        "animating":         false,
	        "forceRedraw":       false,
	        "mouseInside":       false,
	        "group":             null,
	        // whether we should be continuously zooming
	        "zooming":           false,
	        // how much we should be continuously zooming by
	        "zoomFactor":        null,
	        "lastZoomTime":      null,
	        "fullPage":          false,
	        "onfullscreenchange": null
	    };
	
	    this._sequenceIndex = 0;
	    this._firstOpen = true;
	    this._updateRequestId = null;
	    this._loadQueue = [];
	    this.currentOverlays = [];
	
	    this._lastScrollTime = $.now(); // variable used to help normalize the scroll event speed of different devices
	
	    //Inherit some behaviors and properties
	    $.EventSource.call( this );
	
	    this.addHandler( 'open-failed', function ( event ) {
	        var msg = $.getString( "Errors.OpenFailed", event.eventSource, event.message);
	        _this._showMessage( msg );
	    });
	
	    $.ControlDock.call( this, options );
	
	    //Deal with tile sources
	    if ( this.xmlPath  ){
	        //Deprecated option.  Now it is preferred to use the tileSources option
	        this.tileSources = [ this.xmlPath ];
	    }
	
	    this.element              = this.element || document.getElementById( this.id );
	    this.canvas               = $.makeNeutralElement( "div" );
	
	    this.canvas.className = "openseadragon-canvas";
	    (function( style ){
	        style.width    = "100%";
	        style.height   = "100%";
	        style.overflow = "hidden";
	        style.position = "absolute";
	        style.top      = "0px";
	        style.left     = "0px";
	    }(this.canvas.style));
	    $.setElementTouchActionNone( this.canvas );
	    if (options.tabIndex !== "") {
	        this.canvas.tabIndex = (options.tabIndex === undefined ? 0 : options.tabIndex);
	    }
	
	    //the container is created through applying the ControlDock constructor above
	    this.container.className = "openseadragon-container";
	    (function( style ){
	        style.width     = "100%";
	        style.height    = "100%";
	        style.position  = "relative";
	        style.overflow  = "hidden";
	        style.left      = "0px";
	        style.top       = "0px";
	        style.textAlign = "left";  // needed to protect against
	    }( this.container.style ));
	
	    this.container.insertBefore( this.canvas, this.container.firstChild );
	    this.element.appendChild( this.container );
	
	    //Used for toggling between fullscreen and default container size
	    //TODO: these can be closure private and shared across Viewer
	    //      instances.
	    this.bodyWidth      = document.body.style.width;
	    this.bodyHeight     = document.body.style.height;
	    this.bodyOverflow   = document.body.style.overflow;
	    this.docOverflow    = document.documentElement.style.overflow;
	
	    this.innerTracker = new $.MouseTracker({
	        element:                  this.canvas,
	        startDisabled:            this.mouseNavEnabled ? false : true,
	        clickTimeThreshold:       this.clickTimeThreshold,
	        clickDistThreshold:       this.clickDistThreshold,
	        dblClickTimeThreshold:    this.dblClickTimeThreshold,
	        dblClickDistThreshold:    this.dblClickDistThreshold,
	        keyDownHandler:           $.delegate( this, onCanvasKeyDown ),
	        keyHandler:               $.delegate( this, onCanvasKeyPress ),
	        clickHandler:             $.delegate( this, onCanvasClick ),
	        dblClickHandler:          $.delegate( this, onCanvasDblClick ),
	        dragHandler:              $.delegate( this, onCanvasDrag ),
	        dragEndHandler:           $.delegate( this, onCanvasDragEnd ),
	        enterHandler:             $.delegate( this, onCanvasEnter ),
	        exitHandler:              $.delegate( this, onCanvasExit ),
	        pressHandler:             $.delegate( this, onCanvasPress ),
	        releaseHandler:           $.delegate( this, onCanvasRelease ),
	        nonPrimaryPressHandler:   $.delegate( this, onCanvasNonPrimaryPress ),
	        nonPrimaryReleaseHandler: $.delegate( this, onCanvasNonPrimaryRelease ),
	        scrollHandler:            $.delegate( this, onCanvasScroll ),
	        pinchHandler:             $.delegate( this, onCanvasPinch )
	    });
	
	    this.outerTracker = new $.MouseTracker({
	        element:               this.container,
	        startDisabled:         this.mouseNavEnabled ? false : true,
	        clickTimeThreshold:    this.clickTimeThreshold,
	        clickDistThreshold:    this.clickDistThreshold,
	        dblClickTimeThreshold: this.dblClickTimeThreshold,
	        dblClickDistThreshold: this.dblClickDistThreshold,
	        enterHandler:          $.delegate( this, onContainerEnter ),
	        exitHandler:           $.delegate( this, onContainerExit )
	    });
	
	    if( this.toolbar ){
	        this.toolbar = new $.ControlDock({ element: this.toolbar });
	    }
	
	    this.bindStandardControls();
	
	    THIS[ this.hash ].prevContainerSize = _getSafeElemSize( this.container );
	
	    // Create the world
	    this.world = new $.World({
	        viewer: this
	    });
	
	    this.world.addHandler('add-item', function(event) {
	        // For backwards compatibility, we maintain the source property
	        _this.source = _this.world.getItemAt(0).source;
	
	        THIS[ _this.hash ].forceRedraw = true;
	
	        if (!_this._updateRequestId) {
	            _this._updateRequestId = scheduleUpdate( _this, updateMulti );
	        }
	    });
	
	    this.world.addHandler('remove-item', function(event) {
	        // For backwards compatibility, we maintain the source property
	        if (_this.world.getItemCount()) {
	            _this.source = _this.world.getItemAt(0).source;
	        } else {
	            _this.source = null;
	        }
	
	        THIS[ _this.hash ].forceRedraw = true;
	    });
	
	    this.world.addHandler('metrics-change', function(event) {
	        if (_this.viewport) {
	            _this.viewport._setContentBounds(_this.world.getHomeBounds(), _this.world.getContentFactor());
	        }
	    });
	
	    this.world.addHandler('item-index-change', function(event) {
	        // For backwards compatibility, we maintain the source property
	        _this.source = _this.world.getItemAt(0).source;
	    });
	
	    // Create the viewport
	    this.viewport = new $.Viewport({
	        containerSize:      THIS[ this.hash ].prevContainerSize,
	        springStiffness:    this.springStiffness,
	        animationTime:      this.animationTime,
	        minZoomImageRatio:  this.minZoomImageRatio,
	        maxZoomPixelRatio:  this.maxZoomPixelRatio,
	        visibilityRatio:    this.visibilityRatio,
	        wrapHorizontal:     this.wrapHorizontal,
	        wrapVertical:       this.wrapVertical,
	        defaultZoomLevel:   this.defaultZoomLevel,
	        minZoomLevel:       this.minZoomLevel,
	        maxZoomLevel:       this.maxZoomLevel,
	        viewer:             this,
	        degrees:            this.degrees,
	        navigatorRotate:    this.navigatorRotate,
	        homeFillsViewer:    this.homeFillsViewer,
	        margins:            this.viewportMargins
	    });
	
	    this.viewport._setContentBounds(this.world.getHomeBounds(), this.world.getContentFactor());
	
	    // Create the image loader
	    this.imageLoader = new $.ImageLoader({
	        jobLimit: this.imageLoaderLimit
	    });
	
	    // Create the tile cache
	    this.tileCache = new $.TileCache({
	        maxImageCacheCount: this.maxImageCacheCount
	    });
	
	    // Create the drawer
	    this.drawer = new $.Drawer({
	        viewer:             this,
	        viewport:           this.viewport,
	        element:            this.canvas,
	        debugGridColor:     this.debugGridColor
	    });
	
	    // Overlay container
	    this.overlaysContainer    = $.makeNeutralElement( "div" );
	    this.canvas.appendChild( this.overlaysContainer );
	
	    // Now that we have a drawer, see if it supports rotate. If not we need to remove the rotate buttons
	    if (!this.drawer.canRotate()) {
	        // Disable/remove the rotate left/right buttons since they aren't supported
	        if (this.rotateLeft) {
	            i = this.buttons.buttons.indexOf(this.rotateLeft);
	            this.buttons.buttons.splice(i, 1);
	            this.buttons.element.removeChild(this.rotateLeft.element);
	        }
	        if (this.rotateRight) {
	            i = this.buttons.buttons.indexOf(this.rotateRight);
	            this.buttons.buttons.splice(i, 1);
	            this.buttons.element.removeChild(this.rotateRight.element);
	        }
	    }
	
	    //Instantiate a navigator if configured
	    if ( this.showNavigator){
	        this.navigator = new $.Navigator({
	            id:                this.navigatorId,
	            position:          this.navigatorPosition,
	            sizeRatio:         this.navigatorSizeRatio,
	            maintainSizeRatio: this.navigatorMaintainSizeRatio,
	            top:               this.navigatorTop,
	            left:              this.navigatorLeft,
	            width:             this.navigatorWidth,
	            height:            this.navigatorHeight,
	            autoResize:        this.navigatorAutoResize,
	            autoFade:          this.navigatorAutoFade,
	            prefixUrl:         this.prefixUrl,
	            viewer:            this,
	            navigatorRotate:   this.navigatorRotate,
	            crossOriginPolicy: this.crossOriginPolicy
	        });
	    }
	
	    // Sequence mode
	    if (this.sequenceMode) {
	        this.bindSequenceControls();
	    }
	
	    // Open initial tilesources
	    if (this.tileSources) {
	        this.open( this.tileSources );
	    }
	
	    // Add custom controls
	    for ( i = 0; i < this.customControls.length; i++ ) {
	        this.addControl(
	            this.customControls[ i ].id,
	            {anchor: this.customControls[ i ].anchor}
	        );
	    }
	
	    // Initial fade out
	    $.requestAnimationFrame( function(){
	        beginControlsAutoHide( _this );
	    } );
	};
	
	$.extend( $.Viewer.prototype, $.EventSource.prototype, $.ControlDock.prototype, /** @lends OpenSeadragon.Viewer.prototype */{
	
	
	    /**
	     * @function
	     * @return {Boolean}
	     */
	    isOpen: function () {
	        return !!this.world.getItemCount();
	    },
	
	    // deprecated
	    openDzi: function ( dzi ) {
	        $.console.error( "[Viewer.openDzi] this function is deprecated; use Viewer.open() instead." );
	        return this.open( dzi );
	    },
	
	    // deprecated
	    openTileSource: function ( tileSource ) {
	        $.console.error( "[Viewer.openTileSource] this function is deprecated; use Viewer.open() instead." );
	        return this.open( tileSource );
	    },
	
	    /**
	     * Open tiled images into the viewer, closing any others.
	     * @function
	     * @param {Array|String|Object|Function} tileSources - This can be a TiledImage
	     * specifier, a TileSource specifier, or an array of either. A TiledImage specifier
	     * is the same as the options parameter for {@link OpenSeadragon.Viewer#addTiledImage},
	     * except for the index property; images are added in sequence.
	     * A TileSource specifier is anything you could pass as the tileSource property
	     * of the options parameter for {@link OpenSeadragon.Viewer#addTiledImage}.
	     * @return {OpenSeadragon.Viewer} Chainable.
	     * @fires OpenSeadragon.Viewer.event:open
	     * @fires OpenSeadragon.Viewer.event:open-failed
	     */
	    open: function (tileSources) {
	        var _this = this;
	
	        this.close();
	
	        if (!tileSources) {
	            return;
	        }
	
	        if (this.sequenceMode && $.isArray(tileSources)) {
	            if (this.referenceStrip) {
	                this.referenceStrip.destroy();
	                this.referenceStrip = null;
	            }
	
	            this.tileSources = tileSources;
	            this._sequenceIndex = Math.max(0, Math.min(this.tileSources.length - 1, this.initialPage));
	            if (this.tileSources.length) {
	                this.open(this.tileSources[this._sequenceIndex]);
	
	                if ( this.showReferenceStrip ){
	                    this.referenceStrip = new $.ReferenceStrip({
	                        id:          this.referenceStripElement,
	                        position:    this.referenceStripPosition,
	                        sizeRatio:   this.referenceStripSizeRatio,
	                        scroll:      this.referenceStripScroll,
	                        height:      this.referenceStripHeight,
	                        width:       this.referenceStripWidth,
	                        tileSources: this.tileSources,
	                        prefixUrl:   this.prefixUrl,
	                        viewer:      this
	                    });
	                }
	            }
	
	            this._updateSequenceButtons( this._sequenceIndex );
	            return;
	        }
	
	        if (!$.isArray(tileSources)) {
	            tileSources = [tileSources];
	        }
	
	        if (!tileSources.length) {
	            return;
	        }
	
	        this._opening = true;
	
	        var expected = tileSources.length;
	        var successes = 0;
	        var failures = 0;
	        var failEvent;
	
	        var checkCompletion = function() {
	            if (successes + failures === expected) {
	                if (successes) {
	                    if (_this._firstOpen || !_this.preserveViewport) {
	                        _this.viewport.goHome( true );
	                        _this.viewport.update();
	                    }
	
	                    _this._firstOpen = false;
	
	                    var source = tileSources[0];
	                    if (source.tileSource) {
	                        source = source.tileSource;
	                    }
	
	                    // Global overlays
	                    if( _this.overlays && !_this.preserveOverlays ){
	                        for ( var i = 0; i < _this.overlays.length; i++ ) {
	                            _this.currentOverlays[ i ] = getOverlayObject( _this, _this.overlays[ i ] );
	                        }
	                    }
	
	                    _this._drawOverlays();
	                    _this._opening = false;
	
	                    /**
	                     * Raised when the viewer has opened and loaded one or more TileSources.
	                     *
	                     * @event open
	                     * @memberof OpenSeadragon.Viewer
	                     * @type {object}
	                     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.
	                     * @property {OpenSeadragon.TileSource} source - The tile source that was opened.
	                     * @property {?Object} userData - Arbitrary subscriber-defined object.
	                     */
	                    // TODO: what if there are multiple sources?
	                    _this.raiseEvent( 'open', { source: source } );
	                } else {
	                    _this._opening = false;
	
	                    /**
	                     * Raised when an error occurs loading a TileSource.
	                     *
	                     * @event open-failed
	                     * @memberof OpenSeadragon.Viewer
	                     * @type {object}
	                     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.
	                     * @property {String} message - Information about what failed.
	                     * @property {String} source - The tile source that failed.
	                     * @property {?Object} userData - Arbitrary subscriber-defined object.
	                     */
	                    _this.raiseEvent( 'open-failed', failEvent );
	                }
	            }
	        };
	
	        var doOne = function(options) {
	            if (!$.isPlainObject(options) || !options.tileSource) {
	                options = {
	                    tileSource: options
	                };
	            }
	
	            if (options.index !== undefined) {
	                $.console.error('[Viewer.open] setting indexes here is not supported; use addTiledImage instead');
	                delete options.index;
	            }
	
	            if (options.collectionImmediately === undefined) {
	                options.collectionImmediately = true;
	            }
	
	            var originalSuccess = options.success;
	            options.success = function(event) {
	                successes++;
	
	                // TODO: now that options has other things besides tileSource, the overlays
	                // should probably be at the options level, not the tileSource level.
	                if (options.tileSource.overlays) {
	                    for (var i = 0; i < options.tileSource.overlays.length; i++) {
	                        _this.addOverlay(options.tileSource.overlays[i]);
	                    }
	                }
	
	                if (originalSuccess) {
	                    originalSuccess(event);
	                }
	
	                checkCompletion();
	            };
	
	            var originalError = options.error;
	            options.error = function(event) {
	                failures++;
	
	                if (!failEvent) {
	                    failEvent = event;
	                }
	
	                if (originalError) {
	                    originalError(event);
	                }
	
	                checkCompletion();
	            };
	
	            _this.addTiledImage(options);
	        };
	
	        // TileSources
	        for (var i = 0; i < tileSources.length; i++) {
	            doOne(tileSources[i]);
	        }
	
	        return this;
	    },
	
	
	    /**
	     * @function
	     * @return {OpenSeadragon.Viewer} Chainable.
	     * @fires OpenSeadragon.Viewer.event:close
	     */
	    close: function ( ) {
	        if ( !THIS[ this.hash ] ) {
	            //this viewer has already been destroyed: returning immediately
	            return this;
	        }
	
	        this._opening = false;
	
	        if ( this.navigator ) {
	            this.navigator.close();
	        }
	
	        if( ! this.preserveOverlays) {
	            this.clearOverlays();
	            this.overlaysContainer.innerHTML = "";
	        }
	
	        THIS[ this.hash ].animating = false;
	        this.world.removeAll();
	        this.imageLoader.clear();
	
	        /**
	         * Raised when the viewer is closed (see {@link OpenSeadragon.Viewer#close}).
	         *
	         * @event close
	         * @memberof OpenSeadragon.Viewer
	         * @type {object}
	         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.
	         * @property {?Object} userData - Arbitrary subscriber-defined object.
	         */
	        this.raiseEvent( 'close' );
	
	        return this;
	    },
	
	
	    /**
	     * Function to destroy the viewer and clean up everything created by OpenSeadragon.
	     *
	     * Example:
	     * var viewer = OpenSeadragon({
	     *   [...]
	     * });
	     *
	     * //when you are done with the viewer:
	     * viewer.destroy();
	     * viewer = null; //important
	     *
	     * @function
	     */
	    destroy: function( ) {
	        if ( !THIS[ this.hash ] ) {
	            //this viewer has already been destroyed: returning immediately
	            return;
	        }
	
	        this.close();
	
	        this.clearOverlays();
	        this.overlaysContainer.innerHTML = "";
	
	        //TODO: implement this...
	        //this.unbindSequenceControls()
	        //this.unbindStandardControls()
	
	        if (this.referenceStrip) {
	            this.referenceStrip.destroy();
	            this.referenceStrip = null;
	        }
	
	        if ( this._updateRequestId !== null ) {
	            $.cancelAnimationFrame( this._updateRequestId );
	            this._updateRequestId = null;
	        }
	
	        if ( this.drawer ) {
	            this.drawer.destroy();
	        }
	
	        this.removeAllHandlers();
	
	        // Go through top element (passed to us) and remove all children
	        // Use removeChild to make sure it handles SVG or any non-html
	        // also it performs better - http://jsperf.com/innerhtml-vs-removechild/15
	        if (this.element){
	            while (this.element.firstChild) {
	                this.element.removeChild(this.element.firstChild);
	            }
	        }
	
	        // destroy the mouse trackers
	        if (this.innerTracker){
	            this.innerTracker.destroy();
	        }
	        if (this.outerTracker){
	            this.outerTracker.destroy();
	        }
	
	        THIS[ this.hash ] = null;
	        delete THIS[ this.hash ];
	
	        // clear all our references to dom objects
	        this.canvas = null;
	        this.container = null;
	
	        // clear our reference to the main element - they will need to pass it in again, creating a new viewer
	        this.element = null;
	    },
	
	    /**
	     * @function
	     * @return {Boolean}
	     */
	    isMouseNavEnabled: function () {
	        return this.innerTracker.isTracking();
	    },
	
	    /**
	     * @function
	     * @param {Boolean} enabled - true to enable, false to disable
	     * @return {OpenSeadragon.Viewer} Chainable.
	     * @fires OpenSeadragon.Viewer.event:mouse-enabled
	     */
	    setMouseNavEnabled: function( enabled ){
	        this.innerTracker.setTracking( enabled );
	        this.outerTracker.setTracking( enabled );
	        /**
	         * Raised when mouse/touch navigation is enabled or disabled (see {@link OpenSeadragon.Viewer#setMouseNavEnabled}).
	         *
	         * @event mouse-enabled
	         * @memberof OpenSeadragon.Viewer
	         * @type {object}
	         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.
	         * @property {Boolean} enabled
	         * @property {?Object} userData - Arbitrary subscriber-defined object.
	         */
	        this.raiseEvent( 'mouse-enabled', { enabled: enabled } );
	        return this;
	    },
	
	
	    /**
	     * @function
	     * @return {Boolean}
	     */
	    areControlsEnabled: function () {
	        var enabled = this.controls.length,
	            i;
	        for( i = 0; i < this.controls.length; i++ ){
	            enabled = enabled && this.controls[ i ].isVisibile();
	        }
	        return enabled;
	    },
	
	
	    /**
	     * Shows or hides the controls (e.g. the default navigation buttons).
	     *
	     * @function
	     * @param {Boolean} true to show, false to hide.
	     * @return {OpenSeadragon.Viewer} Chainable.
	     * @fires OpenSeadragon.Viewer.event:controls-enabled
	     */
	    setControlsEnabled: function( enabled ) {
	        if( enabled ){
	            abortControlsAutoHide( this );
	        } else {
	            beginControlsAutoHide( this );
	        }
	        /**
	         * Raised when the navigation controls are shown or hidden (see {@link OpenSeadragon.Viewer#setControlsEnabled}).
	         *
	         * @event controls-enabled
	         * @memberof OpenSeadragon.Viewer
	         * @type {object}
	         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.
	         * @property {Boolean} enabled
	         * @property {?Object} userData - Arbitrary subscriber-defined object.
	         */
	        this.raiseEvent( 'controls-enabled', { enabled: enabled } );
	        return this;
	    },
	
	    /**
	     * @function
	     * @return {Boolean}
	     */
	    isFullPage: function () {
	        return THIS[ this.hash ].fullPage;
	    },
	
	
	    /**
	     * Toggle full page mode.
	     * @function
	     * @param {Boolean} fullPage
	     *      If true, enter full page mode.  If false, exit full page mode.
	     * @return {OpenSeadragon.Viewer} Chainable.
	     * @fires OpenSeadragon.Viewer.event:pre-full-page
	     * @fires OpenSeadragon.Viewer.event:full-page
	     */
	    setFullPage: function( fullPage ) {
	
	        var body = document.body,
	            bodyStyle = body.style,
	            docStyle = document.documentElement.style,
	            _this = this,
	            hash,
	            nodes,
	            i;
	
	        //dont bother modifying the DOM if we are already in full page mode.
	        if ( fullPage == this.isFullPage() ) {
	            return this;
	        }
	
	        var fullPageEventArgs = {
	            fullPage: fullPage,
	            preventDefaultAction: false
	        };
	        /**
	         * Raised when the viewer is about to change to/from full-page mode (see {@link OpenSeadragon.Viewer#setFullPage}).
	         *
	         * @event pre-full-page
	         * @memberof OpenSeadragon.Viewer
	         * @type {object}
	         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.
	         * @property {Boolean} fullPage - True if entering full-page mode, false if exiting full-page mode.
	         * @property {Boolean} preventDefaultAction - Set to true to prevent full-page mode change. Default: false.
	         * @property {?Object} userData - Arbitrary subscriber-defined object.
	         */
	        this.raiseEvent( 'pre-full-page', fullPageEventArgs );
	        if ( fullPageEventArgs.preventDefaultAction ) {
	            return this;
	        }
	
	        if ( fullPage ) {
	
	            this.elementSize = $.getElementSize( this.element );
	            this.pageScroll = $.getPageScroll();
	
	            this.elementMargin = this.element.style.margin;
	            this.element.style.margin = "0";
	            this.elementPadding = this.element.style.padding;
	            this.element.style.padding = "0";
	
	            this.bodyMargin = bodyStyle.margin;
	            this.docMargin = docStyle.margin;
	            bodyStyle.margin = "0";
	            docStyle.margin = "0";
	
	            this.bodyPadding = bodyStyle.padding;
	            this.docPadding = docStyle.padding;
	            bodyStyle.padding = "0";
	            docStyle.padding = "0";
	
	            this.bodyWidth = bodyStyle.width;
	            this.docWidth = docStyle.width;
	            bodyStyle.width = "100%";
	            docStyle.width = "100%";
	
	            this.bodyHeight = bodyStyle.height;
	            this.docHeight = docStyle.height;
	            bodyStyle.height = "100%";
	            docStyle.height = "100%";
	
	            //when entering full screen on the ipad it wasnt sufficient to leave
	            //the body intact as only only the top half of the screen would
	            //respond to touch events on the canvas, while the bottom half treated
	            //them as touch events on the document body.  Thus we remove and store
	            //the bodies elements and replace them when we leave full screen.
	            this.previousBody = [];
	            THIS[ this.hash ].prevElementParent = this.element.parentNode;
	            THIS[ this.hash ].prevNextSibling = this.element.nextSibling;
	            THIS[ this.hash ].prevElementWidth = this.element.style.width;
	            THIS[ this.hash ].prevElementHeight = this.element.style.height;
	            nodes = body.childNodes.length;
	            for ( i = 0; i < nodes; i++ ) {
	                this.previousBody.push( body.childNodes[ 0 ] );
	                body.removeChild( body.childNodes[ 0 ] );
	            }
	
	            //If we've got a toolbar, we need to enable the user to use css to
	            //preserve it in fullpage mode
	            if ( this.toolbar && this.toolbar.element ) {
	                //save a reference to the parent so we can put it back
	                //in the long run we need a better strategy
	                this.toolbar.parentNode = this.toolbar.element.parentNode;
	                this.toolbar.nextSibling = this.toolbar.element.nextSibling;
	                body.appendChild( this.toolbar.element );
	
	                //Make sure the user has some ability to style the toolbar based
	                //on the mode
	                $.addClass( this.toolbar.element, 'fullpage' );
	            }
	
	            $.addClass( this.element, 'fullpage' );
	            body.appendChild( this.element );
	
	            this.element.style.height = $.getWindowSize().y + 'px';
	            this.element.style.width = $.getWindowSize().x + 'px';
	
	            if ( this.toolbar && this.toolbar.element ) {
	                this.element.style.height = (
	                    $.getElementSize( this.element ).y - $.getElementSize( this.toolbar.element ).y
	                ) + 'px';
	            }
	
	            THIS[ this.hash ].fullPage = true;
	
	            // mouse will be inside container now
	            $.delegate( this, onContainerEnter )( {} );
	
	        } else {
	
	            this.element.style.margin = this.elementMargin;
	            this.element.style.padding = this.elementPadding;
	
	            bodyStyle.margin = this.bodyMargin;
	            docStyle.margin = this.docMargin;
	
	            bodyStyle.padding = this.bodyPadding;
	            docStyle.padding = this.docPadding;
	
	            bodyStyle.width = this.bodyWidth;
	            docStyle.width = this.docWidth;
	
	            bodyStyle.height = this.bodyHeight;
	            docStyle.height = this.docHeight;
	
	            body.removeChild( this.element );
	            nodes = this.previousBody.length;
	            for ( i = 0; i < nodes; i++ ) {
	                body.appendChild( this.previousBody.shift() );
	            }
	
	            $.removeClass( this.element, 'fullpage' );
	            THIS[ this.hash ].prevElementParent.insertBefore(
	                this.element,
	                THIS[ this.hash ].prevNextSibling
	            );
	
	            //If we've got a toolbar, we need to enable the user to use css to
	            //reset it to its original state
	            if ( this.toolbar && this.toolbar.element ) {
	                body.removeChild( this.toolbar.element );
	
	                //Make sure the user has some ability to style the toolbar based
	                //on the mode
	                $.removeClass( this.toolbar.element, 'fullpage' );
	
	                this.toolbar.parentNode.insertBefore(
	                    this.toolbar.element,
	                    this.toolbar.nextSibling
	                );
	                delete this.toolbar.parentNode;
	                delete this.toolbar.nextSibling;
	            }
	
	            this.element.style.width = THIS[ this.hash ].prevElementWidth;
	            this.element.style.height = THIS[ this.hash ].prevElementHeight;
	
	            // After exiting fullPage or fullScreen, it can take some time
	            // before the browser can actually set the scroll.
	            var restoreScrollCounter = 0;
	            var restoreScroll = function() {
	                $.setPageScroll( _this.pageScroll );
	                var pageScroll = $.getPageScroll();
	                restoreScrollCounter++;
	                if ( restoreScrollCounter < 10 &&
	                    pageScroll.x !== _this.pageScroll.x ||
	                    pageScroll.y !== _this.pageScroll.y ) {
	                    $.requestAnimationFrame( restoreScroll );
	                }
	            };
	            $.requestAnimationFrame( restoreScroll );
	
	            THIS[ this.hash ].fullPage = false;
	
	            // mouse will likely be outside now
	            $.delegate( this, onContainerExit )( { } );
	
	        }
	
	        if ( this.navigator && this.viewport ) {
	            this.navigator.update( this.viewport );
	        }
	
	        /**
	         * Raised when the viewer has changed to/from full-page mode (see {@link OpenSeadragon.Viewer#setFullPage}).
	         *
	         * @event full-page
	         * @memberof OpenSeadragon.Viewer
	         * @type {object}
	         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.
	         * @property {Boolean} fullPage - True if changed to full-page mode, false if exited full-page mode.
	         * @property {?Object} userData - Arbitrary subscriber-defined object.
	         */
	        this.raiseEvent( 'full-page', { fullPage: fullPage } );
	
	        return this;
	    },
	
	    /**
	     * Toggle full screen mode if supported. Toggle full page mode otherwise.
	     * @function
	     * @param {Boolean} fullScreen
	     *      If true, enter full screen mode.  If false, exit full screen mode.
	     * @return {OpenSeadragon.Viewer} Chainable.
	     * @fires OpenSeadragon.Viewer.event:pre-full-screen
	     * @fires OpenSeadragon.Viewer.event:full-screen
	     */
	    setFullScreen: function( fullScreen ) {
	        var _this = this;
	
	        if ( !$.supportsFullScreen ) {
	            return this.setFullPage( fullScreen );
	        }
	
	        if ( $.isFullScreen() === fullScreen ) {
	            return this;
	        }
	
	        var fullScreeEventArgs = {
	            fullScreen: fullScreen,
	            preventDefaultAction: false
	        };
	        /**
	         * Raised when the viewer is about to change to/from full-screen mode (see {@link OpenSeadragon.Viewer#setFullScreen}).
	         * Note: the pre-full-screen event is not raised when the user is exiting
	         * full-screen mode by pressing the Esc key. In that case, consider using
	         * the full-screen, pre-full-page or full-page events.
	         *
	         * @event pre-full-screen
	         * @memberof OpenSeadragon.Viewer
	         * @type {object}
	         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.
	         * @property {Boolean} fullScreen - True if entering full-screen mode, false if exiting full-screen mode.
	         * @property {Boolean} preventDefaultAction - Set to true to prevent full-screen mode change. Default: false.
	         * @property {?Object} userData - Arbitrary subscriber-defined object.
	         */
	        this.raiseEvent( 'pre-full-screen', fullScreeEventArgs );
	        if ( fullScreeEventArgs.preventDefaultAction ) {
	            return this;
	        }
	
	        if ( fullScreen ) {
	
	            this.setFullPage( true );
	            // If the full page mode is not actually entered, we need to prevent
	            // the full screen mode.
	            if ( !this.isFullPage() ) {
	                return this;
	            }
	
	            this.fullPageStyleWidth = this.element.style.width;
	            this.fullPageStyleHeight = this.element.style.height;
	            this.element.style.width = '100%';
	            this.element.style.height = '100%';
	
	            var onFullScreenChange = function() {
	                var isFullScreen = $.isFullScreen();
	                if ( !isFullScreen ) {
	                    $.removeEvent( document, $.fullScreenEventName, onFullScreenChange );
	                    $.removeEvent( document, $.fullScreenErrorEventName, onFullScreenChange );
	
	                    _this.setFullPage( false );
	                    if ( _this.isFullPage() ) {
	                        _this.element.style.width = _this.fullPageStyleWidth;
	                        _this.element.style.height = _this.fullPageStyleHeight;
	                    }
	                }
	                if ( _this.navigator && _this.viewport ) {
	                    _this.navigator.update( _this.viewport );
	                }
	                /**
	                 * Raised when the viewer has changed to/from full-screen mode (see {@link OpenSeadragon.Viewer#setFullScreen}).
	                 *
	                 * @event full-screen
	                 * @memberof OpenSeadragon.Viewer
	                 * @type {object}
	                 * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.
	                 * @property {Boolean} fullScreen - True if changed to full-screen mode, false if exited full-screen mode.
	                 * @property {?Object} userData - Arbitrary subscriber-defined object.
	                 */
	                _this.raiseEvent( 'full-screen', { fullScreen: isFullScreen } );
	            };
	            $.addEvent( document, $.fullScreenEventName, onFullScreenChange );
	            $.addEvent( document, $.fullScreenErrorEventName, onFullScreenChange );
	
	            $.requestFullScreen( document.body );
	
	        } else {
	            $.exitFullScreen();
	        }
	        return this;
	    },
	
	    /**
	     * @function
	     * @return {Boolean}
	     */
	    isVisible: function () {
	        return this.container.style.visibility != "hidden";
	    },
	
	
	    /**
	     * @function
	     * @param {Boolean} visible
	     * @return {OpenSeadragon.Viewer} Chainable.
	     * @fires OpenSeadragon.Viewer.event:visible
	     */
	    setVisible: function( visible ){
	        this.container.style.visibility = visible ? "" : "hidden";
	        /**
	         * Raised when the viewer is shown or hidden (see {@link OpenSeadragon.Viewer#setVisible}).
	         *
	         * @event visible
	         * @memberof OpenSeadragon.Viewer
	         * @type {object}
	         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.
	         * @property {Boolean} visible
	         * @property {?Object} userData - Arbitrary subscriber-defined object.
	         */
	        this.raiseEvent( 'visible', { visible: visible } );
	        return this;
	    },
	
	    /**
	     * Add a tiled image to the viewer.
	     * options.tileSource can be anything that {@link OpenSeadragon.Viewer#open}
	     *  supports except arrays of images.
	     * Note that you can specify options.width or options.height, but not both.
	     * The other dimension will be calculated according to the item's aspect ratio.
	     * If collectionMode is on (see {@link OpenSeadragon.Options}), the new image is
	     * automatically arranged with the others.
	     * @function
	     * @param {Object} options
	     * @param {String|Object|Function} options.tileSource - The TileSource specifier.
	     * A String implies a url used to determine the tileSource implementation
	     *      based on the file extension of url. JSONP is implied by *.js,
	     *      otherwise the url is retrieved as text and the resulting text is
	     *      introspected to determine if its json, xml, or text and parsed.
	     * An Object implies an inline configuration which has a single
	     *      property sufficient for being able to determine tileSource
	     *      implementation. If the object has a property which is a function
	     *      named 'getTileUrl', it is treated as a custom TileSource.
	     * @param {Number} [options.index] The index of the item. Added on top of
	     * all other items if not specified.
	     * @param {Boolean} [options.replace=false] If true, the item at options.index will be
	     * removed and the new item is added in its place. options.tileSource will be
	     * interpreted and fetched if necessary before the old item is removed to avoid leaving
	     * a gap in the world.
	     * @param {Number} [options.x=0] The X position for the image in viewport coordinates.
	     * @param {Number} [options.y=0] The Y position for the image in viewport coordinates.
	     * @param {Number} [options.width=1] The width for the image in viewport coordinates.
	     * @param {Number} [options.height] The height for the image in viewport coordinates.
	     * @param {OpenSeadragon.Rect} [options.fitBounds] The bounds in viewport coordinates
	     * to fit the image into. If specified, x, y, width and height get ignored.
	     * @param {OpenSeadragon.Placement} [options.fitBoundsPlacement=OpenSeadragon.Placement.CENTER]
	     * How to anchor the image in the bounds if options.fitBounds is set.
	     * @param {OpenSeadragon.Rect} [options.clip] - An area, in image pixels, to clip to
	     * (portions of the image outside of this area will not be visible). Only works on
	     * browsers that support the HTML5 canvas.
	     * @param {Number} [options.opacity] Opacity the tiled image should be drawn at by default.
	     * @param {String} [options.compositeOperation] How the image is composited onto other images.
	     * @param {Function} [options.success] A function that gets called when the image is
	     * successfully added. It's passed the event object which contains a single property:
	     * "item", the resulting TiledImage.
	     * @param {Function} [options.error] A function that gets called if the image is
	     * unable to be added. It's passed the error event object, which contains "message"
	     * and "source" properties.
	     * @param {Boolean} [options.collectionImmediately=false] If collectionMode is on,
	     * specifies whether to snap to the new arrangement immediately or to animate to it.
	     * @param {String|CanvasGradient|CanvasPattern|Function} [options.placeholderFillStyle] - See {@link OpenSeadragon.Options}.
	     * @fires OpenSeadragon.World.event:add-item
	     * @fires OpenSeadragon.Viewer.event:add-item-failed
	     */
	    addTiledImage: function( options ) {
	        $.console.assert(options, "[Viewer.addTiledImage] options is required");
	        $.console.assert(options.tileSource, "[Viewer.addTiledImage] options.tileSource is required");
	        $.console.assert(!options.replace || (options.index > -1 && options.index < this.world.getItemCount()),
	            "[Viewer.addTiledImage] if options.replace is used, options.index must be a valid index in Viewer.world");
	
	        var _this = this;
	
	        if (options.replace) {
	            options.replaceItem = _this.world.getItemAt(options.index);
	        }
	
	        this._hideMessage();
	
	        if (options.placeholderFillStyle === undefined) {
	            options.placeholderFillStyle = this.placeholderFillStyle;
	        }
	        if (options.opacity === undefined) {
	            options.opacity = this.opacity;
	        }
	        if (options.compositeOperation === undefined) {
	            options.compositeOperation = this.compositeOperation;
	        }
	
	        var myQueueItem = {
	            options: options
	        };
	
	        function raiseAddItemFailed( event ) {
	            for (var i = 0; i < _this._loadQueue.length; i++) {
	                if (_this._loadQueue[i] === myQueueItem) {
	                    _this._loadQueue.splice(i, 1);
	                    break;
	                }
	            }
	
	            if (_this._loadQueue.length === 0) {
	                refreshWorld(myQueueItem);
	            }
	
	             /**
	             * Raised when an error occurs while adding a item.
	             * @event add-item-failed
	             * @memberOf OpenSeadragon.Viewer
	             * @type {object}
	             * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.
	             * @property {String} message
	             * @property {String} source
	             * @property {Object} options The options passed to the addTiledImage method.
	             * @property {?Object} userData - Arbitrary subscriber-defined object.
	             */
	            _this.raiseEvent( 'add-item-failed', event );
	
	            if (options.error) {
	                options.error(event);
	            }
	        }
	
	        function refreshWorld(theItem) {
	            if (_this.collectionMode) {
	                _this.world.arrange({
	                    immediately: theItem.options.collectionImmediately,
	                    rows: _this.collectionRows,
	                    columns: _this.collectionColumns,
	                    layout: _this.collectionLayout,
	                    tileSize: _this.collectionTileSize,
	                    tileMargin: _this.collectionTileMargin
	                });
	                _this.world.setAutoRefigureSizes(true);
	            }
	        }
	
	        if ($.isArray(options.tileSource)) {
	            setTimeout(function() {
	                raiseAddItemFailed({
	                    message: "[Viewer.addTiledImage] Sequences can not be added; add them one at a time instead.",
	                    source: options.tileSource,
	                    options: options
	                });
	            });
	            return;
	        }
	
	        this._loadQueue.push(myQueueItem);
	
	        getTileSourceImplementation( this, options.tileSource, function( tileSource ) {
	
	            myQueueItem.tileSource = tileSource;
	
	            // add everybody at the front of the queue that's ready to go
	            var queueItem, tiledImage, optionsClone;
	            while (_this._loadQueue.length) {
	                queueItem = _this._loadQueue[0];
	                if (!queueItem.tileSource) {
	                    break;
	                }
	
	                _this._loadQueue.splice(0, 1);
	
	                if (queueItem.options.replace) {
	                    var newIndex = _this.world.getIndexOfItem(queueItem.options.replaceItem);
	                    if (newIndex != -1) {
	                        queueItem.options.index = newIndex;
	                    }
	                    _this.world.removeItem(queueItem.options.replaceItem);
	                }
	
	                tiledImage = new $.TiledImage({
	                    viewer: _this,
	                    source: queueItem.tileSource,
	                    viewport: _this.viewport,
	                    drawer: _this.drawer,
	                    tileCache: _this.tileCache,
	                    imageLoader: _this.imageLoader,
	                    x: queueItem.options.x,
	                    y: queueItem.options.y,
	                    width: queueItem.options.width,
	                    height: queueItem.options.height,
	                    fitBounds: queueItem.options.fitBounds,
	                    fitBoundsPlacement: queueItem.options.fitBoundsPlacement,
	                    clip: queueItem.options.clip,
	                    placeholderFillStyle: queueItem.options.placeholderFillStyle,
	                    opacity: queueItem.options.opacity,
	                    compositeOperation: queueItem.options.compositeOperation,
	                    springStiffness: _this.springStiffness,
	                    animationTime: _this.animationTime,
	                    minZoomImageRatio: _this.minZoomImageRatio,
	                    wrapHorizontal: _this.wrapHorizontal,
	                    wrapVertical: _this.wrapVertical,
	                    immediateRender: _this.immediateRender,
	                    blendTime: _this.blendTime,
	                    alwaysBlend: _this.alwaysBlend,
	                    minPixelRatio: _this.minPixelRatio,
	                    smoothTileEdgesMinZoom: _this.smoothTileEdgesMinZoom,
	                    iOSDevice: _this.iOSDevice,
	                    crossOriginPolicy: _this.crossOriginPolicy,
	                    debugMode: _this.debugMode
	                });
	
	                if (_this.collectionMode) {
	                    _this.world.setAutoRefigureSizes(false);
	                }
	                _this.world.addItem( tiledImage, {
	                    index: queueItem.options.index
	                });
	
	                if (_this._loadQueue.length === 0) {
	                    //this restores the autoRefigureSizes flag to true.
	                    refreshWorld(queueItem);
	                }
	
	                if (_this.world.getItemCount() === 1 && !_this.preserveViewport) {
	                    _this.viewport.goHome(true);
	                }
	
	                if (_this.navigator) {
	                    optionsClone = $.extend({}, queueItem.options, {
	                        replace: false, // navigator already removed the layer, nothing to replace
	                        originalTiledImage: tiledImage,
	                        tileSource: queueItem.tileSource
	                    });
	
	                    _this.navigator.addTiledImage(optionsClone);
	                }
	
	                if (queueItem.options.success) {
	                    queueItem.options.success({
	                        item: tiledImage
	                    });
	                }
	            }
	        }, function( event ) {
	            event.options = options;
	            raiseAddItemFailed(event);
	        } );
	    },
	
	    /**
	     * Add a simple image to the viewer.
	     * The options are the same as the ones in {@link OpenSeadragon.Viewer#addTiledImage}
	     * except for options.tileSource which is replaced by options.url.
	     * @function
	     * @param {Object} options - See {@link OpenSeadragon.Viewer#addTiledImage}
	     * for all the options
	     * @param {String} options.url - The URL of the image to add.
	     * @fires OpenSeadragon.World.event:add-item
	     * @fires OpenSeadragon.Viewer.event:add-item-failed
	     */
	    addSimpleImage: function(options) {
	        $.console.assert(options, "[Viewer.addSimpleImage] options is required");
	        $.console.assert(options.url, "[Viewer.addSimpleImage] options.url is required");
	
	        var opts = $.extend({}, options, {
	            tileSource: {
	                type: 'image',
	                url:  options.url
	            }
	        });
	        delete opts.url;
	        this.addTiledImage(opts);
	    },
	
	    // deprecated
	    addLayer: function( options ) {
	        var _this = this;
	
	        $.console.error( "[Viewer.addLayer] this function is deprecated; use Viewer.addTiledImage() instead." );
	
	        var optionsClone = $.extend({}, options, {
	            success: function(event) {
	                _this.raiseEvent("add-layer", {
	                    options: options,
	                    drawer: event.item
	                });
	            },
	            error: function(event) {
	                _this.raiseEvent("add-layer-failed", event);
	            }
	        });
	
	        this.addTiledImage(optionsClone);
	        return this;
	    },
	
	    // deprecated
	    getLayerAtLevel: function( level ) {
	        $.console.error( "[Viewer.getLayerAtLevel] this function is deprecated; use World.getItemAt() instead." );
	        return this.world.getItemAt(level);
	    },
	
	    // deprecated
	    getLevelOfLayer: function( drawer ) {
	        $.console.error( "[Viewer.getLevelOfLayer] this function is deprecated; use World.getIndexOfItem() instead." );
	        return this.world.getIndexOfItem(drawer);
	    },
	
	    // deprecated
	    getLayersCount: function() {
	        $.console.error( "[Viewer.getLayersCount] this function is deprecated; use World.getItemCount() instead." );
	        return this.world.getItemCount();
	    },
	
	    // deprecated
	    setLayerLevel: function( drawer, level ) {
	        $.console.error( "[Viewer.setLayerLevel] this function is deprecated; use World.setItemIndex() instead." );
	        return this.world.setItemIndex(drawer, level);
	    },
	
	    // deprecated
	    removeLayer: function( drawer ) {
	        $.console.error( "[Viewer.removeLayer] this function is deprecated; use World.removeItem() instead." );
	        return this.world.removeItem(drawer);
	    },
	
	    /**
	     * Force the viewer to redraw its contents.
	     * @returns {OpenSeadragon.Viewer} Chainable.
	     */
	    forceRedraw: function() {
	        THIS[ this.hash ].forceRedraw = true;
	        return this;
	    },
	
	    /**
	     * @function
	     * @return {OpenSeadragon.Viewer} Chainable.
	     */
	    bindSequenceControls: function(){
	
	        //////////////////////////////////////////////////////////////////////////
	        // Image Sequence Controls
	        //////////////////////////////////////////////////////////////////////////
	        var onFocusHandler          = $.delegate( this, onFocus ),
	            onBlurHandler           = $.delegate( this, onBlur ),
	            onNextHandler           = $.delegate( this, onNext ),
	            onPreviousHandler       = $.delegate( this, onPrevious ),
	            navImages               = this.navImages,
	            useGroup                = true ;
	
	        if( this.showSequenceControl ){
	
	            if( this.previousButton || this.nextButton ){
	                //if we are binding to custom buttons then layout and
	                //grouping is the responsibility of the page author
	                useGroup = false;
	            }
	
	            this.previousButton = new $.Button({
	                element:    this.previousButton ? $.getElement( this.previousButton ) : null,
	                clickTimeThreshold: this.clickTimeThreshold,
	                clickDistThreshold: this.clickDistThreshold,
	                tooltip:    $.getString( "Tooltips.PreviousPage" ),
	                srcRest:    resolveUrl( this.prefixUrl, navImages.previous.REST ),
	                srcGroup:   resolveUrl( this.prefixUrl, navImages.previous.GROUP ),
	                srcHover:   resolveUrl( this.prefixUrl, navImages.previous.HOVER ),
	                srcDown:    resolveUrl( this.prefixUrl, navImages.previous.DOWN ),
	                onRelease:  onPreviousHandler,
	                onFocus:    onFocusHandler,
	                onBlur:     onBlurHandler
	            });
	
	            this.nextButton = new $.Button({
	                element:    this.nextButton ? $.getElement( this.nextButton ) : null,
	                clickTimeThreshold: this.clickTimeThreshold,
	                clickDistThreshold: this.clickDistThreshold,
	                tooltip:    $.getString( "Tooltips.NextPage" ),
	                srcRest:    resolveUrl( this.prefixUrl, navImages.next.REST ),
	                srcGroup:   resolveUrl( this.prefixUrl, navImages.next.GROUP ),
	                srcHover:   resolveUrl( this.prefixUrl, navImages.next.HOVER ),
	                srcDown:    resolveUrl( this.prefixUrl, navImages.next.DOWN ),
	                onRelease:  onNextHandler,
	                onFocus:    onFocusHandler,
	                onBlur:     onBlurHandler
	            });
	
	            if( !this.navPrevNextWrap ){
	                this.previousButton.disable();
	            }
	
	            if (!this.tileSources || !this.tileSources.length) {
	                this.nextButton.disable();
	            }
	
	            if( useGroup ){
	                this.paging = new $.ButtonGroup({
	                    buttons: [
	                        this.previousButton,
	                        this.nextButton
	                    ],
	                    clickTimeThreshold: this.clickTimeThreshold,
	                    clickDistThreshold: this.clickDistThreshold
	                });
	
	                this.pagingControl = this.paging.element;
	
	                if( this.toolbar ){
	                    this.toolbar.addControl(
	                        this.pagingControl,
	                        {anchor: $.ControlAnchor.BOTTOM_RIGHT}
	                    );
	                }else{
	                    this.addControl(
	                        this.pagingControl,
	                        {anchor: this.sequenceControlAnchor || $.ControlAnchor.TOP_LEFT}
	                    );
	                }
	            }
	        }
	        return this;
	    },
	
	
	    /**
	     * @function
	     * @return {OpenSeadragon.Viewer} Chainable.
	     */
	    bindStandardControls: function(){
	        //////////////////////////////////////////////////////////////////////////
	        // Navigation Controls
	        //////////////////////////////////////////////////////////////////////////
	        var beginZoomingInHandler   = $.delegate( this, beginZoomingIn ),
	            endZoomingHandler       = $.delegate( this, endZooming ),
	            doSingleZoomInHandler   = $.delegate( this, doSingleZoomIn ),
	            beginZoomingOutHandler  = $.delegate( this, beginZoomingOut ),
	            doSingleZoomOutHandler  = $.delegate( this, doSingleZoomOut ),
	            onHomeHandler           = $.delegate( this, onHome ),
	            onFullScreenHandler     = $.delegate( this, onFullScreen ),
	            onRotateLeftHandler     = $.delegate( this, onRotateLeft ),
	            onRotateRightHandler    = $.delegate( this, onRotateRight ),
	            onFocusHandler          = $.delegate( this, onFocus ),
	            onBlurHandler           = $.delegate( this, onBlur ),
	            navImages               = this.navImages,
	            buttons                 = [],
	            useGroup                = true ;
	
	
	        if ( this.showNavigationControl ) {
	
	            if( this.zoomInButton || this.zoomOutButton ||
	                this.homeButton || this.fullPageButton ||
	                this.rotateLeftButton || this.rotateRightButton ) {
	                //if we are binding to custom buttons then layout and
	                //grouping is the responsibility of the page author
	                useGroup = false;
	            }
	
	            if ( this.showZoomControl ) {
	                buttons.push( this.zoomInButton = new $.Button({
	                    element:    this.zoomInButton ? $.getElement( this.zoomInButton ) : null,
	                    clickTimeThreshold: this.clickTimeThreshold,
	                    clickDistThreshold: this.clickDistThreshold,
	                    tooltip:    $.getString( "Tooltips.ZoomIn" ),
	                    srcRest:    resolveUrl( this.prefixUrl, navImages.zoomIn.REST ),
	                    srcGroup:   resolveUrl( this.prefixUrl, navImages.zoomIn.GROUP ),
	                    srcHover:   resolveUrl( this.prefixUrl, navImages.zoomIn.HOVER ),
	                    srcDown:    resolveUrl( this.prefixUrl, navImages.zoomIn.DOWN ),
	                    onPress:    beginZoomingInHandler,
	                    onRelease:  endZoomingHandler,
	                    onClick:    doSingleZoomInHandler,
	                    onEnter:    beginZoomingInHandler,
	                    onExit:     endZoomingHandler,
	                    onFocus:    onFocusHandler,
	                    onBlur:     onBlurHandler
	                }));
	
	                buttons.push( this.zoomOutButton = new $.Button({
	                    element:    this.zoomOutButton ? $.getElement( this.zoomOutButton ) : null,
	                    clickTimeThreshold: this.clickTimeThreshold,
	                    clickDistThreshold: this.clickDistThreshold,
	                    tooltip:    $.getString( "Tooltips.ZoomOut" ),
	                    srcRest:    resolveUrl( this.prefixUrl, navImages.zoomOut.REST ),
	                    srcGroup:   resolveUrl( this.prefixUrl, navImages.zoomOut.GROUP ),
	                    srcHover:   resolveUrl( this.prefixUrl, navImages.zoomOut.HOVER ),
	                    srcDown:    resolveUrl( this.prefixUrl, navImages.zoomOut.DOWN ),
	                    onPress:    beginZoomingOutHandler,
	                    onRelease:  endZoomingHandler,
	                    onClick:    doSingleZoomOutHandler,
	                    onEnter:    beginZoomingOutHandler,
	                    onExit:     endZoomingHandler,
	                    onFocus:    onFocusHandler,
	                    onBlur:     onBlurHandler
	                }));
	            }
	
	            if ( this.showHomeControl ) {
	                buttons.push( this.homeButton = new $.Button({
	                    element:    this.homeButton ? $.getElement( this.homeButton ) : null,
	                    clickTimeThreshold: this.clickTimeThreshold,
	                    clickDistThreshold: this.clickDistThreshold,
	                    tooltip:    $.getString( "Tooltips.Home" ),
	                    srcRest:    resolveUrl( this.prefixUrl, navImages.home.REST ),
	                    srcGroup:   resolveUrl( this.prefixUrl, navImages.home.GROUP ),
	                    srcHover:   resolveUrl( this.prefixUrl, navImages.home.HOVER ),
	                    srcDown:    resolveUrl( this.prefixUrl, navImages.home.DOWN ),
	                    onRelease:  onHomeHandler,
	                    onFocus:    onFocusHandler,
	                    onBlur:     onBlurHandler
	                }));
	            }
	
	            if ( this.showFullPageControl ) {
	                buttons.push( this.fullPageButton = new $.Button({
	                    element:    this.fullPageButton ? $.getElement( this.fullPageButton ) : null,
	                    clickTimeThreshold: this.clickTimeThreshold,
	                    clickDistThreshold: this.clickDistThreshold,
	                    tooltip:    $.getString( "Tooltips.FullPage" ),
	                    srcRest:    resolveUrl( this.prefixUrl, navImages.fullpage.REST ),
	                    srcGroup:   resolveUrl( this.prefixUrl, navImages.fullpage.GROUP ),
	                    srcHover:   resolveUrl( this.prefixUrl, navImages.fullpage.HOVER ),
	                    srcDown:    resolveUrl( this.prefixUrl, navImages.fullpage.DOWN ),
	                    onRelease:  onFullScreenHandler,
	                    onFocus:    onFocusHandler,
	                    onBlur:     onBlurHandler
	                }));
	            }
	
	            if ( this.showRotationControl ) {
	                buttons.push( this.rotateLeftButton = new $.Button({
	                    element:    this.rotateLeftButton ? $.getElement( this.rotateLeftButton ) : null,
	                    clickTimeThreshold: this.clickTimeThreshold,
	                    clickDistThreshold: this.clickDistThreshold,
	                    tooltip:    $.getString( "Tooltips.RotateLeft" ),
	                    srcRest:    resolveUrl( this.prefixUrl, navImages.rotateleft.REST ),
	                    srcGroup:   resolveUrl( this.prefixUrl, navImages.rotateleft.GROUP ),
	                    srcHover:   resolveUrl( this.prefixUrl, navImages.rotateleft.HOVER ),
	                    srcDown:    resolveUrl( this.prefixUrl, navImages.rotateleft.DOWN ),
	                    onRelease:  onRotateLeftHandler,
	                    onFocus:    onFocusHandler,
	                    onBlur:     onBlurHandler
	                }));
	
	                buttons.push( this.rotateRightButton = new $.Button({
	                    element:    this.rotateRightButton ? $.getElement( this.rotateRightButton ) : null,
	                    clickTimeThreshold: this.clickTimeThreshold,
	                    clickDistThreshold: this.clickDistThreshold,
	                    tooltip:    $.getString( "Tooltips.RotateRight" ),
	                    srcRest:    resolveUrl( this.prefixUrl, navImages.rotateright.REST ),
	                    srcGroup:   resolveUrl( this.prefixUrl, navImages.rotateright.GROUP ),
	                    srcHover:   resolveUrl( this.prefixUrl, navImages.rotateright.HOVER ),
	                    srcDown:    resolveUrl( this.prefixUrl, navImages.rotateright.DOWN ),
	                    onRelease:  onRotateRightHandler,
	                    onFocus:    onFocusHandler,
	                    onBlur:     onBlurHandler
	                }));
	
	            }
	
	            if ( useGroup ) {
	                this.buttons = new $.ButtonGroup({
	                    buttons:            buttons,
	                    clickTimeThreshold: this.clickTimeThreshold,
	                    clickDistThreshold: this.clickDistThreshold
	                });
	
	                this.navControl  = this.buttons.element;
	                this.addHandler( 'open', $.delegate( this, lightUp ) );
	
	                if( this.toolbar ){
	                    this.toolbar.addControl(
	                        this.navControl,
	                        {anchor: $.ControlAnchor.TOP_LEFT}
	                    );
	                } else {
	                    this.addControl(
	                        this.navControl,
	                        {anchor: this.navigationControlAnchor || $.ControlAnchor.TOP_LEFT}
	                    );
	                }
	            }
	
	        }
	        return this;
	    },
	
	    /**
	     * Gets the active page of a sequence
	     * @function
	     * @return {Number}
	     */
	    currentPage: function() {
	        return this._sequenceIndex;
	    },
	
	    /**
	     * @function
	     * @return {OpenSeadragon.Viewer} Chainable.
	     * @fires OpenSeadragon.Viewer.event:page
	     */
	    goToPage: function( page ){
	        if( this.tileSources && page >= 0 && page < this.tileSources.length ){
	            /**
	             * Raised when the page is changed on a viewer configured with multiple image sources (see {@link OpenSeadragon.Viewer#goToPage}).
	             *
	             * @event page
	             * @memberof OpenSeadragon.Viewer
	             * @type {Object}
	             * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.
	             * @property {Number} page - The page index.
	             * @property {?Object} userData - Arbitrary subscriber-defined object.
	             */
	            this.raiseEvent( 'page', { page: page } );
	
	            this._sequenceIndex = page;
	
	            this._updateSequenceButtons( page );
	
	            this.open( this.tileSources[ page ] );
	
	            if( this.referenceStrip ){
	                this.referenceStrip.setFocus( page );
	            }
	        }
	
	        return this;
	    },
	
	   /**
	     * Adds an html element as an overlay to the current viewport.  Useful for
	     * highlighting words or areas of interest on an image or other zoomable
	     * interface. The overlays added via this method are removed when the viewport
	     * is closed which include when changing page.
	     * @method
	     * @param {Element|String|Object} element - A reference to an element or an id for
	     *      the element which will be overlayed. Or an Object specifying the configuration for the overlay.
	     *      If using an object, see {@link OpenSeadragon.Overlay} for a list of
	     *      all available options.
	     * @param {OpenSeadragon.Point|OpenSeadragon.Rect} location - The point or
	     *      rectangle which will be overlayed. This is a viewport relative location.
	     * @param {OpenSeadragon.Placement} placement - The position of the
	     *      viewport which the location coordinates will be treated as relative
	     *      to.
	     * @param {function} onDraw - If supplied the callback is called when the overlay
	     *      needs to be drawn. It it the responsibility of the callback to do any drawing/positioning.
	     *      It is passed position, size and element.
	     * @return {OpenSeadragon.Viewer} Chainable.
	     * @fires OpenSeadragon.Viewer.event:add-overlay
	     */
	    addOverlay: function( element, location, placement, onDraw ) {
	        var options;
	        if( $.isPlainObject( element ) ){
	            options = element;
	        } else {
	            options = {
	                element: element,
	                location: location,
	                placement: placement,
	                onDraw: onDraw
	            };
	        }
	
	        element = $.getElement( options.element );
	
	        if ( getOverlayIndex( this.currentOverlays, element ) >= 0 ) {
	            // they're trying to add a duplicate overlay
	            return this;
	        }
	
	        var overlay = getOverlayObject( this, options);
	        this.currentOverlays.push(overlay);
	        overlay.drawHTML( this.overlaysContainer, this.viewport );
	
	        /**
	         * Raised when an overlay is added to the viewer (see {@link OpenSeadragon.Viewer#addOverlay}).
	         *
	         * @event add-overlay
	         * @memberof OpenSeadragon.Viewer
	         * @type {object}
	         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.
	         * @property {Element} element - The overlay element.
	         * @property {OpenSeadragon.Point|OpenSeadragon.Rect} location
	         * @property {OpenSeadragon.Placement} placement
	         * @property {?Object} userData - Arbitrary subscriber-defined object.
	         */
	        this.raiseEvent( 'add-overlay', {
	            element: element,
	            location: options.location,
	            placement: options.placement
	        });
	        return this;
	    },
	
	    /**
	     * Updates the overlay represented by the reference to the element or
	     * element id moving it to the new location, relative to the new placement.
	     * @method
	     * @param {Element|String} element - A reference to an element or an id for
	     *      the element which is overlayed.
	     * @param {OpenSeadragon.Point|OpenSeadragon.Rect} location - The point or
	     *      rectangle which will be overlayed. This is a viewport relative location.
	     * @param {OpenSeadragon.Placement} placement - The position of the
	     *      viewport which the location coordinates will be treated as relative
	     *      to.
	     * @return {OpenSeadragon.Viewer} Chainable.
	     * @fires OpenSeadragon.Viewer.event:update-overlay
	     */
	    updateOverlay: function( element, location, placement ) {
	        var i;
	
	        element = $.getElement( element );
	        i = getOverlayIndex( this.currentOverlays, element );
	
	        if ( i >= 0 ) {
	            this.currentOverlays[ i ].update( location, placement );
	            THIS[ this.hash ].forceRedraw = true;
	            /**
	             * Raised when an overlay's location or placement changes
	             * (see {@link OpenSeadragon.Viewer#updateOverlay}).
	             *
	             * @event update-overlay
	             * @memberof OpenSeadragon.Viewer
	             * @type {object}
	             * @property {OpenSeadragon.Viewer} eventSource - A reference to the
	             * Viewer which raised the event.
	             * @property {Element} element
	             * @property {OpenSeadragon.Point|OpenSeadragon.Rect} location
	             * @property {OpenSeadragon.Placement} placement
	             * @property {?Object} userData - Arbitrary subscriber-defined object.
	             */
	            this.raiseEvent( 'update-overlay', {
	                element: element,
	                location: location,
	                placement: placement
	            });
	        }
	        return this;
	    },
	
	    /**
	     * Removes an overlay identified by the reference element or element id
	     * and schedules an update.
	     * @method
	     * @param {Element|String} element - A reference to the element or an
	     *      element id which represent the ovelay content to be removed.
	     * @return {OpenSeadragon.Viewer} Chainable.
	     * @fires OpenSeadragon.Viewer.event:remove-overlay
	     */
	    removeOverlay: function( element ) {
	        var i;
	
	        element = $.getElement( element );
	        i = getOverlayIndex( this.currentOverlays, element );
	
	        if ( i >= 0 ) {
	            this.currentOverlays[ i ].destroy();
	            this.currentOverlays.splice( i, 1 );
	            THIS[ this.hash ].forceRedraw = true;
	            /**
	             * Raised when an overlay is removed from the viewer
	             * (see {@link OpenSeadragon.Viewer#removeOverlay}).
	             *
	             * @event remove-overlay
	             * @memberof OpenSeadragon.Viewer
	             * @type {object}
	             * @property {OpenSeadragon.Viewer} eventSource - A reference to the
	             * Viewer which raised the event.
	             * @property {Element} element - The overlay element.
	             * @property {?Object} userData - Arbitrary subscriber-defined object.
	             */
	            this.raiseEvent( 'remove-overlay', {
	                element: element
	            });
	        }
	        return this;
	    },
	
	    /**
	     * Removes all currently configured Overlays from this Viewer and schedules
	     * an update.
	     * @method
	     * @return {OpenSeadragon.Viewer} Chainable.
	     * @fires OpenSeadragon.Viewer.event:clear-overlay
	     */
	    clearOverlays: function() {
	        while ( this.currentOverlays.length > 0 ) {
	            this.currentOverlays.pop().destroy();
	        }
	        THIS[ this.hash ].forceRedraw = true;
	        /**
	         * Raised when all overlays are removed from the viewer (see {@link OpenSeadragon.Drawer#clearOverlays}).
	         *
	         * @event clear-overlay
	         * @memberof OpenSeadragon.Viewer
	         * @type {object}
	         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.
	         * @property {?Object} userData - Arbitrary subscriber-defined object.
	         */
	        this.raiseEvent( 'clear-overlay', {} );
	        return this;
	    },
	
	     /**
	     * Finds an overlay identified by the reference element or element id
	     * and returns it as an object, return null if not found.
	     * @method
	     * @param {Element|String} element - A reference to the element or an
	     *      element id which represents the overlay content.
	     * @return {OpenSeadragon.Overlay} the matching overlay or null if none found.
	     */
	    getOverlayById: function( element ) {
	        var i;
	
	        element = $.getElement( element );
	        i = getOverlayIndex( this.currentOverlays, element );
	
	        if (i>=0) {
	            return this.currentOverlays[i];
	        } else {
	            return null;
	        }
	    },
	
	    /**
	     * Updates the sequence buttons.
	     * @function OpenSeadragon.Viewer.prototype._updateSequenceButtons
	     * @private
	     * @param {Number} Sequence Value
	     */
	    _updateSequenceButtons: function( page ) {
	
	            if ( this.nextButton ) {
	                if(!this.tileSources || this.tileSources.length - 1 === page) {
	                    //Disable next button
	                    if ( !this.navPrevNextWrap ) {
	                        this.nextButton.disable();
	                    }
	                } else {
	                    this.nextButton.enable();
	                }
	            }
	            if ( this.previousButton ) {
	                if ( page > 0 ) {
	                    //Enable previous button
	                    this.previousButton.enable();
	                } else {
	                    if ( !this.navPrevNextWrap ) {
	                        this.previousButton.disable();
	                    }
	                }
	            }
	      },
	
	    /**
	     * Display a message in the viewport
	     * @function OpenSeadragon.Viewer.prototype._showMessage
	     * @private
	     * @param {String} text message
	     */
	    _showMessage: function ( message ) {
	        this._hideMessage();
	
	        var div = $.makeNeutralElement( "div" );
	        div.appendChild( document.createTextNode( message ) );
	
	        this.messageDiv = $.makeCenteredNode( div );
	
	        $.addClass(this.messageDiv, "openseadragon-message");
	
	        this.container.appendChild( this.messageDiv );
	    },
	
	    /**
	     * Hide any currently displayed viewport message
	     * @function OpenSeadragon.Viewer.prototype._hideMessage
	     * @private
	     */
	    _hideMessage: function () {
	        var div = this.messageDiv;
	        if (div) {
	            div.parentNode.removeChild(div);
	            delete this.messageDiv;
	        }
	    },
	
	    /**
	     * Gets this viewer's gesture settings for the given pointer device type.
	     * @method
	     * @param {String} type - The pointer device type to get the gesture settings for ("mouse", "touch", "pen", etc.).
	     * @return {OpenSeadragon.GestureSettings}
	     */
	    gestureSettingsByDeviceType: function ( type ) {
	        switch ( type ) {
	            case 'mouse':
	                return this.gestureSettingsMouse;
	            case 'touch':
	                return this.gestureSettingsTouch;
	            case 'pen':
	                return this.gestureSettingsPen;
	            default:
	                return this.gestureSettingsUnknown;
	        }
	    },
	
	    // private
	    _drawOverlays: function() {
	        var i,
	            length = this.currentOverlays.length;
	        for ( i = 0; i < length; i++ ) {
	            this.currentOverlays[ i ].drawHTML( this.overlaysContainer, this.viewport );
	        }
	    },
	
	    /**
	     * Cancel the "in flight" images.
	     */
	    _cancelPendingImages: function() {
	        this._loadQueue = [];
	    }
	});
	
	
	/**
	 * _getSafeElemSize is like getElementSize(), but refuses to return 0 for x or y,
	 * which was causing some calling operations to return NaN.
	 * @returns {Point}
	 * @private
	 */
	function _getSafeElemSize (oElement) {
	    oElement = $.getElement( oElement );
	
	    return new $.Point(
	        (oElement.clientWidth === 0 ? 1 : oElement.clientWidth),
	        (oElement.clientHeight === 0 ? 1 : oElement.clientHeight)
	    );
	}
	
	/**
	 * @function
	 * @private
	 */
	function getTileSourceImplementation( viewer, tileSource, successCallback,
	    failCallback ) {
	    var _this = viewer;
	
	    //allow plain xml strings or json strings to be parsed here
	    if ( $.type( tileSource ) == 'string' ) {
	        if ( tileSource.match( /\s*<.*/ ) ) {
	            tileSource = $.parseXml( tileSource );
	        } else if ( tileSource.match( /\s*[\{\[].*/ ) ) {
	            tileSource = $.parseJSON(tileSource);
	        }
	    }
	
	    function waitUntilReady(tileSource, originalTileSource) {
	        if (tileSource.ready) {
	            successCallback(tileSource);
	        } else {
	            tileSource.addHandler('ready', function () {
	                successCallback(tileSource);
	            });
	            tileSource.addHandler('open-failed', function (event) {
	                failCallback({
	                    message: event.message,
	                    source: originalTileSource
	                });
	            });
	        }
	    }
	
	    setTimeout( function() {
	        if ( $.type( tileSource ) == 'string' ) {
	            //If its still a string it means it must be a url at this point
	            tileSource = new $.TileSource({
	                url: tileSource,
	                crossOriginPolicy: viewer.crossOriginPolicy,
	                ajaxWithCredentials: viewer.ajaxWithCredentials,
	                useCanvas: viewer.useCanvas,
	                success: function( event ) {
	                    successCallback( event.tileSource );
	                }
	            });
	            tileSource.addHandler( 'open-failed', function( event ) {
	                failCallback( event );
	            } );
	
	        } else if ($.isPlainObject(tileSource) || tileSource.nodeType) {
	            if (!tileSource.crossOriginPolicy && viewer.crossOriginPolicy) {
	                tileSource.crossOriginPolicy = viewer.crossOriginPolicy;
	            }
	            if (tileSource.ajaxWithCredentials === undefined) {
	                tileSource.ajaxWithCredentials = viewer.ajaxWithCredentials;
	            }
	            if (tileSource.useCanvas === undefined) {
	                tileSource.useCanvas = viewer.useCanvas;
	            }
	
	            if ( $.isFunction( tileSource.getTileUrl ) ) {
	                //Custom tile source
	                var customTileSource = new $.TileSource( tileSource );
	                customTileSource.getTileUrl = tileSource.getTileUrl;
	                successCallback( customTileSource );
	            } else {
	                //inline configuration
	                var $TileSource = $.TileSource.determineType( _this, tileSource );
	                if ( !$TileSource ) {
	                    failCallback( {
	                        message: "Unable to load TileSource",
	                        source: tileSource
	                    });
	                    return;
	                }
	                var options = $TileSource.prototype.configure.apply( _this, [ tileSource ] );
	                waitUntilReady(new $TileSource(options), tileSource);
	            }
	        } else {
	            //can assume it's already a tile source implementation
	            waitUntilReady(tileSource, tileSource);
	        }
	    });
	}
	
	function getOverlayObject( viewer, overlay ) {
	    if ( overlay instanceof $.Overlay ) {
	        return overlay;
	    }
	
	    var element = null;
	    if ( overlay.element ) {
	        element = $.getElement( overlay.element );
	    } else {
	        var id = overlay.id ?
	            overlay.id :
	            "openseadragon-overlay-" + Math.floor( Math.random() * 10000000 );
	
	        element = $.getElement( overlay.id );
	        if ( !element ) {
	            element         = document.createElement( "a" );
	            element.href    = "#/overlay/" + id;
	        }
	        element.id = id;
	        $.addClass( element, overlay.className ?
	            overlay.className :
	            "openseadragon-overlay"
	        );
	    }
	
	    var location = overlay.location;
	    var width = overlay.width;
	    var height = overlay.height;
	    if (!location) {
	        var x = overlay.x;
	        var y = overlay.y;
	        if (overlay.px !== undefined) {
	            var rect = viewer.viewport.imageToViewportRectangle(new $.Rect(
	                overlay.px,
	                overlay.py,
	                width || 0,
	                height || 0));
	            x = rect.x;
	            y = rect.y;
	            width = width !== undefined ? rect.width : undefined;
	            height = height !== undefined ? rect.height : undefined;
	        }
	        location = new $.Point(x, y);
	    }
	
	    var placement = overlay.placement;
	    if (placement && $.type(placement) === "string") {
	        placement = $.Placement[overlay.placement.toUpperCase()];
	    }
	
	    return new $.Overlay({
	        element: element,
	        location: location,
	        placement: placement,
	        onDraw: overlay.onDraw,
	        checkResize: overlay.checkResize,
	        width: width,
	        height: height,
	        rotationMode: overlay.rotationMode
	    });
	}
	
	/**
	 * @private
	 * @inner
	 * Determines the index of the given overlay in the given overlays array.
	 */
	function getOverlayIndex( overlays, element ) {
	    var i;
	    for ( i = overlays.length - 1; i >= 0; i-- ) {
	        if ( overlays[ i ].element === element ) {
	            return i;
	        }
	    }
	
	    return -1;
	}
	
	///////////////////////////////////////////////////////////////////////////////
	// Schedulers provide the general engine for animation
	///////////////////////////////////////////////////////////////////////////////
	function scheduleUpdate( viewer, updateFunc ){
	    return $.requestAnimationFrame( function(){
	        updateFunc( viewer );
	    } );
	}
	
	
	//provides a sequence in the fade animation
	function scheduleControlsFade( viewer ) {
	    $.requestAnimationFrame( function(){
	        updateControlsFade( viewer );
	    });
	}
	
	
	//initiates an animation to hide the controls
	function beginControlsAutoHide( viewer ) {
	    if ( !viewer.autoHideControls ) {
	        return;
	    }
	    viewer.controlsShouldFade = true;
	    viewer.controlsFadeBeginTime =
	        $.now() +
	        viewer.controlsFadeDelay;
	
	    window.setTimeout( function(){
	        scheduleControlsFade( viewer );
	    }, viewer.controlsFadeDelay );
	}
	
	
	//determines if fade animation is done or continues the animation
	function updateControlsFade( viewer ) {
	    var currentTime,
	        deltaTime,
	        opacity,
	        i;
	    if ( viewer.controlsShouldFade ) {
	        currentTime = $.now();
	        deltaTime = currentTime - viewer.controlsFadeBeginTime;
	        opacity = 1.0 - deltaTime / viewer.controlsFadeLength;
	
	        opacity = Math.min( 1.0, opacity );
	        opacity = Math.max( 0.0, opacity );
	
	        for ( i = viewer.controls.length - 1; i >= 0; i--) {
	            if (viewer.controls[ i ].autoFade) {
	                viewer.controls[ i ].setOpacity( opacity );
	            }
	        }
	
	        if ( opacity > 0 ) {
	            // fade again
	            scheduleControlsFade( viewer );
	        }
	    }
	}
	
	
	//stop the fade animation on the controls and show them
	function abortControlsAutoHide( viewer ) {
	    var i;
	    viewer.controlsShouldFade = false;
	    for ( i = viewer.controls.length - 1; i >= 0; i-- ) {
	        viewer.controls[ i ].setOpacity( 1.0 );
	    }
	}
	
	
	
	///////////////////////////////////////////////////////////////////////////////
	// Default view event handlers.
	///////////////////////////////////////////////////////////////////////////////
	function onFocus(){
	    abortControlsAutoHide( this );
	}
	
	function onBlur(){
	    beginControlsAutoHide( this );
	
	}
	
	function onCanvasKeyDown( event ) {
	    if ( !event.preventDefaultAction && !event.ctrl && !event.alt && !event.meta ) {
	        switch( event.keyCode ){
	            case 38://up arrow
	                if ( event.shift ) {
	                    this.viewport.zoomBy(1.1);
	                } else {
	                    this.viewport.panBy(this.viewport.deltaPointsFromPixels(new $.Point(0, -40)));
	                }
	                this.viewport.applyConstraints();
	                return false;
	            case 40://down arrow
	                if ( event.shift ) {
	                    this.viewport.zoomBy(0.9);
	                } else {
	                    this.viewport.panBy(this.viewport.deltaPointsFromPixels(new $.Point(0, 40)));
	                }
	                this.viewport.applyConstraints();
	                return false;
	            case 37://left arrow
	                this.viewport.panBy(this.viewport.deltaPointsFromPixels(new $.Point(-40, 0)));
	                this.viewport.applyConstraints();
	                return false;
	            case 39://right arrow
	                this.viewport.panBy(this.viewport.deltaPointsFromPixels(new $.Point(40, 0)));
	                this.viewport.applyConstraints();
	                return false;
	            default:
	                //console.log( 'navigator keycode %s', event.keyCode );
	                return true;
	        }
	    } else {
	        return true;
	    }
	}
	
	function onCanvasKeyPress( event ) {
	    if ( !event.preventDefaultAction && !event.ctrl && !event.alt && !event.meta ) {
	        switch( event.keyCode ){
	            case 43://=|+
	            case 61://=|+
	                this.viewport.zoomBy(1.1);
	                this.viewport.applyConstraints();
	                return false;
	            case 45://-|_
	                this.viewport.zoomBy(0.9);
	                this.viewport.applyConstraints();
	                return false;
	            case 48://0|)
	                this.viewport.goHome();
	                this.viewport.applyConstraints();
	                return false;
	            case 119://w
	            case 87://W
	                if ( event.shift ) {
	                    this.viewport.zoomBy(1.1);
	                } else {
	                    this.viewport.panBy(this.viewport.deltaPointsFromPixels(new $.Point(0, -40)));
	                }
	                this.viewport.applyConstraints();
	                return false;
	            case 115://s
	            case 83://S
	                if ( event.shift ) {
	                    this.viewport.zoomBy(0.9);
	                } else {
	                    this.viewport.panBy(this.viewport.deltaPointsFromPixels(new $.Point(0, 40)));
	                }
	                this.viewport.applyConstraints();
	                return false;
	            case 97://a
	                this.viewport.panBy(this.viewport.deltaPointsFromPixels(new $.Point(-40, 0)));
	                this.viewport.applyConstraints();
	                return false;
	            case 100://d
	                this.viewport.panBy(this.viewport.deltaPointsFromPixels(new $.Point(40, 0)));
	                this.viewport.applyConstraints();
	                return false;
	            default:
	                //console.log( 'navigator keycode %s', event.keyCode );
	                return true;
	        }
	    } else {
	        return true;
	    }
	}
	
	function onCanvasClick( event ) {
	    var gestureSettings;
	
	    var haveKeyboardFocus = document.activeElement == this.canvas;
	
	    // If we don't have keyboard focus, request it.
	    if ( !haveKeyboardFocus ) {
	        this.canvas.focus();
	    }
	
	    if ( !event.preventDefaultAction && this.viewport && event.quick ) {
	        gestureSettings = this.gestureSettingsByDeviceType( event.pointerType );
	        if ( gestureSettings.clickToZoom ) {
	            this.viewport.zoomBy(
	                event.shift ? 1.0 / this.zoomPerClick : this.zoomPerClick,
	                this.viewport.pointFromPixel( event.position, true )
	            );
	            this.viewport.applyConstraints();
	        }
	    }
	    /**
	     * Raised when a mouse press/release or touch/remove occurs on the {@link OpenSeadragon.Viewer#canvas} element.
	     *
	     * @event canvas-click
	     * @memberof OpenSeadragon.Viewer
	     * @type {object}
	     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
	     * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.
	     * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.
	     * @property {Boolean} quick - True only if the clickDistThreshold and clickTimeThreshold are both passed. Useful for differentiating between clicks and drags.
	     * @property {Boolean} shift - True if the shift key was pressed during this event.
	     * @property {Object} originalEvent - The original DOM event.
	     * @property {?Object} userData - Arbitrary subscriber-defined object.
	     */
	    this.raiseEvent( 'canvas-click', {
	        tracker: event.eventSource,
	        position: event.position,
	        quick: event.quick,
	        shift: event.shift,
	        originalEvent: event.originalEvent
	    });
	}
	
	function onCanvasDblClick( event ) {
	    var gestureSettings;
	
	    if ( !event.preventDefaultAction && this.viewport ) {
	        gestureSettings = this.gestureSettingsByDeviceType( event.pointerType );
	        if ( gestureSettings.dblClickToZoom ) {
	            this.viewport.zoomBy(
	                event.shift ? 1.0 / this.zoomPerClick : this.zoomPerClick,
	                this.viewport.pointFromPixel( event.position, true )
	            );
	            this.viewport.applyConstraints();
	        }
	    }
	    /**
	     * Raised when a double mouse press/release or touch/remove occurs on the {@link OpenSeadragon.Viewer#canvas} element.
	     *
	     * @event canvas-double-click
	     * @memberof OpenSeadragon.Viewer
	     * @type {object}
	     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
	     * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.
	     * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.
	     * @property {Boolean} shift - True if the shift key was pressed during this event.
	     * @property {Object} originalEvent - The original DOM event.
	     * @property {?Object} userData - Arbitrary subscriber-defined object.
	     */
	    this.raiseEvent( 'canvas-double-click', {
	        tracker: event.eventSource,
	        position: event.position,
	        shift: event.shift,
	        originalEvent: event.originalEvent
	    });
	}
	
	function onCanvasDrag( event ) {
	    var gestureSettings;
	
	    if ( !event.preventDefaultAction && this.viewport ) {
	        gestureSettings = this.gestureSettingsByDeviceType( event.pointerType );
	        if( !this.panHorizontal ){
	            event.delta.x = 0;
	        }
	        if( !this.panVertical ){
	            event.delta.y = 0;
	        }
	        this.viewport.panBy( this.viewport.deltaPointsFromPixels( event.delta.negate() ), gestureSettings.flickEnabled );
	        if( this.constrainDuringPan ){
	            this.viewport.applyConstraints();
	        }
	    }
	    /**
	     * Raised when a mouse or touch drag operation occurs on the {@link OpenSeadragon.Viewer#canvas} element.
	     *
	     * @event canvas-drag
	     * @memberof OpenSeadragon.Viewer
	     * @type {object}
	     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
	     * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.
	     * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.
	     * @property {OpenSeadragon.Point} delta - The x,y components of the difference between start drag and end drag.
	     * @property {Number} speed - Current computed speed, in pixels per second.
	     * @property {Number} direction - Current computed direction, expressed as an angle counterclockwise relative to the positive X axis (-pi to pi, in radians). Only valid if speed > 0.
	     * @property {Boolean} shift - True if the shift key was pressed during this event.
	     * @property {Object} originalEvent - The original DOM event.
	     * @property {?Object} userData - Arbitrary subscriber-defined object.
	     */
	    this.raiseEvent( 'canvas-drag', {
	        tracker: event.eventSource,
	        position: event.position,
	        delta: event.delta,
	        speed: event.speed,
	        direction: event.direction,
	        shift: event.shift,
	        originalEvent: event.originalEvent
	    });
	}
	
	function onCanvasDragEnd( event ) {
	    if (!event.preventDefaultAction && this.viewport) {
	        var gestureSettings = this.gestureSettingsByDeviceType(event.pointerType);
	        if (gestureSettings.flickEnabled &&
	            event.speed >= gestureSettings.flickMinSpeed) {
	            var amplitudeX = 0;
	            if (this.panHorizontal) {
	                amplitudeX = gestureSettings.flickMomentum * event.speed *
	                    Math.cos(event.direction);
	            }
	            var amplitudeY = 0;
	            if (this.panVertical) {
	                amplitudeY = gestureSettings.flickMomentum * event.speed *
	                    Math.sin(event.direction);
	            }
	            var center = this.viewport.pixelFromPoint(
	                this.viewport.getCenter(true));
	            var target = this.viewport.pointFromPixel(
	                new $.Point(center.x - amplitudeX, center.y - amplitudeY));
	            this.viewport.panTo(target, false);
	        }
	        this.viewport.applyConstraints();
	    }
	    /**
	     * Raised when a mouse or touch drag operation ends on the {@link OpenSeadragon.Viewer#canvas} element.
	     *
	     * @event canvas-drag-end
	     * @memberof OpenSeadragon.Viewer
	     * @type {object}
	     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
	     * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.
	     * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.
	     * @property {Number} speed - Speed at the end of a drag gesture, in pixels per second.
	     * @property {Number} direction - Direction at the end of a drag gesture, expressed as an angle counterclockwise relative to the positive X axis (-pi to pi, in radians). Only valid if speed > 0.
	     * @property {Boolean} shift - True if the shift key was pressed during this event.
	     * @property {Object} originalEvent - The original DOM event.
	     * @property {?Object} userData - Arbitrary subscriber-defined object.
	     */
	    this.raiseEvent('canvas-drag-end', {
	        tracker: event.eventSource,
	        position: event.position,
	        speed: event.speed,
	        direction: event.direction,
	        shift: event.shift,
	        originalEvent: event.originalEvent
	    });
	}
	
	function onCanvasEnter( event ) {
	    /**
	     * Raised when a pointer enters the {@link OpenSeadragon.Viewer#canvas} element.
	     *
	     * @event canvas-enter
	     * @memberof OpenSeadragon.Viewer
	     * @type {object}
	     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
	     * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.
	     * @property {String} pointerType - "mouse", "touch", "pen", etc.
	     * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.
	     * @property {Number} buttons - Current buttons pressed. A combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.
	     * @property {Number} pointers - Number of pointers (all types) active in the tracked element.
	     * @property {Boolean} insideElementPressed - True if the left mouse button is currently being pressed and was initiated inside the tracked element, otherwise false.
	     * @property {Boolean} buttonDownAny - Was the button down anywhere in the screen during the event. <span style="color:red;">Deprecated. Use buttons instead.</span>
	     * @property {Object} originalEvent - The original DOM event.
	     * @property {?Object} userData - Arbitrary subscriber-defined object.
	     */
	    this.raiseEvent( 'canvas-enter', {
	        tracker: event.eventSource,
	        pointerType: event.pointerType,
	        position: event.position,
	        buttons: event.buttons,
	        pointers: event.pointers,
	        insideElementPressed: event.insideElementPressed,
	        buttonDownAny: event.buttonDownAny,
	        originalEvent: event.originalEvent
	    });
	}
	
	function onCanvasExit( event ) {
	    /**
	     * Raised when a pointer leaves the {@link OpenSeadragon.Viewer#canvas} element.
	     *
	     * @event canvas-exit
	     * @memberof OpenSeadragon.Viewer
	     * @type {object}
	     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
	     * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.
	     * @property {String} pointerType - "mouse", "touch", "pen", etc.
	     * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.
	     * @property {Number} buttons - Current buttons pressed. A combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.
	     * @property {Number} pointers - Number of pointers (all types) active in the tracked element.
	     * @property {Boolean} insideElementPressed - True if the left mouse button is currently being pressed and was initiated inside the tracked element, otherwise false.
	     * @property {Boolean} buttonDownAny - Was the button down anywhere in the screen during the event. <span style="color:red;">Deprecated. Use buttons instead.</span>
	     * @property {Object} originalEvent - The original DOM event.
	     * @property {?Object} userData - Arbitrary subscriber-defined object.
	     */
	    this.raiseEvent( 'canvas-exit', {
	        tracker: event.eventSource,
	        pointerType: event.pointerType,
	        position: event.position,
	        buttons: event.buttons,
	        pointers: event.pointers,
	        insideElementPressed: event.insideElementPressed,
	        buttonDownAny: event.buttonDownAny,
	        originalEvent: event.originalEvent
	    });
	}
	
	function onCanvasPress( event ) {
	    /**
	     * Raised when the primary mouse button is pressed or touch starts on the {@link OpenSeadragon.Viewer#canvas} element.
	     *
	     * @event canvas-press
	     * @memberof OpenSeadragon.Viewer
	     * @type {object}
	     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
	     * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.
	     * @property {String} pointerType - "mouse", "touch", "pen", etc.
	     * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.
	     * @property {Boolean} insideElementPressed - True if the left mouse button is currently being pressed and was initiated inside the tracked element, otherwise false.
	     * @property {Boolean} insideElementReleased - True if the cursor still inside the tracked element when the button was released.
	     * @property {Object} originalEvent - The original DOM event.
	     * @property {?Object} userData - Arbitrary subscriber-defined object.
	     */
	    this.raiseEvent( 'canvas-press', {
	        tracker: event.eventSource,
	        pointerType: event.pointerType,
	        position: event.position,
	        insideElementPressed: event.insideElementPressed,
	        insideElementReleased: event.insideElementReleased,
	        originalEvent: event.originalEvent
	    });
	}
	
	function onCanvasRelease( event ) {
	    /**
	     * Raised when the primary mouse button is released or touch ends on the {@link OpenSeadragon.Viewer#canvas} element.
	     *
	     * @event canvas-release
	     * @memberof OpenSeadragon.Viewer
	     * @type {object}
	     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
	     * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.
	     * @property {String} pointerType - "mouse", "touch", "pen", etc.
	     * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.
	     * @property {Boolean} insideElementPressed - True if the left mouse button is currently being pressed and was initiated inside the tracked element, otherwise false.
	     * @property {Boolean} insideElementReleased - True if the cursor still inside the tracked element when the button was released.
	     * @property {Object} originalEvent - The original DOM event.
	     * @property {?Object} userData - Arbitrary subscriber-defined object.
	     */
	    this.raiseEvent( 'canvas-release', {
	        tracker: event.eventSource,
	        pointerType: event.pointerType,
	        position: event.position,
	        insideElementPressed: event.insideElementPressed,
	        insideElementReleased: event.insideElementReleased,
	        originalEvent: event.originalEvent
	    });
	}
	
	function onCanvasNonPrimaryPress( event ) {
	    /**
	     * Raised when any non-primary pointer button is pressed on the {@link OpenSeadragon.Viewer#canvas} element.
	     *
	     * @event canvas-nonprimary-press
	     * @memberof OpenSeadragon.Viewer
	     * @type {object}
	     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
	     * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.
	     * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.
	     * @property {String} pointerType - "mouse", "touch", "pen", etc.
	     * @property {Number} button - Button which caused the event.
	     *      -1: none, 0: primary/left, 1: aux/middle, 2: secondary/right, 3: X1/back, 4: X2/forward, 5: pen eraser.
	     * @property {Number} buttons - Current buttons pressed.
	     *      Combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.
	     * @property {Object} originalEvent - The original DOM event.
	     * @property {?Object} userData - Arbitrary subscriber-defined object.
	     */
	    this.raiseEvent( 'canvas-nonprimary-press', {
	        tracker: event.eventSource,
	        position: event.position,
	        pointerType: event.pointerType,
	        button: event.button,
	        buttons: event.buttons,
	        originalEvent: event.originalEvent
	    });
	}
	
	function onCanvasNonPrimaryRelease( event ) {
	    /**
	     * Raised when any non-primary pointer button is released on the {@link OpenSeadragon.Viewer#canvas} element.
	     *
	     * @event canvas-nonprimary-release
	     * @memberof OpenSeadragon.Viewer
	     * @type {object}
	     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
	     * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.
	     * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.
	     * @property {String} pointerType - "mouse", "touch", "pen", etc.
	     * @property {Number} button - Button which caused the event.
	     *      -1: none, 0: primary/left, 1: aux/middle, 2: secondary/right, 3: X1/back, 4: X2/forward, 5: pen eraser.
	     * @property {Number} buttons - Current buttons pressed.
	     *      Combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.
	     * @property {Object} originalEvent - The original DOM event.
	     * @property {?Object} userData - Arbitrary subscriber-defined object.
	     */
	    this.raiseEvent( 'canvas-nonprimary-release', {
	        tracker: event.eventSource,
	        position: event.position,
	        pointerType: event.pointerType,
	        button: event.button,
	        buttons: event.buttons,
	        originalEvent: event.originalEvent
	    });
	}
	
	function onCanvasPinch( event ) {
	    var gestureSettings,
	        centerPt,
	        lastCenterPt,
	        panByPt;
	
	    if ( !event.preventDefaultAction && this.viewport ) {
	        gestureSettings = this.gestureSettingsByDeviceType( event.pointerType );
	        if ( gestureSettings.pinchToZoom ) {
	            centerPt = this.viewport.pointFromPixel( event.center, true );
	            lastCenterPt = this.viewport.pointFromPixel( event.lastCenter, true );
	            panByPt = lastCenterPt.minus( centerPt );
	            if( !this.panHorizontal ) {
	                panByPt.x = 0;
	            }
	            if( !this.panVertical ) {
	                panByPt.y = 0;
	            }
	            this.viewport.zoomBy( event.distance / event.lastDistance, centerPt, true );
	            this.viewport.panBy( panByPt, true );
	            this.viewport.applyConstraints();
	        }
	        if ( gestureSettings.pinchRotate ) {
	            // Pinch rotate
	            var angle1 = Math.atan2(event.gesturePoints[0].currentPos.y - event.gesturePoints[1].currentPos.y,
	                event.gesturePoints[0].currentPos.x - event.gesturePoints[1].currentPos.x);
	            var angle2 = Math.atan2(event.gesturePoints[0].lastPos.y - event.gesturePoints[1].lastPos.y,
	                event.gesturePoints[0].lastPos.x - event.gesturePoints[1].lastPos.x);
	            this.viewport.setRotation(this.viewport.getRotation() + ((angle1 - angle2) * (180 / Math.PI)));
	        }
	    }
	    /**
	     * Raised when a pinch event occurs on the {@link OpenSeadragon.Viewer#canvas} element.
	     *
	     * @event canvas-pinch
	     * @memberof OpenSeadragon.Viewer
	     * @type {object}
	     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
	     * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.
	     * @property {Array.<OpenSeadragon.MouseTracker.GesturePoint>} gesturePoints - Gesture points associated with the gesture. Velocity data can be found here.
	     * @property {OpenSeadragon.Point} lastCenter - The previous center point of the two pinch contact points relative to the tracked element.
	     * @property {OpenSeadragon.Point} center - The center point of the two pinch contact points relative to the tracked element.
	     * @property {Number} lastDistance - The previous distance between the two pinch contact points in CSS pixels.
	     * @property {Number} distance - The distance between the two pinch contact points in CSS pixels.
	     * @property {Boolean} shift - True if the shift key was pressed during this event.
	     * @property {Object} originalEvent - The original DOM event.
	     * @property {?Object} userData - Arbitrary subscriber-defined object.
	     */
	    this.raiseEvent('canvas-pinch', {
	        tracker: event.eventSource,
	        gesturePoints: event.gesturePoints,
	        lastCenter: event.lastCenter,
	        center: event.center,
	        lastDistance: event.lastDistance,
	        distance: event.distance,
	        shift: event.shift,
	        originalEvent: event.originalEvent
	    });
	    //cancels event
	    return false;
	}
	
	function onCanvasScroll( event ) {
	    var gestureSettings,
	        factor,
	        thisScrollTime,
	        deltaScrollTime;
	
	    /* Certain scroll devices fire the scroll event way too fast so we are injecting a simple adjustment to keep things
	     * partially normalized. If we have already fired an event within the last 'minScrollDelta' milliseconds we skip
	     * this one and wait for the next event. */
	    thisScrollTime = $.now();
	    deltaScrollTime = thisScrollTime - this._lastScrollTime;
	    if (deltaScrollTime > this.minScrollDeltaTime) {
	        this._lastScrollTime = thisScrollTime;
	
	        if ( !event.preventDefaultAction && this.viewport ) {
	            gestureSettings = this.gestureSettingsByDeviceType( event.pointerType );
	            if ( gestureSettings.scrollToZoom ) {
	                factor = Math.pow( this.zoomPerScroll, event.scroll );
	                this.viewport.zoomBy(
	                    factor,
	                    this.viewport.pointFromPixel( event.position, true )
	                );
	                this.viewport.applyConstraints();
	            }
	        }
	        /**
	         * Raised when a scroll event occurs on the {@link OpenSeadragon.Viewer#canvas} element (mouse wheel).
	         *
	         * @event canvas-scroll
	         * @memberof OpenSeadragon.Viewer
	         * @type {object}
	         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
	         * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.
	         * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.
	         * @property {Number} scroll - The scroll delta for the event.
	         * @property {Boolean} shift - True if the shift key was pressed during this event.
	         * @property {Object} originalEvent - The original DOM event.
	         * @property {?Object} userData - Arbitrary subscriber-defined object.
	         */
	        this.raiseEvent( 'canvas-scroll', {
	            tracker: event.eventSource,
	            position: event.position,
	            scroll: event.scroll,
	            shift: event.shift,
	            originalEvent: event.originalEvent
	        });
	        if (gestureSettings && gestureSettings.scrollToZoom) {
	            //cancels event
	            return false;
	        }
	    }
	    else {
	        gestureSettings = this.gestureSettingsByDeviceType( event.pointerType );
	        if (gestureSettings && gestureSettings.scrollToZoom) {
	            return false;   // We are swallowing this event
	        }
	    }
	}
	
	function onContainerEnter( event ) {
	    THIS[ this.hash ].mouseInside = true;
	    abortControlsAutoHide( this );
	    /**
	     * Raised when the cursor enters the {@link OpenSeadragon.Viewer#container} element.
	     *
	     * @event container-enter
	     * @memberof OpenSeadragon.Viewer
	     * @type {object}
	     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
	     * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.
	     * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.
	     * @property {Number} buttons - Current buttons pressed. A combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.
	     * @property {Number} pointers - Number of pointers (all types) active in the tracked element.
	     * @property {Boolean} insideElementPressed - True if the left mouse button is currently being pressed and was initiated inside the tracked element, otherwise false.
	     * @property {Boolean} buttonDownAny - Was the button down anywhere in the screen during the event. <span style="color:red;">Deprecated. Use buttons instead.</span>
	     * @property {Object} originalEvent - The original DOM event.
	     * @property {?Object} userData - Arbitrary subscriber-defined object.
	     */
	    this.raiseEvent( 'container-enter', {
	        tracker: event.eventSource,
	        position: event.position,
	        buttons: event.buttons,
	        pointers: event.pointers,
	        insideElementPressed: event.insideElementPressed,
	        buttonDownAny: event.buttonDownAny,
	        originalEvent: event.originalEvent
	    });
	}
	
	function onContainerExit( event ) {
	    if ( event.pointers < 1 ) {
	        THIS[ this.hash ].mouseInside = false;
	        if ( !THIS[ this.hash ].animating ) {
	            beginControlsAutoHide( this );
	        }
	    }
	    /**
	     * Raised when the cursor leaves the {@link OpenSeadragon.Viewer#container} element.
	     *
	     * @event container-exit
	     * @memberof OpenSeadragon.Viewer
	     * @type {object}
	     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
	     * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.
	     * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.
	     * @property {Number} buttons - Current buttons pressed. A combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.
	     * @property {Number} pointers - Number of pointers (all types) active in the tracked element.
	     * @property {Boolean} insideElementPressed - True if the left mouse button is currently being pressed and was initiated inside the tracked element, otherwise false.
	     * @property {Boolean} buttonDownAny - Was the button down anywhere in the screen during the event. <span style="color:red;">Deprecated. Use buttons instead.</span>
	     * @property {Object} originalEvent - The original DOM event.
	     * @property {?Object} userData - Arbitrary subscriber-defined object.
	     */
	    this.raiseEvent( 'container-exit', {
	        tracker: event.eventSource,
	        position: event.position,
	        buttons: event.buttons,
	        pointers: event.pointers,
	        insideElementPressed: event.insideElementPressed,
	        buttonDownAny: event.buttonDownAny,
	        originalEvent: event.originalEvent
	    });
	}
	
	
	///////////////////////////////////////////////////////////////////////////////
	// Page update routines ( aka Views - for future reference )
	///////////////////////////////////////////////////////////////////////////////
	
	function updateMulti( viewer ) {
	    updateOnce( viewer );
	
	    // Request the next frame, unless we've been closed
	    if ( viewer.isOpen() ) {
	        viewer._updateRequestId = scheduleUpdate( viewer, updateMulti );
	    } else {
	        viewer._updateRequestId = false;
	    }
	}
	
	function updateOnce( viewer ) {
	
	    //viewer.profiler.beginUpdate();
	
	    if (viewer._opening) {
	        return;
	    }
	
	    if (viewer.autoResize) {
	        var containerSize = _getSafeElemSize(viewer.container);
	        var prevContainerSize = THIS[viewer.hash].prevContainerSize;
	        if (!containerSize.equals(prevContainerSize)) {
	            var viewport = viewer.viewport;
	            if (viewer.preserveImageSizeOnResize) {
	                var resizeRatio = prevContainerSize.x / containerSize.x;
	                var zoom = viewport.getZoom() * resizeRatio;
	                var center = viewport.getCenter();
	                viewport.resize(containerSize, false);
	                viewport.zoomTo(zoom, null, true);
	                viewport.panTo(center, true);
	            } else {
	                // maintain image position
	                var oldBounds = viewport.getBounds();
	                viewport.resize(containerSize, true);
	                viewport.fitBoundsWithConstraints(oldBounds, true);
	            }
	            THIS[viewer.hash].prevContainerSize = containerSize;
	            THIS[viewer.hash].forceRedraw = true;
	        }
	    }
	
	    var viewportChange = viewer.viewport.update();
	    var animated = viewer.world.update() || viewportChange;
	
	    if (viewportChange) {
	        /**
	         * Raised when any spring animation update occurs (zoom, pan, etc.),
	         * before the viewer has drawn the new location.
	         *
	         * @event viewport-change
	         * @memberof OpenSeadragon.Viewer
	         * @type {object}
	         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
	         * @property {?Object} userData - Arbitrary subscriber-defined object.
	         */
	        viewer.raiseEvent('viewport-change');
	    }
	
	    if( viewer.referenceStrip ){
	        animated = viewer.referenceStrip.update( viewer.viewport ) || animated;
	    }
	
	    if ( !THIS[ viewer.hash ].animating && animated ) {
	        /**
	         * Raised when any spring animation starts (zoom, pan, etc.).
	         *
	         * @event animation-start
	         * @memberof OpenSeadragon.Viewer
	         * @type {object}
	         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
	         * @property {?Object} userData - Arbitrary subscriber-defined object.
	         */
	        viewer.raiseEvent( "animation-start" );
	        abortControlsAutoHide( viewer );
	    }
	
	    if ( animated || THIS[ viewer.hash ].forceRedraw || viewer.world.needsDraw() ) {
	        drawWorld( viewer );
	        viewer._drawOverlays();
	        if( viewer.navigator ){
	            viewer.navigator.update( viewer.viewport );
	        }
	
	        THIS[ viewer.hash ].forceRedraw = false;
	
	        if (animated) {
	            /**
	             * Raised when any spring animation update occurs (zoom, pan, etc.),
	             * after the viewer has drawn the new location.
	             *
	             * @event animation
	             * @memberof OpenSeadragon.Viewer
	             * @type {object}
	             * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
	             * @property {?Object} userData - Arbitrary subscriber-defined object.
	             */
	            viewer.raiseEvent( "animation" );
	        }
	    }
	
	    if ( THIS[ viewer.hash ].animating && !animated ) {
	        /**
	         * Raised when any spring animation ends (zoom, pan, etc.).
	         *
	         * @event animation-finish
	         * @memberof OpenSeadragon.Viewer
	         * @type {object}
	         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
	         * @property {?Object} userData - Arbitrary subscriber-defined object.
	         */
	        viewer.raiseEvent( "animation-finish" );
	
	        if ( !THIS[ viewer.hash ].mouseInside ) {
	            beginControlsAutoHide( viewer );
	        }
	    }
	
	    THIS[ viewer.hash ].animating = animated;
	
	    //viewer.profiler.endUpdate();
	}
	
	function drawWorld( viewer ) {
	    viewer.imageLoader.clear();
	    viewer.drawer.clear();
	    viewer.world.draw();
	
	    /**
	     * <em>- Needs documentation -</em>
	     *
	     * @event update-viewport
	     * @memberof OpenSeadragon.Viewer
	     * @type {object}
	     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.
	     * @property {?Object} userData - Arbitrary subscriber-defined object.
	     */
	    viewer.raiseEvent( 'update-viewport', {} );
	}
	
	///////////////////////////////////////////////////////////////////////////////
	// Navigation Controls
	///////////////////////////////////////////////////////////////////////////////
	function resolveUrl( prefix, url ) {
	    return prefix ? prefix + url : url;
	}
	
	
	
	function beginZoomingIn() {
	    THIS[ this.hash ].lastZoomTime = $.now();
	    THIS[ this.hash ].zoomFactor = this.zoomPerSecond;
	    THIS[ this.hash ].zooming = true;
	    scheduleZoom( this );
	}
	
	
	function beginZoomingOut() {
	    THIS[ this.hash ].lastZoomTime = $.now();
	    THIS[ this.hash ].zoomFactor = 1.0 / this.zoomPerSecond;
	    THIS[ this.hash ].zooming = true;
	    scheduleZoom( this );
	}
	
	
	function endZooming() {
	    THIS[ this.hash ].zooming = false;
	}
	
	
	function scheduleZoom( viewer ) {
	    $.requestAnimationFrame( $.delegate( viewer, doZoom ) );
	}
	
	
	function doZoom() {
	    var currentTime,
	        deltaTime,
	        adjustedFactor;
	
	    if ( THIS[ this.hash ].zooming && this.viewport) {
	        currentTime     = $.now();
	        deltaTime       = currentTime - THIS[ this.hash ].lastZoomTime;
	        adjustedFactor  = Math.pow( THIS[ this.hash ].zoomFactor, deltaTime / 1000 );
	
	        this.viewport.zoomBy( adjustedFactor );
	        this.viewport.applyConstraints();
	        THIS[ this.hash ].lastZoomTime = currentTime;
	        scheduleZoom( this );
	    }
	}
	
	
	function doSingleZoomIn() {
	    if ( this.viewport ) {
	        THIS[ this.hash ].zooming = false;
	        this.viewport.zoomBy(
	            this.zoomPerClick / 1.0
	        );
	        this.viewport.applyConstraints();
	    }
	}
	
	
	function doSingleZoomOut() {
	    if ( this.viewport ) {
	        THIS[ this.hash ].zooming = false;
	        this.viewport.zoomBy(
	            1.0 / this.zoomPerClick
	        );
	        this.viewport.applyConstraints();
	    }
	}
	
	
	function lightUp() {
	    this.buttons.emulateEnter();
	    this.buttons.emulateExit();
	}
	
	
	function onHome() {
	    if ( this.viewport ) {
	        this.viewport.goHome();
	    }
	}
	
	
	function onFullScreen() {
	    if ( this.isFullPage() && !$.isFullScreen() ) {
	        // Is fullPage but not fullScreen
	        this.setFullPage( false );
	    } else {
	        this.setFullScreen( !this.isFullPage() );
	    }
	    // correct for no mouseout event on change
	    if ( this.buttons ) {
	        this.buttons.emulateExit();
	    }
	    this.fullPageButton.element.focus();
	    if ( this.viewport ) {
	        this.viewport.applyConstraints();
	    }
	}
	
	/**
	 * Note: The current rotation feature is limited to 90 degree turns.
	 */
	function onRotateLeft() {
	    if ( this.viewport ) {
	        var currRotation = this.viewport.getRotation();
	        if (currRotation === 0) {
	            currRotation = 270;
	        }
	        else {
	            currRotation -= 90;
	        }
	        this.viewport.setRotation(currRotation);
	    }
	}
	
	/**
	 * Note: The current rotation feature is limited to 90 degree turns.
	 */
	function onRotateRight() {
	    if ( this.viewport ) {
	        var currRotation = this.viewport.getRotation();
	        if (currRotation === 270) {
	            currRotation = 0;
	        }
	        else {
	            currRotation += 90;
	        }
	        this.viewport.setRotation(currRotation);
	    }
	}
	
	
	function onPrevious(){
	    var previous = this._sequenceIndex - 1;
	    if(this.navPrevNextWrap && previous < 0){
	        previous += this.tileSources.length;
	    }
	    this.goToPage( previous );
	}
	
	
	function onNext(){
	    var next = this._sequenceIndex + 1;
	    if(this.navPrevNextWrap && next >= this.tileSources.length){
	        next = 0;
	    }
	    this.goToPage( next );
	}
	
	
	}( OpenSeadragon ));
	
	/*
	 * OpenSeadragon - Navigator
	 *
	 * Copyright (C) 2009 CodePlex Foundation
	 * Copyright (C) 2010-2013 OpenSeadragon contributors
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 * - Redistributions of source code must retain the above copyright notice,
	 *   this list of conditions and the following disclaimer.
	 *
	 * - Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * - Neither the name of CodePlex Foundation nor the names of its
	 *   contributors may be used to endorse or promote products derived from
	 *   this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
	 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */
	
	(function( $ ){
	
	/**
	 * @class Navigator
	 * @classdesc The Navigator provides a small view of the current image as fixed
	 * while representing the viewport as a moving box serving as a frame
	 * of reference in the larger viewport as to which portion of the image
	 * is currently being examined.  The navigator's viewport can be interacted
	 * with using the keyboard or the mouse.
	 *
	 * @memberof OpenSeadragon
	 * @extends OpenSeadragon.Viewer
	 * @extends OpenSeadragon.EventSource
	 * @param {Object} options
	 */
	$.Navigator = function( options ){
	
	    var viewer      = options.viewer,
	        _this = this,
	        viewerSize,
	        navigatorSize;
	
	    //We may need to create a new element and id if they did not
	    //provide the id for the existing element
	    if( !options.id ){
	        options.id              = 'navigator-' + $.now();
	        this.element            = $.makeNeutralElement( "div" );
	        options.controlOptions  = {
	            anchor:           $.ControlAnchor.TOP_RIGHT,
	            attachToViewer:   true,
	            autoFade:         options.autoFade
	        };
	
	        if( options.position ){
	            if( 'BOTTOM_RIGHT' == options.position ){
	               options.controlOptions.anchor = $.ControlAnchor.BOTTOM_RIGHT;
	            } else if( 'BOTTOM_LEFT' == options.position ){
	               options.controlOptions.anchor = $.ControlAnchor.BOTTOM_LEFT;
	            } else if( 'TOP_RIGHT' == options.position ){
	               options.controlOptions.anchor = $.ControlAnchor.TOP_RIGHT;
	            } else if( 'TOP_LEFT' == options.position ){
	               options.controlOptions.anchor = $.ControlAnchor.TOP_LEFT;
	            } else if( 'ABSOLUTE' == options.position ){
	               options.controlOptions.anchor = $.ControlAnchor.ABSOLUTE;
	               options.controlOptions.top = options.top;
	               options.controlOptions.left = options.left;
	               options.controlOptions.height = options.height;
	               options.controlOptions.width = options.width;
	            }
	        }
	
	    } else {
	        this.element            = document.getElementById( options.id );
	        options.controlOptions  = {
	            anchor:           $.ControlAnchor.NONE,
	            attachToViewer:   false,
	            autoFade:         false
	        };
	    }
	    this.element.id         = options.id;
	    this.element.className  += ' navigator';
	
	    options = $.extend( true, {
	        sizeRatio:     $.DEFAULT_SETTINGS.navigatorSizeRatio
	    }, options, {
	        element:                this.element,
	        tabIndex:               -1, // No keyboard navigation, omit from tab order
	        //These need to be overridden to prevent recursion since
	        //the navigator is a viewer and a viewer has a navigator
	        showNavigator:          false,
	        mouseNavEnabled:        false,
	        showNavigationControl:  false,
	        showSequenceControl:    false,
	        immediateRender:        true,
	        blendTime:              0,
	        animationTime:          0,
	        autoResize:             options.autoResize,
	        // prevent resizing the navigator from adding unwanted space around the image
	        minZoomImageRatio:      1.0
	    });
	
	    options.minPixelRatio = this.minPixelRatio = viewer.minPixelRatio;
	
	    $.setElementTouchActionNone( this.element );
	
	    this.borderWidth = 2;
	    //At some browser magnification levels the display regions lines up correctly, but at some there appears to
	    //be a one pixel gap.
	    this.fudge = new $.Point(1, 1);
	    this.totalBorderWidths = new $.Point(this.borderWidth*2, this.borderWidth*2).minus(this.fudge);
	
	
	    if ( options.controlOptions.anchor != $.ControlAnchor.NONE ) {
	        (function( style, borderWidth ){
	            style.margin        = '0px';
	            style.border        = borderWidth + 'px solid #555';
	            style.padding       = '0px';
	            style.background    = '#000';
	            style.opacity       = 0.8;
	            style.overflow      = 'hidden';
	        }( this.element.style, this.borderWidth));
	    }
	
	    this.displayRegion           = $.makeNeutralElement( "div" );
	    this.displayRegion.id        = this.element.id + '-displayregion';
	    this.displayRegion.className = 'displayregion';
	
	    (function( style, borderWidth ){
	        style.position      = 'relative';
	        style.top           = '0px';
	        style.left          = '0px';
	        style.fontSize      = '0px';
	        style.overflow      = 'hidden';
	        style.border        = borderWidth + 'px solid #900';
	        style.margin        = '0px';
	        style.padding       = '0px';
	        //TODO: IE doesnt like this property being set
	        //try{ style.outline  = '2px auto #909'; }catch(e){/*ignore*/}
	
	        style.background    = 'transparent';
	
	        // We use square bracket notation on the statement below, because float is a keyword.
	        // This is important for the Google Closure compiler, if nothing else.
	        /*jshint sub:true */
	        style['float']      = 'left'; //Webkit
	
	        style.cssFloat      = 'left'; //Firefox
	        style.styleFloat    = 'left'; //IE
	        style.zIndex        = 999999999;
	        style.cursor        = 'default';
	    }( this.displayRegion.style, this.borderWidth ));
	
	    this.displayRegionContainer = $.makeNeutralElement("div");
	    this.displayRegionContainer.id = this.element.id + '-displayregioncontainer';
	    this.displayRegionContainer.className = "displayregioncontainer";
	    this.displayRegionContainer.style.width = "100%";
	    this.displayRegionContainer.style.height = "100%";
	
	    viewer.addControl(
	        this.element,
	        options.controlOptions
	    );
	
	    this._resizeWithViewer = options.controlOptions.anchor != $.ControlAnchor.ABSOLUTE &&
	        options.controlOptions.anchor != $.ControlAnchor.NONE;
	
	    if ( this._resizeWithViewer ) {
	        if ( options.width && options.height ) {
	            this.element.style.height = typeof ( options.height )  == "number" ? ( options.height + 'px' ) : options.height;
	            this.element.style.width  = typeof ( options.width )  == "number" ? ( options.width + 'px' ) : options.width;
	        } else {
	            viewerSize = $.getElementSize( viewer.element );
	            this.element.style.height = Math.round( viewerSize.y * options.sizeRatio ) + 'px';
	            this.element.style.width  = Math.round( viewerSize.x * options.sizeRatio ) + 'px';
	            this.oldViewerSize = viewerSize;
	        }
	        navigatorSize = $.getElementSize( this.element );
	        this.elementArea = navigatorSize.x * navigatorSize.y;
	    }
	
	    this.oldContainerSize = new $.Point( 0, 0 );
	
	    $.Viewer.apply( this, [ options ] );
	
	    this.displayRegionContainer.appendChild(this.displayRegion);
	    this.element.getElementsByTagName('div')[0].appendChild(this.displayRegionContainer);
	
	    function rotate(degrees) {
	        _setTransformRotate(_this.displayRegionContainer, degrees);
	        _setTransformRotate(_this.displayRegion, -degrees);
	        _this.viewport.setRotation(degrees);
	    }
	    if (options.navigatorRotate) {
	        var degrees = options.viewer.viewport ?
	            options.viewer.viewport.getRotation() :
	            options.viewer.degrees || 0;
	        rotate(degrees);
	        options.viewer.addHandler("rotate", function (args) {
	            rotate(args.degrees);
	        });
	    }
	
	    // Remove the base class' (Viewer's) innerTracker and replace it with our own
	    this.innerTracker.destroy();
	    this.innerTracker = new $.MouseTracker({
	        element:         this.element,
	        dragHandler:     $.delegate( this, onCanvasDrag ),
	        clickHandler:    $.delegate( this, onCanvasClick ),
	        releaseHandler:  $.delegate( this, onCanvasRelease ),
	        scrollHandler:   $.delegate( this, onCanvasScroll )
	    });
	
	    this.addHandler("reset-size", function() {
	        if (_this.viewport) {
	            _this.viewport.goHome(true);
	        }
	    });
	
	    viewer.world.addHandler("item-index-change", function(event) {
	        var item = _this.world.getItemAt(event.previousIndex);
	        _this.world.setItemIndex(item, event.newIndex);
	    });
	
	    viewer.world.addHandler("remove-item", function(event) {
	        var theirItem = event.item;
	        var myItem = _this._getMatchingItem(theirItem);
	        if (myItem) {
	            _this.world.removeItem(myItem);
	        }
	    });
	
	    this.update(viewer.viewport);
	};
	
	$.extend( $.Navigator.prototype, $.EventSource.prototype, $.Viewer.prototype, /** @lends OpenSeadragon.Navigator.prototype */{
	
	    /**
	     * Used to notify the navigator when its size has changed.
	     * Especially useful when {@link OpenSeadragon.Options}.navigatorAutoResize is set to false and the navigator is resizable.
	     * @function
	     */
	    updateSize: function () {
	        if ( this.viewport ) {
	            var containerSize = new $.Point(
	                    (this.container.clientWidth === 0 ? 1 : this.container.clientWidth),
	                    (this.container.clientHeight === 0 ? 1 : this.container.clientHeight)
	                );
	
	            if ( !containerSize.equals( this.oldContainerSize ) ) {
	                this.viewport.resize( containerSize, true );
	                this.viewport.goHome(true);
	                this.oldContainerSize = containerSize;
	                this.drawer.clear();
	                this.world.draw();
	            }
	        }
	    },
	
	    /**
	     * Used to update the navigator minimap's viewport rectangle when a change in the viewer's viewport occurs.
	     * @function
	     * @param {OpenSeadragon.Viewport} The viewport this navigator is tracking.
	     */
	    update: function( viewport ) {
	
	        var viewerSize,
	            newWidth,
	            newHeight,
	            bounds,
	            topleft,
	            bottomright;
	
	        viewerSize = $.getElementSize( this.viewer.element );
	        if ( this._resizeWithViewer && viewerSize.x && viewerSize.y && !viewerSize.equals( this.oldViewerSize ) ) {
	            this.oldViewerSize = viewerSize;
	
	            if ( this.maintainSizeRatio || !this.elementArea) {
	                newWidth  = viewerSize.x * this.sizeRatio;
	                newHeight = viewerSize.y * this.sizeRatio;
	            } else {
	                newWidth = Math.sqrt(this.elementArea * (viewerSize.x / viewerSize.y));
	                newHeight = this.elementArea / newWidth;
	            }
	
	            this.element.style.width  = Math.round( newWidth ) + 'px';
	            this.element.style.height = Math.round( newHeight ) + 'px';
	
	            if (!this.elementArea) {
	                this.elementArea = newWidth * newHeight;
	            }
	
	            this.updateSize();
	        }
	
	        if (viewport && this.viewport) {
	            bounds      = viewport.getBoundsNoRotate(true);
	            topleft     = this.viewport.pixelFromPointNoRotate(bounds.getTopLeft(), false);
	            bottomright = this.viewport.pixelFromPointNoRotate(bounds.getBottomRight(), false)
	                .minus( this.totalBorderWidths );
	
	            //update style for navigator-box
	            var style = this.displayRegion.style;
	            style.display = this.world.getItemCount() ? 'block' : 'none';
	
	            style.top    = Math.round( topleft.y ) + 'px';
	            style.left   = Math.round( topleft.x ) + 'px';
	
	            var width = Math.abs( topleft.x - bottomright.x );
	            var height = Math.abs( topleft.y - bottomright.y );
	            // make sure width and height are non-negative so IE doesn't throw
	            style.width  = Math.round( Math.max( width, 0 ) ) + 'px';
	            style.height = Math.round( Math.max( height, 0 ) ) + 'px';
	        }
	
	    },
	
	    // overrides Viewer.addTiledImage
	    addTiledImage: function(options) {
	        var _this = this;
	
	        var original = options.originalTiledImage;
	        delete options.original;
	
	        var optionsClone = $.extend({}, options, {
	            success: function(event) {
	                var myItem = event.item;
	                myItem._originalForNavigator = original;
	                _this._matchBounds(myItem, original, true);
	
	                original.addHandler('bounds-change', function() {
	                    _this._matchBounds(myItem, original);
	                });
	            }
	        });
	
	        return $.Viewer.prototype.addTiledImage.apply(this, [optionsClone]);
	    },
	
	    // private
	    _getMatchingItem: function(theirItem) {
	        var count = this.world.getItemCount();
	        var item;
	        for (var i = 0; i < count; i++) {
	            item = this.world.getItemAt(i);
	            if (item._originalForNavigator === theirItem) {
	                return item;
	            }
	        }
	
	        return null;
	    },
	
	    // private
	    _matchBounds: function(myItem, theirItem, immediately) {
	        var bounds = theirItem.getBounds();
	        myItem.setPosition(bounds.getTopLeft(), immediately);
	        myItem.setWidth(bounds.width, immediately);
	    }
	});
	
	/**
	 * @private
	 * @inner
	 * @function
	 */
	function onCanvasClick( event ) {
	    if ( event.quick && this.viewer.viewport ) {
	        this.viewer.viewport.panTo(this.viewport.pointFromPixel(event.position));
	        this.viewer.viewport.applyConstraints();
	    }
	}
	
	/**
	 * @private
	 * @inner
	 * @function
	 */
	function onCanvasDrag( event ) {
	    if ( this.viewer.viewport ) {
	        if( !this.panHorizontal ){
	            event.delta.x = 0;
	        }
	        if( !this.panVertical ){
	            event.delta.y = 0;
	        }
	        this.viewer.viewport.panBy(
	            this.viewport.deltaPointsFromPixels(
	                event.delta
	            )
	        );
	    }
	}
	
	
	/**
	 * @private
	 * @inner
	 * @function
	 */
	function onCanvasRelease( event ) {
	    if ( event.insideElementPressed && this.viewer.viewport ) {
	        this.viewer.viewport.applyConstraints();
	    }
	}
	
	
	/**
	 * @private
	 * @inner
	 * @function
	 */
	function onCanvasScroll( event ) {
	    /**
	     * Raised when a scroll event occurs on the {@link OpenSeadragon.Viewer#navigator} element (mouse wheel, touch pinch, etc.).
	     *
	     * @event navigator-scroll
	     * @memberof OpenSeadragon.Viewer
	     * @type {object}
	     * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
	     * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.
	     * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.
	     * @property {Number} scroll - The scroll delta for the event.
	     * @property {Boolean} shift - True if the shift key was pressed during this event.
	     * @property {Object} originalEvent - The original DOM event.
	     * @property {?Object} userData - Arbitrary subscriber-defined object.
	     */
	    this.viewer.raiseEvent( 'navigator-scroll', {
	        tracker: event.eventSource,
	        position: event.position,
	        scroll: event.scroll,
	        shift: event.shift,
	        originalEvent: event.originalEvent
	    });
	
	    //dont scroll the page up and down if the user is scrolling
	    //in the navigator
	    return false;
	}
	
	/**
	    * @function
	    * @private
	    * @param {Object} element
	    * @param {Number} degrees
	    */
	function _setTransformRotate (element, degrees) {
	    element.style.webkitTransform = "rotate(" + degrees + "deg)";
	    element.style.mozTransform = "rotate(" + degrees + "deg)";
	    element.style.msTransform = "rotate(" + degrees + "deg)";
	    element.style.oTransform = "rotate(" + degrees + "deg)";
	    element.style.transform = "rotate(" + degrees + "deg)";
	}
	
	}( OpenSeadragon ));
	
	/*
	 * OpenSeadragon - getString/setString
	 *
	 * Copyright (C) 2009 CodePlex Foundation
	 * Copyright (C) 2010-2013 OpenSeadragon contributors
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 * - Redistributions of source code must retain the above copyright notice,
	 *   this list of conditions and the following disclaimer.
	 *
	 * - Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * - Neither the name of CodePlex Foundation nor the names of its
	 *   contributors may be used to endorse or promote products derived from
	 *   this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
	 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */
	
	(function( $ ){
	
	//TODO: I guess this is where the i18n needs to be reimplemented.  I'll look
	//      into existing patterns for i18n in javascript but i think that mimicking
	//      pythons gettext might be a reasonable approach.
	var I18N = {
	    Errors: {
	        Dzc:            "Sorry, we don't support Deep Zoom Collections!",
	        Dzi:            "Hmm, this doesn't appear to be a valid Deep Zoom Image.",
	        Xml:            "Hmm, this doesn't appear to be a valid Deep Zoom Image.",
	        ImageFormat:    "Sorry, we don't support {0}-based Deep Zoom Images.",
	        Security:       "It looks like a security restriction stopped us from " +
	                        "loading this Deep Zoom Image.",
	        Status:         "This space unintentionally left blank ({0} {1}).",
	        OpenFailed:     "Unable to open {0}: {1}"
	    },
	
	    Tooltips: {
	        FullPage:       "Toggle full page",
	        Home:           "Go home",
	        ZoomIn:         "Zoom in",
	        ZoomOut:        "Zoom out",
	        NextPage:       "Next page",
	        PreviousPage:   "Previous page",
	        RotateLeft:     "Rotate left",
	        RotateRight:    "Rotate right"
	    }
	};
	
	$.extend( $, /** @lends OpenSeadragon */{
	
	    /**
	     * @function
	     * @param {String} property
	     */
	    getString: function( prop ) {
	
	        var props   = prop.split('.'),
	            string  = null,
	            args    = arguments,
	            container = I18N,
	            i;
	
	        for ( i = 0; i < props.length-1; i++ ) {
	            // in case not a subproperty
	            container = container[ props[ i ] ] || {};
	        }
	        string = container[ props[ i ] ];
	
	        if ( typeof( string ) != "string" ) {
	            $.console.debug( "Untranslated source string:", prop );
	            string = ""; // FIXME: this breaks gettext()-style convention, which would return source
	        }
	
	        return string.replace(/\{\d+\}/g, function(capture) {
	            var i = parseInt( capture.match( /\d+/ ), 10 ) + 1;
	            return i < args.length ?
	                args[ i ] :
	                "";
	        });
	    },
	
	    /**
	     * @function
	     * @param {String} property
	     * @param {*} value
	     */
	    setString: function( prop, value ) {
	
	        var props     = prop.split('.'),
	            container = I18N,
	            i;
	
	        for ( i = 0; i < props.length - 1; i++ ) {
	            if ( !container[ props[ i ] ] ) {
	                container[ props[ i ] ] = {};
	            }
	            container = container[ props[ i ] ];
	        }
	
	        container[ props[ i ] ] = value;
	    }
	
	});
	
	}( OpenSeadragon ));
	
	/*
	 * OpenSeadragon - Point
	 *
	 * Copyright (C) 2009 CodePlex Foundation
	 * Copyright (C) 2010-2013 OpenSeadragon contributors
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 * - Redistributions of source code must retain the above copyright notice,
	 *   this list of conditions and the following disclaimer.
	 *
	 * - Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * - Neither the name of CodePlex Foundation nor the names of its
	 *   contributors may be used to endorse or promote products derived from
	 *   this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
	 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */
	
	(function( $ ){
	
	/**
	 * @class Point
	 * @classdesc A Point is really used as a 2-dimensional vector, equally useful for
	 * representing a point on a plane, or the height and width of a plane
	 * not requiring any other frame of reference.
	 *
	 * @memberof OpenSeadragon
	 * @param {Number} [x] The vector component 'x'. Defaults to the origin at 0.
	 * @param {Number} [y] The vector component 'y'. Defaults to the origin at 0.
	 */
	$.Point = function( x, y ) {
	    /**
	     * The vector component 'x'.
	     * @member {Number} x
	     * @memberof OpenSeadragon.Point#
	     */
	    this.x = typeof ( x ) == "number" ? x : 0;
	    /**
	     * The vector component 'y'.
	     * @member {Number} y
	     * @memberof OpenSeadragon.Point#
	     */
	    this.y = typeof ( y ) == "number" ? y : 0;
	};
	
	/** @lends OpenSeadragon.Point.prototype */
	$.Point.prototype = {
	    /**
	     * @function
	     * @returns {OpenSeadragon.Point} a duplicate of this Point
	     */
	    clone: function() {
	        return new $.Point(this.x, this.y);
	    },
	
	    /**
	     * Add another Point to this point and return a new Point.
	     * @function
	     * @param {OpenSeadragon.Point} point The point to add vector components.
	     * @returns {OpenSeadragon.Point} A new point representing the sum of the
	     *  vector components
	     */
	    plus: function( point ) {
	        return new $.Point(
	            this.x + point.x,
	            this.y + point.y
	        );
	    },
	
	    /**
	     * Substract another Point to this point and return a new Point.
	     * @function
	     * @param {OpenSeadragon.Point} point The point to substract vector components.
	     * @returns {OpenSeadragon.Point} A new point representing the substraction of the
	     *  vector components
	     */
	    minus: function( point ) {
	        return new $.Point(
	            this.x - point.x,
	            this.y - point.y
	        );
	    },
	
	    /**
	     * Multiply this point by a factor and return a new Point.
	     * @function
	     * @param {Number} factor The factor to multiply vector components.
	     * @returns {OpenSeadragon.Point} A new point representing the multiplication
	     *  of the vector components by the factor
	     */
	    times: function( factor ) {
	        return new $.Point(
	            this.x * factor,
	            this.y * factor
	        );
	    },
	
	    /**
	     * Divide this point by a factor and return a new Point.
	     * @function
	     * @param {Number} factor The factor to divide vector components.
	     * @returns {OpenSeadragon.Point} A new point representing the division of the
	     *  vector components by the factor
	     */
	    divide: function( factor ) {
	        return new $.Point(
	            this.x / factor,
	            this.y / factor
	        );
	    },
	
	    /**
	     * Compute the opposite of this point and return a new Point.
	     * @function
	     * @returns {OpenSeadragon.Point} A new point representing the opposite of the
	     *  vector components
	     */
	    negate: function() {
	        return new $.Point( -this.x, -this.y );
	    },
	
	    /**
	     * Compute the distance between this point and another point.
	     * @function
	     * @param {OpenSeadragon.Point} point The point to compute the distance with.
	     * @returns {Number} The distance between the 2 points
	     */
	    distanceTo: function( point ) {
	        return Math.sqrt(
	            Math.pow( this.x - point.x, 2 ) +
	            Math.pow( this.y - point.y, 2 )
	        );
	    },
	
	    /**
	     * Apply a function to each coordinate of this point and return a new point.
	     * @function
	     * @param {function} func The function to apply to each coordinate.
	     * @returns {OpenSeadragon.Point} A new point with the coordinates computed
	     * by the specified function
	     */
	    apply: function( func ) {
	        return new $.Point( func( this.x ), func( this.y ) );
	    },
	
	    /**
	     * Check if this point is equal to another one.
	     * @function
	     * @param {OpenSeadragon.Point} point The point to compare this point with.
	     * @returns {Boolean} true if they are equal, false otherwise.
	     */
	    equals: function( point ) {
	        return (
	            point instanceof $.Point
	        ) && (
	            this.x === point.x
	        ) && (
	            this.y === point.y
	        );
	    },
	
	    /**
	     * Rotates the point around the specified pivot
	     * From http://stackoverflow.com/questions/4465931/rotate-rectangle-around-a-point
	     * @function
	     * @param {Number} degress to rotate around the pivot.
	     * @param {OpenSeadragon.Point} [pivot=(0,0)] Point around which to rotate.
	     * Defaults to the origin.
	     * @returns {OpenSeadragon.Point}. A new point representing the point rotated around the specified pivot
	     */
	    rotate: function (degrees, pivot) {
	        pivot = pivot || new $.Point(0, 0);
	        var cos;
	        var sin;
	        // Avoid float computations when possible
	        if (degrees % 90 === 0) {
	            var d = degrees % 360;
	            if (d < 0) {
	                d += 360;
	            }
	            switch (d) {
	                case 0:
	                    cos = 1;
	                    sin = 0;
	                    break;
	                case 90:
	                    cos = 0;
	                    sin = 1;
	                    break;
	                case 180:
	                    cos = -1;
	                    sin = 0;
	                    break;
	                case 270:
	                    cos = 0;
	                    sin = -1;
	                    break;
	            }
	        } else {
	            var angle = degrees * Math.PI / 180.0;
	            cos = Math.cos(angle);
	            sin = Math.sin(angle);
	        }
	        var x = cos * (this.x - pivot.x) - sin * (this.y - pivot.y) + pivot.x;
	        var y = sin * (this.x - pivot.x) + cos * (this.y - pivot.y) + pivot.y;
	        return new $.Point(x, y);
	    },
	
	    /**
	     * Convert this point to a string in the format (x,y) where x and y are
	     * rounded to the nearest integer.
	     * @function
	     * @returns {String} A string representation of this point.
	     */
	    toString: function() {
	        return "(" + (Math.round(this.x * 100) / 100) + "," + (Math.round(this.y * 100) / 100) + ")";
	    }
	};
	
	}( OpenSeadragon ));
	
	/*
	 * OpenSeadragon - TileSource
	 *
	 * Copyright (C) 2009 CodePlex Foundation
	 * Copyright (C) 2010-2013 OpenSeadragon contributors
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 * - Redistributions of source code must retain the above copyright notice,
	 *   this list of conditions and the following disclaimer.
	 *
	 * - Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * - Neither the name of CodePlex Foundation nor the names of its
	 *   contributors may be used to endorse or promote products derived from
	 *   this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
	 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */
	
	(function( $ ){
	
	
	/**
	 * @class TileSource
	 * @classdesc The TileSource contains the most basic implementation required to create a
	 * smooth transition between layers in an image pyramid. It has only a single key
	 * interface that must be implemented to complete its key functionality:
	 * 'getTileUrl'.  It also has several optional interfaces that can be
	 * implemented if a new TileSource wishes to support configuration via a simple
	 * object or array ('configure') and if the tile source supports or requires
	 * configuration via retrieval of a document on the network ala AJAX or JSONP,
	 * ('getImageInfo').
	 * <br/>
	 * By default the image pyramid is split into N layers where the image's longest
	 * side in M (in pixels), where N is the smallest integer which satisfies
	 *      <strong>2^(N+1) >= M</strong>.
	 *
	 * @memberof OpenSeadragon
	 * @extends OpenSeadragon.EventSource
	 * @param {Object} options
	 *      You can either specify a URL, or literally define the TileSource (by specifying
	 *      width, height, tileSize, tileOverlap, minLevel, and maxLevel). For the former,
	 *      the extending class is expected to implement 'getImageInfo' and 'configure'.
	 *      For the latter, the construction is assumed to occur through
	 *      the extending classes implementation of 'configure'.
	 * @param {String} [options.url]
	 *      The URL for the data necessary for this TileSource.
	 * @param {Function} [options.success]
	 *      A function to be called upon successful creation.
	 * @param {Boolean} [options.ajaxWithCredentials]
	 *      If this TileSource needs to make an AJAX call, this specifies whether to set
	 *      the XHR's withCredentials (for accessing secure data).
	 * @param {Number} [options.width]
	 *      Width of the source image at max resolution in pixels.
	 * @param {Number} [options.height]
	 *      Height of the source image at max resolution in pixels.
	 * @param {Number} [options.tileSize]
	 *      The size of the tiles to assumed to make up each pyramid layer in pixels.
	 *      Tile size determines the point at which the image pyramid must be
	 *      divided into a matrix of smaller images.
	 *      Use options.tileWidth and options.tileHeight to support non-square tiles.
	 * @param {Number} [options.tileWidth]
	 *      The width of the tiles to assumed to make up each pyramid layer in pixels.
	 * @param {Number} [options.tileHeight]
	 *      The height of the tiles to assumed to make up each pyramid layer in pixels.
	 * @param {Number} [options.tileOverlap]
	 *      The number of pixels each tile is expected to overlap touching tiles.
	 * @param {Number} [options.minLevel]
	 *      The minimum level to attempt to load.
	 * @param {Number} [options.maxLevel]
	 *      The maximum level to attempt to load.
	 */
	$.TileSource = function( width, height, tileSize, tileOverlap, minLevel, maxLevel ) {
	    var _this = this;
	
	    var args = arguments,
	        options,
	        i;
	
	    if( $.isPlainObject( width ) ){
	        options = width;
	    }else{
	        options = {
	            width: args[0],
	            height: args[1],
	            tileSize: args[2],
	            tileOverlap: args[3],
	            minLevel: args[4],
	            maxLevel: args[5]
	        };
	    }
	
	    //Tile sources supply some events, namely 'ready' when they must be configured
	    //by asynchronously fetching their configuration data.
	    $.EventSource.call( this );
	
	    //we allow options to override anything we dont treat as
	    //required via idiomatic options or which is functionally
	    //set depending on the state of the readiness of this tile
	    //source
	    $.extend( true, this, options );
	
	    if (!this.success) {
	        //Any functions that are passed as arguments are bound to the ready callback
	        for ( i = 0; i < arguments.length; i++ ) {
	            if ( $.isFunction( arguments[ i ] ) ) {
	                this.success = arguments[ i ];
	                //only one callback per constructor
	                break;
	            }
	        }
	    }
	
	    if (this.success) {
	        this.addHandler( 'ready', function ( event ) {
	            _this.success( event );
	        } );
	    }
	
	    /**
	     * Ratio of width to height
	     * @member {Number} aspectRatio
	     * @memberof OpenSeadragon.TileSource#
	     */
	    /**
	     * Vector storing x and y dimensions ( width and height respectively ).
	     * @member {OpenSeadragon.Point} dimensions
	     * @memberof OpenSeadragon.TileSource#
	     */
	    /**
	     * The overlap in pixels each tile shares with its adjacent neighbors.
	     * @member {Number} tileOverlap
	     * @memberof OpenSeadragon.TileSource#
	     */
	    /**
	     * The minimum pyramid level this tile source supports or should attempt to load.
	     * @member {Number} minLevel
	     * @memberof OpenSeadragon.TileSource#
	     */
	    /**
	     * The maximum pyramid level this tile source supports or should attempt to load.
	     * @member {Number} maxLevel
	     * @memberof OpenSeadragon.TileSource#
	     */
	    /**
	     *
	     * @member {Boolean} ready
	     * @memberof OpenSeadragon.TileSource#
	     */
	
	    if( 'string' == $.type( arguments[ 0 ] ) ){
	        this.url = arguments[0];
	    }
	
	    if (this.url) {
	        //in case the getImageInfo method is overriden and/or implies an
	        //async mechanism set some safe defaults first
	        this.aspectRatio = 1;
	        this.dimensions  = new $.Point( 10, 10 );
	        this._tileWidth  = 0;
	        this._tileHeight = 0;
	        this.tileOverlap = 0;
	        this.minLevel    = 0;
	        this.maxLevel    = 0;
	        this.ready       = false;
	        //configuration via url implies the extending class
	        //implements and 'configure'
	        this.getImageInfo( this.url );
	
	    } else {
	
	        //explicit configuration via positional args in constructor
	        //or the more idiomatic 'options' object
	        this.ready       = true;
	        this.aspectRatio = ( options.width && options.height ) ?
	            (  options.width / options.height ) : 1;
	        this.dimensions  = new $.Point( options.width, options.height );
	
	        if ( this.tileSize ){
	            this._tileWidth = this._tileHeight = this.tileSize;
	            delete this.tileSize;
	        } else {
	            if( this.tileWidth ){
	                // We were passed tileWidth in options, but we want to rename it
	                // with a leading underscore to make clear that it is not safe to directly modify it
	                this._tileWidth = this.tileWidth;
	                delete this.tileWidth;
	            } else {
	                this._tileWidth = 0;
	            }
	
	            if( this.tileHeight ){
	                // See note above about renaming this.tileWidth
	                this._tileHeight = this.tileHeight;
	                delete this.tileHeight;
	            } else {
	                this._tileHeight = 0;
	            }
	        }
	
	        this.tileOverlap = options.tileOverlap ? options.tileOverlap : 0;
	        this.minLevel    = options.minLevel ? options.minLevel : 0;
	        this.maxLevel    = ( undefined !== options.maxLevel && null !== options.maxLevel ) ?
	            options.maxLevel : (
	                ( options.width && options.height ) ? Math.ceil(
	                    Math.log( Math.max( options.width, options.height ) ) /
	                    Math.log( 2 )
	                ) : 0
	            );
	        if( this.success && $.isFunction( this.success ) ){
	            this.success( this );
	        }
	    }
	
	
	};
	
	/** @lends OpenSeadragon.TileSource.prototype */
	$.TileSource.prototype = {
	
	    getTileSize: function( level ) {
	        $.console.error(
	            "[TileSource.getTileSize] is deprecated." +
	            "Use TileSource.getTileWidth() and TileSource.getTileHeight() instead"
	        );
	        return this._tileWidth;
	    },
	
	    /**
	     * Return the tileWidth for a given level.
	     * Subclasses should override this if tileWidth can be different at different levels
	     *   such as in IIIFTileSource.  Code should use this function rather than reading
	     *   from ._tileWidth directly.
	     * @function
	     * @param {Number} level
	     */
	    getTileWidth: function( level ) {
	        if (!this._tileWidth) {
	            return this.getTileSize(level);
	        }
	        return this._tileWidth;
	    },
	
	    /**
	     * Return the tileHeight for a given level.
	     * Subclasses should override this if tileHeight can be different at different levels
	     *   such as in IIIFTileSource.  Code should use this function rather than reading
	     *   from ._tileHeight directly.
	     * @function
	     * @param {Number} level
	     */
	    getTileHeight: function( level ) {
	        if (!this._tileHeight) {
	            return this.getTileSize(level);
	        }
	        return this._tileHeight;
	    },
	
	    /**
	     * @function
	     * @param {Number} level
	     */
	    getLevelScale: function( level ) {
	
	        // see https://github.com/openseadragon/openseadragon/issues/22
	        // we use the tilesources implementation of getLevelScale to generate
	        // a memoized re-implementation
	        var levelScaleCache = {},
	            i;
	        for( i = 0; i <= this.maxLevel; i++ ){
	            levelScaleCache[ i ] = 1 / Math.pow(2, this.maxLevel - i);
	        }
	        this.getLevelScale = function( _level ){
	            return levelScaleCache[ _level ];
	        };
	        return this.getLevelScale( level );
	    },
	
	    /**
	     * @function
	     * @param {Number} level
	     */
	    getNumTiles: function( level ) {
	        var scale = this.getLevelScale( level ),
	            x = Math.ceil( scale * this.dimensions.x / this.getTileWidth(level) ),
	            y = Math.ceil( scale * this.dimensions.y / this.getTileHeight(level) );
	
	        return new $.Point( x, y );
	    },
	
	    /**
	     * @function
	     * @param {Number} level
	     */
	    getPixelRatio: function( level ) {
	        var imageSizeScaled = this.dimensions.times( this.getLevelScale( level ) ),
	            rx = 1.0 / imageSizeScaled.x,
	            ry = 1.0 / imageSizeScaled.y;
	
	        return new $.Point(rx, ry);
	    },
	
	
	    /**
	     * @function
	     * @param {Number} level
	     */
	    getClosestLevel: function( rect ) {
	        var i,
	            tilesPerSide,
	            tiles;
	
	        for( i = this.minLevel; i < this.maxLevel; i++ ){
	            tiles = this.getNumTiles( i );
	            tilesPerSide = new $.Point(
	              Math.floor( rect.x / this.getTileWidth(i) ),
	              Math.floor( rect.y / this.getTileHeight(i) )
	            );
	
	            if( tiles.x + 1 >= tilesPerSide.x && tiles.y + 1 >= tilesPerSide.y ){
	                break;
	            }
	        }
	        return Math.max( 0, i - 1 );
	    },
	
	    /**
	     * @function
	     * @param {Number} level
	     * @param {OpenSeadragon.Point} point
	     */
	    getTileAtPoint: function( level, point ) {
	        var pixel = point.times( this.dimensions.x ).times( this.getLevelScale(level) ),
	            tx = Math.floor( pixel.x / this.getTileWidth(level) ),
	            ty = Math.floor( pixel.y / this.getTileHeight(level) );
	
	        return new $.Point( tx, ty );
	    },
	
	    /**
	     * @function
	     * @param {Number} level
	     * @param {Number} x
	     * @param {Number} y
	     */
	    getTileBounds: function( level, x, y ) {
	        var dimensionsScaled = this.dimensions.times( this.getLevelScale( level ) ),
	            tileWidth = this.getTileWidth(level),
	            tileHeight = this.getTileHeight(level),
	            px = ( x === 0 ) ? 0 : tileWidth * x - this.tileOverlap,
	            py = ( y === 0 ) ? 0 : tileHeight * y - this.tileOverlap,
	            sx = tileWidth + ( x === 0 ? 1 : 2 ) * this.tileOverlap,
	            sy = tileHeight + ( y === 0 ? 1 : 2 ) * this.tileOverlap,
	            scale = 1.0 / dimensionsScaled.x;
	
	        sx = Math.min( sx, dimensionsScaled.x - px );
	        sy = Math.min( sy, dimensionsScaled.y - py );
	
	        return new $.Rect( px * scale, py * scale, sx * scale, sy * scale );
	    },
	
	
	    /**
	     * Responsible for retrieving, and caching the
	     * image metadata pertinent to this TileSources implementation.
	     * @function
	     * @param {String} url
	     * @throws {Error}
	     */
	    getImageInfo: function( url ) {
	        var _this = this,
	            callbackName,
	            callback,
	            readySource,
	            options,
	            urlParts,
	            filename,
	            lastDot;
	
	
	        if( url ) {
	            urlParts = url.split( '/' );
	            filename = urlParts[ urlParts.length - 1 ];
	            lastDot  = filename.lastIndexOf( '.' );
	            if ( lastDot > -1 ) {
	                urlParts[ urlParts.length - 1 ] = filename.slice( 0, lastDot );
	            }
	        }
	
	        callback = function( data ){
	            if( typeof(data) === "string" ) {
	                data = $.parseXml( data );
	            }
	            var $TileSource = $.TileSource.determineType( _this, data, url );
	            if ( !$TileSource ) {
	                /**
	                 * Raised when an error occurs loading a TileSource.
	                 *
	                 * @event open-failed
	                 * @memberof OpenSeadragon.TileSource
	                 * @type {object}
	                 * @property {OpenSeadragon.TileSource} eventSource - A reference to the TileSource which raised the event.
	                 * @property {String} message
	                 * @property {String} source
	                 * @property {?Object} userData - Arbitrary subscriber-defined object.
	                 */
	                _this.raiseEvent( 'open-failed', { message: "Unable to load TileSource", source: url } );
	                return;
	            }
	
	            options = $TileSource.prototype.configure.apply( _this, [ data, url ]);
	            if (options.ajaxWithCredentials === undefined) {
	                options.ajaxWithCredentials = _this.ajaxWithCredentials;
	            }
	
	            readySource = new $TileSource( options );
	            _this.ready = true;
	            /**
	             * Raised when a TileSource is opened and initialized.
	             *
	             * @event ready
	             * @memberof OpenSeadragon.TileSource
	             * @type {object}
	             * @property {OpenSeadragon.TileSource} eventSource - A reference to the TileSource which raised the event.
	             * @property {Object} tileSource
	             * @property {?Object} userData - Arbitrary subscriber-defined object.
	             */
	            _this.raiseEvent( 'ready', { tileSource: readySource } );
	        };
	
	        if( url.match(/\.js$/) ){
	            //TODO: Its not very flexible to require tile sources to end jsonp
	            //      request for info  with a url that ends with '.js' but for
	            //      now it's the only way I see to distinguish uniformly.
	            callbackName = url.split( '/' ).pop().replace('.js','');
	            $.jsonp({
	                url: url,
	                async: false,
	                callbackName: callbackName,
	                callback: callback
	            });
	        } else {
	            // request info via xhr asynchronously.
	            $.makeAjaxRequest( {
	                url: url,
	                withCredentials: this.ajaxWithCredentials,
	                success: function( xhr ) {
	                    var data = processResponse( xhr );
	                    callback( data );
	                },
	                error: function ( xhr, exc ) {
	                    var msg;
	
	                    /*
	                        IE < 10 will block XHR requests to different origins. Any property access on the request
	                        object will raise an exception which we'll attempt to handle by formatting the original
	                        exception rather than the second one raised when we try to access xhr.status
	                     */
	                    try {
	                        msg = "HTTP " + xhr.status + " attempting to load TileSource";
	                    } catch ( e ) {
	                        var formattedExc;
	                        if ( typeof( exc ) == "undefined" || !exc.toString ) {
	                            formattedExc = "Unknown error";
	                        } else {
	                            formattedExc = exc.toString();
	                        }
	
	                        msg = formattedExc + " attempting to load TileSource";
	                    }
	
	                    /***
	                     * Raised when an error occurs loading a TileSource.
	                     *
	                     * @event open-failed
	                     * @memberof OpenSeadragon.TileSource
	                     * @type {object}
	                     * @property {OpenSeadragon.TileSource} eventSource - A reference to the TileSource which raised the event.
	                     * @property {String} message
	                     * @property {String} source
	                     * @property {?Object} userData - Arbitrary subscriber-defined object.
	                     */
	                    _this.raiseEvent( 'open-failed', {
	                        message: msg,
	                        source: url
	                    });
	                }
	            });
	        }
	
	    },
	
	    /**
	     * Responsible determining if a the particular TileSource supports the
	     * data format ( and allowed to apply logic against the url the data was
	     * loaded from, if any ). Overriding implementations are expected to do
	     * something smart with data and / or url to determine support.  Also
	     * understand that iteration order of TileSources is not guarunteed so
	     * please make sure your data or url is expressive enough to ensure a simple
	     * and sufficient mechanisim for clear determination.
	     * @function
	     * @param {String|Object|Array|Document} data
	     * @param {String} url - the url the data was loaded
	     *      from if any.
	     * @return {Boolean}
	     */
	    supports: function( data, url ) {
	        return false;
	    },
	
	    /**
	     * Responsible for parsing and configuring the
	     * image metadata pertinent to this TileSources implementation.
	     * This method is not implemented by this class other than to throw an Error
	     * announcing you have to implement it.  Because of the variety of tile
	     * server technologies, and various specifications for building image
	     * pyramids, this method is here to allow easy integration.
	     * @function
	     * @param {String|Object|Array|Document} data
	     * @param {String} url - the url the data was loaded
	     *      from if any.
	     * @return {Object} options - A dictionary of keyword arguments sufficient
	     *      to configure this tile sources constructor.
	     * @throws {Error}
	     */
	    configure: function( data, url ) {
	        throw new Error( "Method not implemented." );
	    },
	
	    /**
	     * Responsible for retriving the url which will return an image for the
	     * region specified by the given x, y, and level components.
	     * This method is not implemented by this class other than to throw an Error
	     * announcing you have to implement it.  Because of the variety of tile
	     * server technologies, and various specifications for building image
	     * pyramids, this method is here to allow easy integration.
	     * @function
	     * @param {Number} level
	     * @param {Number} x
	     * @param {Number} y
	     * @throws {Error}
	     */
	    getTileUrl: function( level, x, y ) {
	        throw new Error( "Method not implemented." );
	    },
	
	    /**
	     * @function
	     * @param {Number} level
	     * @param {Number} x
	     * @param {Number} y
	     */
	    tileExists: function( level, x, y ) {
	        var numTiles = this.getNumTiles( level );
	        return  level >= this.minLevel &&
	                level <= this.maxLevel &&
	                x >= 0 &&
	                y >= 0 &&
	                x < numTiles.x &&
	                y < numTiles.y;
	    }
	};
	
	
	$.extend( true, $.TileSource.prototype, $.EventSource.prototype );
	
	
	/**
	 * Decides whether to try to process the response as xml, json, or hand back
	 * the text
	 * @private
	 * @inner
	 * @function
	 * @param {XMLHttpRequest} xhr - the completed network request
	 */
	function processResponse( xhr ){
	    var responseText = xhr.responseText,
	        status       = xhr.status,
	        statusText,
	        data;
	
	    if ( !xhr ) {
	        throw new Error( $.getString( "Errors.Security" ) );
	    } else if ( xhr.status !== 200 && xhr.status !== 0 ) {
	        status     = xhr.status;
	        statusText = ( status == 404 ) ?
	            "Not Found" :
	            xhr.statusText;
	        throw new Error( $.getString( "Errors.Status", status, statusText ) );
	    }
	
	    if( responseText.match(/\s*<.*/) ){
	        try{
	        data = ( xhr.responseXML && xhr.responseXML.documentElement ) ?
	            xhr.responseXML :
	            $.parseXml( responseText );
	        } catch (e){
	            data = xhr.responseText;
	        }
	    }else if( responseText.match(/\s*[\{\[].*/) ){
	        data = $.parseJSON(responseText);
	    }else{
	        data = responseText;
	    }
	    return data;
	}
	
	
	/**
	 * Determines the TileSource Implementation by introspection of OpenSeadragon
	 * namespace, calling each TileSource implementation of 'isType'
	 * @private
	 * @inner
	 * @function
	 * @param {Object|Array|Document} data - the tile source configuration object
	 * @param {String} url - the url where the tile source configuration object was
	 *      loaded from, if any.
	 */
	$.TileSource.determineType = function( tileSource, data, url ){
	    var property;
	    for( property in OpenSeadragon ){
	        if( property.match(/.+TileSource$/) &&
	            $.isFunction( OpenSeadragon[ property ] ) &&
	            $.isFunction( OpenSeadragon[ property ].prototype.supports ) &&
	            OpenSeadragon[ property ].prototype.supports.call( tileSource, data, url )
	        ){
	            return OpenSeadragon[ property ];
	        }
	    }
	
	    $.console.error( "No TileSource was able to open %s %s", url, data );
	};
	
	
	}( OpenSeadragon ));
	
	/*
	 * OpenSeadragon - DziTileSource
	 *
	 * Copyright (C) 2009 CodePlex Foundation
	 * Copyright (C) 2010-2013 OpenSeadragon contributors
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 * - Redistributions of source code must retain the above copyright notice,
	 *   this list of conditions and the following disclaimer.
	 *
	 * - Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * - Neither the name of CodePlex Foundation nor the names of its
	 *   contributors may be used to endorse or promote products derived from
	 *   this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
	 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */
	
	(function( $ ){
	
	/**
	 * @class DziTileSource
	 * @memberof OpenSeadragon
	 * @extends OpenSeadragon.TileSource
	 * @param {Number|Object} width - the pixel width of the image or the idiomatic
	 *      options object which is used instead of positional arguments.
	 * @param {Number} height
	 * @param {Number} tileSize
	 * @param {Number} tileOverlap
	 * @param {String} tilesUrl
	 * @param {String} fileFormat
	 * @param {OpenSeadragon.DisplayRect[]} displayRects
	 * @property {String} tilesUrl
	 * @property {String} fileFormat
	 * @property {OpenSeadragon.DisplayRect[]} displayRects
	 */
	$.DziTileSource = function( width, height, tileSize, tileOverlap, tilesUrl, fileFormat, displayRects, minLevel, maxLevel ) {
	    var i,
	        rect,
	        level,
	        options;
	
	    if( $.isPlainObject( width ) ){
	        options = width;
	    }else{
	        options = {
	            width: arguments[ 0 ],
	            height: arguments[ 1 ],
	            tileSize: arguments[ 2 ],
	            tileOverlap: arguments[ 3 ],
	            tilesUrl: arguments[ 4 ],
	            fileFormat: arguments[ 5 ],
	            displayRects: arguments[ 6 ],
	            minLevel: arguments[ 7 ],
	            maxLevel: arguments[ 8 ]
	        };
	    }
	
	    this._levelRects  = {};
	    this.tilesUrl     = options.tilesUrl;
	    this.fileFormat   = options.fileFormat;
	    this.displayRects = options.displayRects;
	
	    if ( this.displayRects ) {
	        for ( i = this.displayRects.length - 1; i >= 0; i-- ) {
	            rect = this.displayRects[ i ];
	            for ( level = rect.minLevel; level <= rect.maxLevel; level++ ) {
	                if ( !this._levelRects[ level ] ) {
	                    this._levelRects[ level ] = [];
	                }
	                this._levelRects[ level ].push( rect );
	            }
	        }
	    }
	
	    $.TileSource.apply( this, [ options ] );
	
	};
	
	$.extend( $.DziTileSource.prototype, $.TileSource.prototype, /** @lends OpenSeadragon.DziTileSource.prototype */{
	
	
	    /**
	     * Determine if the data and/or url imply the image service is supported by
	     * this tile source.
	     * @function
	     * @param {Object|Array} data
	     * @param {String} optional - url
	     */
	    supports: function( data, url ){
	        var ns;
	        if ( data.Image ) {
	            ns = data.Image.xmlns;
	        } else if ( data.documentElement) {
	            if ("Image" == data.documentElement.localName || "Image" == data.documentElement.tagName) {
	                ns = data.documentElement.namespaceURI;
	            }
	        }
	
	        return ( "http://schemas.microsoft.com/deepzoom/2008" == ns ||
	            "http://schemas.microsoft.com/deepzoom/2009" == ns );
	    },
	
	    /**
	     *
	     * @function
	     * @param {Object|XMLDocument} data - the raw configuration
	     * @param {String} url - the url the data was retreived from if any.
	     * @return {Object} options - A dictionary of keyword arguments sufficient
	     *      to configure this tile sources constructor.
	     */
	    configure: function( data, url ){
	
	        var options;
	
	        if( !$.isPlainObject(data) ){
	
	            options = configureFromXML( this, data );
	
	        }else{
	
	            options = configureFromObject( this, data );
	        }
	
	        if (url && !options.tilesUrl) {
	            options.tilesUrl = url.replace(
	                    /([^\/]+?)(\.(dzi|xml|js))?\/?(\?.*)?$/, '$1_files/');
	
	            if (url.search(/\.(dzi|xml|js)\?/) != -1) {
	                options.queryParams = url.match(/\?.*/);
	            }else{
	                options.queryParams = '';
	            }
	        }
	
	        return options;
	    },
	
	
	    /**
	     * @function
	     * @param {Number} level
	     * @param {Number} x
	     * @param {Number} y
	     */
	    getTileUrl: function( level, x, y ) {
	        return [ this.tilesUrl, level, '/', x, '_', y, '.', this.fileFormat, this.queryParams ].join( '' );
	    },
	
	
	    /**
	     * @function
	     * @param {Number} level
	     * @param {Number} x
	     * @param {Number} y
	     */
	    tileExists: function( level, x, y ) {
	        var rects = this._levelRects[ level ],
	            rect,
	            scale,
	            xMin,
	            yMin,
	            xMax,
	            yMax,
	            i;
	
	        if ( !rects || !rects.length ) {
	            return true;
	        }
	
	        for ( i = rects.length - 1; i >= 0; i-- ) {
	            rect = rects[ i ];
	
	            if ( level < rect.minLevel || level > rect.maxLevel ) {
	                continue;
	            }
	
	            scale = this.getLevelScale( level );
	            xMin = rect.x * scale;
	            yMin = rect.y * scale;
	            xMax = xMin + rect.width * scale;
	            yMax = yMin + rect.height * scale;
	
	            xMin = Math.floor( xMin / this.tileSize );
	            yMin = Math.floor( yMin / this.tileSize );
	            xMax = Math.ceil( xMax / this.tileSize );
	            yMax = Math.ceil( yMax / this.tileSize );
	
	            if ( xMin <= x && x < xMax && yMin <= y && y < yMax ) {
	                return true;
	            }
	        }
	
	        return false;
	    }
	});
	
	
	/**
	 * @private
	 * @inner
	 * @function
	 */
	function configureFromXML( tileSource, xmlDoc ){
	
	    if ( !xmlDoc || !xmlDoc.documentElement ) {
	        throw new Error( $.getString( "Errors.Xml" ) );
	    }
	
	    var root           = xmlDoc.documentElement,
	        rootName       = root.localName || root.tagName,
	        ns             = xmlDoc.documentElement.namespaceURI,
	        configuration  = null,
	        displayRects   = [],
	        dispRectNodes,
	        dispRectNode,
	        rectNode,
	        sizeNode,
	        i;
	
	    if ( rootName == "Image" ) {
	
	        try {
	            sizeNode = root.getElementsByTagName("Size" )[ 0 ];
	            if (sizeNode === undefined) {
	                sizeNode = root.getElementsByTagNameNS(ns, "Size" )[ 0 ];
	            }
	
	            configuration = {
	                Image: {
	                    xmlns:       "http://schemas.microsoft.com/deepzoom/2008",
	                    Url:         root.getAttribute( "Url" ),
	                    Format:      root.getAttribute( "Format" ),
	                    DisplayRect: null,
	                    Overlap:     parseInt( root.getAttribute( "Overlap" ), 10 ),
	                    TileSize:    parseInt( root.getAttribute( "TileSize" ), 10 ),
	                    Size: {
	                        Height: parseInt( sizeNode.getAttribute( "Height" ), 10 ),
	                        Width:  parseInt( sizeNode.getAttribute( "Width" ), 10 )
	                    }
	                }
	            };
	
	            if ( !$.imageFormatSupported( configuration.Image.Format ) ) {
	                throw new Error(
	                    $.getString( "Errors.ImageFormat", configuration.Image.Format.toUpperCase() )
	                );
	            }
	
	            dispRectNodes = root.getElementsByTagName("DisplayRect" );
	            if (dispRectNodes === undefined) {
	                dispRectNodes = root.getElementsByTagNameNS(ns, "DisplayRect" )[ 0 ];
	            }
	
	            for ( i = 0; i < dispRectNodes.length; i++ ) {
	                dispRectNode = dispRectNodes[ i ];
	                rectNode     = dispRectNode.getElementsByTagName("Rect" )[ 0 ];
	                if (rectNode === undefined) {
	                    rectNode = dispRectNode.getElementsByTagNameNS(ns, "Rect" )[ 0 ];
	                }
	
	                displayRects.push({
	                    Rect: {
	                        X: parseInt( rectNode.getAttribute( "X" ), 10 ),
	                        Y: parseInt( rectNode.getAttribute( "Y" ), 10 ),
	                        Width: parseInt( rectNode.getAttribute( "Width" ), 10 ),
	                        Height: parseInt( rectNode.getAttribute( "Height" ), 10 ),
	                        MinLevel: parseInt( dispRectNode.getAttribute( "MinLevel" ), 10 ),
	                        MaxLevel: parseInt( dispRectNode.getAttribute( "MaxLevel" ), 10 )
	                    }
	                });
	            }
	
	            if( displayRects.length ){
	                configuration.Image.DisplayRect = displayRects;
	            }
	
	            return configureFromObject( tileSource, configuration );
	
	        } catch ( e ) {
	            throw (e instanceof Error) ?
	                e :
	                new Error( $.getString("Errors.Dzi") );
	        }
	    } else if ( rootName == "Collection" ) {
	        throw new Error( $.getString( "Errors.Dzc" ) );
	    } else if ( rootName == "Error" ) {
	        var messageNode = root.getElementsByTagName("Message")[0];
	        var message = messageNode.firstChild.nodeValue;
	        throw new Error(message);
	    }
	
	    throw new Error( $.getString( "Errors.Dzi" ) );
	}
	
	/**
	 * @private
	 * @inner
	 * @function
	 */
	function configureFromObject( tileSource, configuration ){
	    var imageData     = configuration.Image,
	        tilesUrl      = imageData.Url,
	        fileFormat    = imageData.Format,
	        sizeData      = imageData.Size,
	        dispRectData  = imageData.DisplayRect || [],
	        width         = parseInt( sizeData.Width, 10 ),
	        height        = parseInt( sizeData.Height, 10 ),
	        tileSize      = parseInt( imageData.TileSize, 10 ),
	        tileOverlap   = parseInt( imageData.Overlap, 10 ),
	        displayRects  = [],
	        rectData,
	        i;
	
	    //TODO: need to figure out out to better handle image format compatibility
	    //      which actually includes additional file formats like xml and pdf
	    //      and plain text for various tilesource implementations to avoid low
	    //      level errors.
	    //
	    //      For now, just don't perform the check.
	    //
	    /*if ( !imageFormatSupported( fileFormat ) ) {
	        throw new Error(
	            $.getString( "Errors.ImageFormat", fileFormat.toUpperCase() )
	        );
	    }*/
	
	    for ( i = 0; i < dispRectData.length; i++ ) {
	        rectData = dispRectData[ i ].Rect;
	
	        displayRects.push( new $.DisplayRect(
	            parseInt( rectData.X, 10 ),
	            parseInt( rectData.Y, 10 ),
	            parseInt( rectData.Width, 10 ),
	            parseInt( rectData.Height, 10 ),
	            parseInt( rectData.MinLevel, 10 ),
	            parseInt( rectData.MaxLevel, 10 )
	        ));
	    }
	
	    return $.extend(true, {
	        width: width, /* width *required */
	        height: height, /* height *required */
	        tileSize: tileSize, /* tileSize *required */
	        tileOverlap: tileOverlap, /* tileOverlap *required */
	        minLevel: null, /* minLevel */
	        maxLevel: null, /* maxLevel */
	        tilesUrl: tilesUrl, /* tilesUrl */
	        fileFormat: fileFormat, /* fileFormat */
	        displayRects: displayRects /* displayRects */
	    }, configuration );
	
	}
	
	}( OpenSeadragon ));
	
	/*
	 * OpenSeadragon - IIIFTileSource
	 *
	 * Copyright (C) 2009 CodePlex Foundation
	 * Copyright (C) 2010-2013 OpenSeadragon contributors
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 * - Redistributions of source code must retain the above copyright notice,
	 *   this list of conditions and the following disclaimer.
	 *
	 * - Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * - Neither the name of CodePlex Foundation nor the names of its
	 *   contributors may be used to endorse or promote products derived from
	 *   this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
	 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */
	
	(function( $ ){
	
	/**
	 * @class IIIFTileSource
	 * @classdesc A client implementation of the International Image Interoperability Framework
	 * Format: Image API 1.0 - 2.1
	 *
	 * @memberof OpenSeadragon
	 * @extends OpenSeadragon.TileSource
	 * @see http://iiif.io/api/image/
	 */
	$.IIIFTileSource = function( options ){
	
	
	    $.extend( true, this, options );
	
	    if ( !( this.height && this.width && this['@id'] ) ) {
	        throw new Error( 'IIIF required parameters not provided.' );
	    }
	
	    options.tileSizePerScaleFactor = {};
	
	    // N.B. 2.0 renamed scale_factors to scaleFactors
	    if ( this.tile_width && this.tile_height ) {
	        options.tileWidth = this.tile_width;
	        options.tileHeight = this.tile_height;
	    } else if ( this.tile_width ) {
	        options.tileSize = this.tile_width;
	    } else if ( this.tile_height ) {
	        options.tileSize = this.tile_height;
	    } else if ( this.tiles ) {
	        // Version 2.0 forwards
	        if ( this.tiles.length == 1 ) {
	            options.tileWidth  = this.tiles[0].width;
	            // Use height if provided, otherwise assume square tiles and use width.
	            options.tileHeight = this.tiles[0].height || this.tiles[0].width;
	            this.scale_factors = this.tiles[0].scaleFactors;
	        } else {
	            // Multiple tile sizes at different levels
	            this.scale_factors = [];
	            for (var t = 0; t < this.tiles.length; t++ ) {
	                for (var sf = 0; sf < this.tiles[t].scaleFactors.length; sf++) {
	                    var scaleFactor = this.tiles[t].scaleFactors[sf];
	                    this.scale_factors.push(scaleFactor);
	                    options.tileSizePerScaleFactor[scaleFactor] = {
	                        width: this.tiles[t].width,
	                        height: this.tiles[t].height || this.tiles[t].width
	                    };
	                }
	            }
	        }
	    } else if ( canBeTiled(options.profile) ) {
	        // use the largest of tileOptions that is smaller than the short dimension
	        var shortDim = Math.min( this.height, this.width ),
	            tileOptions = [256,512,1024],
	            smallerTiles = [];
	
	        for ( var c = 0; c < tileOptions.length; c++ ) {
	            if ( tileOptions[c] <= shortDim ) {
	                smallerTiles.push( tileOptions[c] );
	            }
	        }
	
	        if ( smallerTiles.length > 0 ) {
	            options.tileSize = Math.max.apply( null, smallerTiles );
	        } else {
	            // If we're smaller than 256, just use the short side.
	            options.tileSize = shortDim;
	        }
	    } else if (this.sizes && this.sizes.length > 0) {
	        // This info.json can't be tiled, but we can still construct a legacy pyramid from the sizes array. 
	        // In this mode, IIIFTileSource will call functions from the abstract baseTileSource or the 
	        // LegacyTileSource instead of performing IIIF tiling.      
	        this.emulateLegacyImagePyramid = true;
	        
	        options.levels = constructLevels( this );
	        // use the largest available size to define tiles
	        $.extend( true, options, {
	            width: options.levels[ options.levels.length - 1 ].width,
	            height: options.levels[ options.levels.length - 1 ].height,
	            tileSize: Math.max( options.height, options.width ),
	            tileOverlap: 0,
	            minLevel: 0,
	            maxLevel: options.levels.length - 1
	        });
	        this.levels = options.levels;
	    } else {
	        $.console.error("Nothing in the info.json to construct image pyramids from");
	    }
	
	    if (!options.maxLevel && !this.emulateLegacyImagePyramid) {
	        if (!this.scale_factors) {
	            options.maxLevel = Number(Math.ceil(Math.log(Math.max(this.width, this.height), 2)));
	        } else {
	            options.maxLevel = Math.floor(Math.pow(Math.max.apply(null, this.scale_factors), 0.5));
	        }
	    }
	
	    $.TileSource.apply( this, [ options ] );
	};
	
	$.extend( $.IIIFTileSource.prototype, $.TileSource.prototype, /** @lends OpenSeadragon.IIIFTileSource.prototype */{
	    /**
	     * Determine if the data and/or url imply the image service is supported by
	     * this tile source.
	     * @function
	     * @param {Object|Array} data
	     * @param {String} optional - url
	     */
	     
	    supports: function( data, url ) {
	        // Version 2.0 and forwards
	        if (data.protocol && data.protocol == 'http://iiif.io/api/image') {
	            return true;
	        // Version 1.1
	        } else if ( data['@context'] && (
	            data['@context'] == "http://library.stanford.edu/iiif/image-api/1.1/context.json" ||
	            data['@context'] == "http://iiif.io/api/image/1/context.json") ) {
	            // N.B. the iiif.io context is wrong, but where the representation lives so likely to be used
	            return true;
	
	        // Version 1.0
	        } else if ( data.profile &&
	            data.profile.indexOf("http://library.stanford.edu/iiif/image-api/compliance.html") === 0) {
	            return true;
	        } else if ( data.identifier && data.width && data.height ) {
	            return true;
	        } else if ( data.documentElement &&
	            "info" == data.documentElement.tagName &&
	            "http://library.stanford.edu/iiif/image-api/ns/" ==
	                data.documentElement.namespaceURI) {
	            return true;
	
	        // Not IIIF
	        } else {
	            return false;
	        }
	    },
	
	    /**
	     *
	     * @function
	     * @param {Object} data - the raw configuration
	     * @example <caption>IIIF 1.1 Info Looks like this</caption>
	     * {
	     *   "@context" : "http://library.stanford.edu/iiif/image-api/1.1/context.json",
	     *   "@id" : "http://iiif.example.com/prefix/1E34750D-38DB-4825-A38A-B60A345E591C",
	     *   "width" : 6000,
	     *   "height" : 4000,
	     *   "scale_factors" : [ 1, 2, 4 ],
	     *   "tile_width" : 1024,
	     *   "tile_height" : 1024,
	     *   "formats" : [ "jpg", "png" ],
	     *   "qualities" : [ "native", "grey" ],
	     *   "profile" : "http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level0"
	     * }
	     */
	    configure: function( data, url ){
	        // Try to deduce our version and fake it upwards if needed
	        if ( !$.isPlainObject(data) ) {
	            var options = configureFromXml10( data );
	            options['@context'] = "http://iiif.io/api/image/1.0/context.json";
	            options['@id'] = url.replace('/info.xml', '');
	            return options;
	        } else if ( !data['@context'] ) {
	            data['@context'] = 'http://iiif.io/api/image/1.0/context.json';
	            data['@id'] = url.replace('/info.json', '');
	            return data;
	        } else {
	            return data;
	        }
	    },
	
	    /**
	     * Return the tileWidth for the given level.
	     * @function
	     * @param {Number} level
	     */
	    getTileWidth: function( level ) {
	
	        if(this.emulateLegacyImagePyramid) {
	            return $.TileSource.prototype.getTileWidth.call(this, level);
	        }
	
	        var scaleFactor = Math.pow(2, this.maxLevel - level);
	
	        if (this.tileSizePerScaleFactor && this.tileSizePerScaleFactor[scaleFactor]) {
	            return this.tileSizePerScaleFactor[scaleFactor].width;
	        }
	        return this._tileWidth;
	    },
	
	    /**
	     * Return the tileHeight for the given level.
	     * @function
	     * @param {Number} level
	     */
	    getTileHeight: function( level ) {
	
	        if(this.emulateLegacyImagePyramid) {
	            return $.TileSource.prototype.getTileHeight.call(this, level);
	        }
	
	        var scaleFactor = Math.pow(2, this.maxLevel - level);
	
	        if (this.tileSizePerScaleFactor && this.tileSizePerScaleFactor[scaleFactor]) {
	            return this.tileSizePerScaleFactor[scaleFactor].height;
	        }
	        return this._tileHeight;
	    },
	
	    /**
	     * @function
	     * @param {Number} level
	     */
	    getLevelScale: function ( level ) {
	
	        if(this.emulateLegacyImagePyramid) {
	            var levelScale = NaN;
	            if (this.levels.length > 0 && level >= this.minLevel && level <= this.maxLevel) {
	                levelScale =
	                    this.levels[level].width /
	                    this.levels[this.maxLevel].width;
	            }
	            return levelScale;
	        }
	
	        return $.TileSource.prototype.getLevelScale.call(this, level);
	    },
	
	    /**
	     * @function
	     * @param {Number} level
	     */
	    getNumTiles: function( level ) {
	
	        if(this.emulateLegacyImagePyramid) {
	            var scale = this.getLevelScale(level);
	            if (scale) {
	                return new $.Point(1, 1);
	            } else {
	                return new $.Point(0, 0);
	            }
	        }
	
	        return $.TileSource.prototype.getNumTiles.call(this, level);
	    },
	
	
	    /**
	     * @function
	     * @param {Number} level
	     * @param {OpenSeadragon.Point} point
	     */
	    getTileAtPoint: function( level, point ) {
	
	        if(this.emulateLegacyImagePyramid) {
	            return new $.Point(0, 0);
	        }
	
	        return $.TileSource.prototype.getTileAtPoint.call(this, level, point);
	    },
	
	
	    /**
	     * Responsible for retrieving the url which will return an image for the
	     * region specified by the given x, y, and level components.
	     * @function
	     * @param {Number} level - z index
	     * @param {Number} x
	     * @param {Number} y
	     * @throws {Error}
	     */
	    getTileUrl: function( level, x, y ){
	
	        if(this.emulateLegacyImagePyramid) {
	            var url = null;
	            if ( this.levels.length > 0 && level >= this.minLevel && level <= this.maxLevel ) {
	                url = this.levels[ level ].url;
	            }
	            return url;
	        }
	
	        //# constants
	        var IIIF_ROTATION = '0',
	            //## get the scale (level as a decimal)
	            scale = Math.pow( 0.5, this.maxLevel - level ),
	
	            //# image dimensions at this level
	            levelWidth = Math.ceil( this.width * scale ),
	            levelHeight = Math.ceil( this.height * scale ),
	
	            //## iiif region
	            tileWidth,
	            tileHeight,
	            iiifTileSizeWidth,
	            iiifTileSizeHeight,
	            iiifRegion,
	            iiifTileX,
	            iiifTileY,
	            iiifTileW,
	            iiifTileH,
	            iiifSize,
	            iiifQuality,
	            uri;
	
	        tileWidth = this.getTileWidth(level);
	        tileHeight = this.getTileHeight(level);
	        iiifTileSizeWidth = Math.ceil( tileWidth / scale );
	        iiifTileSizeHeight = Math.ceil( tileHeight / scale );
	
	        if ( this['@context'].indexOf('/1.0/context.json') > -1 ||
	             this['@context'].indexOf('/1.1/context.json') > -1 ||
	             this['@context'].indexOf('/1/context.json') > -1 ) {
	            iiifQuality = "native.jpg";
	        } else {
	            iiifQuality = "default.jpg";
	        }
	
	        if ( levelWidth < tileWidth && levelHeight < tileHeight ){
	            iiifSize = levelWidth + ",";
	            iiifRegion = 'full';
	        } else {
	            iiifTileX = x * iiifTileSizeWidth;
	            iiifTileY = y * iiifTileSizeHeight;
	            iiifTileW = Math.min( iiifTileSizeWidth, this.width - iiifTileX );
	            iiifTileH = Math.min( iiifTileSizeHeight, this.height - iiifTileY );
	            iiifSize = Math.ceil( iiifTileW * scale ) + ",";
	            iiifRegion = [ iiifTileX, iiifTileY, iiifTileW, iiifTileH ].join( ',' );
	        }
	        uri = [ this['@id'], iiifRegion, iiifSize, IIIF_ROTATION, iiifQuality ].join( '/' );
	
	        return uri;
	    }
	
	  });
	
	    /**
	     * Determine whether arbitrary tile requests can be made against a service with the given profile
	     * @function
	     * @param {object} profile - IIIF profile object
	     * @throws {Error}
	     */
	    function canBeTiled (profile ) {
	        var level0Profiles = [
	            "http://library.stanford.edu/iiif/image-api/compliance.html#level0",
	            "http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level0",
	            "http://iiif.io/api/image/2/level0.json"
	        ];
	        var isLevel0 = (level0Profiles.indexOf(profile[0]) != -1);
	        return !isLevel0 || (profile.indexOf("sizeByW") != -1);
	    }
	
	    /**
	     * Build the legacy pyramid URLs (one tile per level)
	     * @function
	     * @param {object} options - infoJson
	     * @throws {Error}
	     */
	    function constructLevels(options) {
	        var levels = [];
	        for(var i=0; i<options.sizes.length; i++) {
	            levels.push({
	                url: options['@id'] + '/full/' + options.sizes[i].width + ',/0/default.jpg',
	                width: options.sizes[i].width,
	                height: options.sizes[i].height
	            });
	        }
	        return levels.sort(function(a,b){return a.width - b.width;});
	    }
	
	
	    function configureFromXml10(xmlDoc) {
	        //parse the xml
	        if ( !xmlDoc || !xmlDoc.documentElement ) {
	            throw new Error( $.getString( "Errors.Xml" ) );
	        }
	
	        var root            = xmlDoc.documentElement,
	            rootName        = root.tagName,
	            configuration   = null;
	
	        if ( rootName == "info" ) {
	            try {
	                configuration = {};
	                parseXML10( root, configuration );
	                return configuration;
	
	            } catch ( e ) {
	                throw (e instanceof Error) ?
	                    e :
	                    new Error( $.getString("Errors.IIIF") );
	            }
	        }
	        throw new Error( $.getString( "Errors.IIIF" ) );
	    }
	
	    function parseXML10( node, configuration, property ) {
	        var i,
	            value;
	        if ( node.nodeType == 3 && property ) {//text node
	            value = node.nodeValue.trim();
	            if( value.match(/^\d*$/)){
	                value = Number( value );
	            }
	            if( !configuration[ property ] ){
	                configuration[ property ] = value;
	            }else{
	                if( !$.isArray( configuration[ property ] ) ){
	                    configuration[ property ] = [ configuration[ property ] ];
	                }
	                configuration[ property ].push( value );
	            }
	        } else if( node.nodeType == 1 ){
	            for( i = 0; i < node.childNodes.length; i++ ){
	                parseXML10( node.childNodes[ i ], configuration, node.nodeName );
	            }
	        }
	    }
	
	
	
	}( OpenSeadragon ));
	
	/*
	 * OpenSeadragon - OsmTileSource
	 *
	 * Copyright (C) 2009 CodePlex Foundation
	 * Copyright (C) 2010-2013 OpenSeadragon contributors
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 * - Redistributions of source code must retain the above copyright notice,
	 *   this list of conditions and the following disclaimer.
	 *
	 * - Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * - Neither the name of CodePlex Foundation nor the names of its
	 *   contributors may be used to endorse or promote products derived from
	 *   this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
	 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */
	
	/*
	 * Derived from the OSM tile source in Rainer Simon's seajax-utils project
	 * <http://github.com/rsimon/seajax-utils>.  Rainer Simon has contributed
	 * the included code to the OpenSeadragon project under the New BSD license;
	 * see <https://github.com/openseadragon/openseadragon/issues/58>.
	 */
	
	
	(function( $ ){
	
	/**
	 * @class OsmTileSource
	 * @classdesc A tilesource implementation for OpenStreetMap.<br><br>
	 *
	 * Note 1. Zoomlevels. Deep Zoom and OSM define zoom levels differently. In  Deep
	 * Zoom, level 0 equals an image of 1x1 pixels. In OSM, level 0 equals an image of
	 * 256x256 levels (see http://gasi.ch/blog/inside-deep-zoom-2). I.e. there is a
	 * difference of log2(256)=8 levels.<br><br>
	 *
	 * Note 2. Image dimension. According to the OSM Wiki
	 * (http://wiki.openstreetmap.org/wiki/Slippy_map_tilenames#Zoom_levels)
	 * the highest Mapnik zoom level has 256.144x256.144 tiles, with a 256x256
	 * pixel size. I.e. the Deep Zoom image dimension is 65.572.864x65.572.864
	 * pixels.
	 *
	 * @memberof OpenSeadragon
	 * @extends OpenSeadragon.TileSource
	 * @param {Number|Object} width - the pixel width of the image or the idiomatic
	 *      options object which is used instead of positional arguments.
	 * @param {Number} height
	 * @param {Number} tileSize
	 * @param {Number} tileOverlap
	 * @param {String} tilesUrl
	 */
	$.OsmTileSource = function( width, height, tileSize, tileOverlap, tilesUrl ) {
	    var options;
	
	    if( $.isPlainObject( width ) ){
	        options = width;
	    }else{
	        options = {
	            width: arguments[0],
	            height: arguments[1],
	            tileSize: arguments[2],
	            tileOverlap: arguments[3],
	            tilesUrl: arguments[4]
	        };
	    }
	    //apply default setting for standard public OpenStreatMaps service
	    //but allow them to be specified so fliks can host there own instance
	    //or apply against other services supportting the same standard
	    if( !options.width || !options.height ){
	        options.width = 65572864;
	        options.height = 65572864;
	    }
	    if( !options.tileSize ){
	        options.tileSize = 256;
	        options.tileOverlap = 0;
	    }
	    if( !options.tilesUrl ){
	        options.tilesUrl = "http://tile.openstreetmap.org/";
	    }
	    options.minLevel = 8;
	
	    $.TileSource.apply( this, [ options ] );
	
	};
	
	$.extend( $.OsmTileSource.prototype, $.TileSource.prototype, /** @lends OpenSeadragon.OsmTileSource.prototype */{
	
	
	    /**
	     * Determine if the data and/or url imply the image service is supported by
	     * this tile source.
	     * @function
	     * @param {Object|Array} data
	     * @param {String} optional - url
	     */
	    supports: function( data, url ){
	        return (
	            data.type &&
	            "openstreetmaps" == data.type
	        );
	    },
	
	    /**
	     *
	     * @function
	     * @param {Object} data - the raw configuration
	     * @param {String} url - the url the data was retreived from if any.
	     * @return {Object} options - A dictionary of keyword arguments sufficient
	     *      to configure this tile sources constructor.
	     */
	    configure: function( data, url ){
	        return data;
	    },
	
	
	    /**
	     * @function
	     * @param {Number} level
	     * @param {Number} x
	     * @param {Number} y
	     */
	    getTileUrl: function( level, x, y ) {
	        return this.tilesUrl + (level - 8) + "/" + x + "/" + y + ".png";
	    }
	});
	
	
	}( OpenSeadragon ));
	
	/*
	 * OpenSeadragon - TmsTileSource
	 *
	 * Copyright (C) 2009 CodePlex Foundation
	 * Copyright (C) 2010-2013 OpenSeadragon contributors
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 * - Redistributions of source code must retain the above copyright notice,
	 *   this list of conditions and the following disclaimer.
	 *
	 * - Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * - Neither the name of CodePlex Foundation nor the names of its
	 *   contributors may be used to endorse or promote products derived from
	 *   this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
	 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */
	
	/*
	 * Derived from the TMS tile source in Rainer Simon's seajax-utils project
	 * <http://github.com/rsimon/seajax-utils>.  Rainer Simon has contributed
	 * the included code to the OpenSeadragon project under the New BSD license;
	 * see <https://github.com/openseadragon/openseadragon/issues/58>.
	 */
	
	
	(function( $ ){
	
	/**
	 * @class TmsTileSource
	 * @classdesc A tilesource implementation for Tiled Map Services (TMS).
	 * TMS tile scheme ( [ as supported by OpenLayers ] is described here
	 * ( http://openlayers.org/dev/examples/tms.html ).
	 *
	 * @memberof OpenSeadragon
	 * @extends OpenSeadragon.TileSource
	 * @param {Number|Object} width - the pixel width of the image or the idiomatic
	 *      options object which is used instead of positional arguments.
	 * @param {Number} height
	 * @param {Number} tileSize
	 * @param {Number} tileOverlap
	 * @param {String} tilesUrl
	 */
	$.TmsTileSource = function( width, height, tileSize, tileOverlap, tilesUrl ) {
	    var options;
	
	    if( $.isPlainObject( width ) ){
	        options = width;
	    }else{
	        options = {
	            width: arguments[0],
	            height: arguments[1],
	            tileSize: arguments[2],
	            tileOverlap: arguments[3],
	            tilesUrl: arguments[4]
	        };
	    }
	    // TMS has integer multiples of 256 for width/height and adds buffer
	    // if necessary -> account for this!
	    var bufferedWidth = Math.ceil(options.width / 256) * 256,
	        bufferedHeight = Math.ceil(options.height / 256) * 256,
	        max;
	
	    // Compute number of zoomlevels in this tileset
	    if (bufferedWidth > bufferedHeight) {
	        max = bufferedWidth / 256;
	    } else {
	        max = bufferedHeight / 256;
	    }
	    options.maxLevel = Math.ceil(Math.log(max)/Math.log(2)) - 1;
	    options.tileSize = 256;
	    options.width = bufferedWidth;
	    options.height = bufferedHeight;
	
	    $.TileSource.apply( this, [ options ] );
	
	};
	
	$.extend( $.TmsTileSource.prototype, $.TileSource.prototype, /** @lends OpenSeadragon.TmsTileSource.prototype */{
	
	
	    /**
	     * Determine if the data and/or url imply the image service is supported by
	     * this tile source.
	     * @function
	     * @param {Object|Array} data
	     * @param {String} optional - url
	     */
	    supports: function( data, url ){
	        return ( data.type && "tiledmapservice" == data.type );
	    },
	
	    /**
	     *
	     * @function
	     * @param {Object} data - the raw configuration
	     * @param {String} url - the url the data was retreived from if any.
	     * @return {Object} options - A dictionary of keyword arguments sufficient
	     *      to configure this tile sources constructor.
	     */
	    configure: function( data, url ){
	        return data;
	    },
	
	
	    /**
	     * @function
	     * @param {Number} level
	     * @param {Number} x
	     * @param {Number} y
	     */
	    getTileUrl: function( level, x, y ) {
	        // Convert from Deep Zoom definition to TMS zoom definition
	        var yTiles = this.getNumTiles( level ).y - 1;
	
	        return this.tilesUrl + level + "/" + x + "/" +  (yTiles - y) + ".png";
	    }
	});
	
	
	}( OpenSeadragon ));
	
	/*
	 * OpenSeadragon - LegacyTileSource
	 *
	 * Copyright (C) 2009 CodePlex Foundation
	 * Copyright (C) 2010-2013 OpenSeadragon contributors
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 * - Redistributions of source code must retain the above copyright notice,
	 *   this list of conditions and the following disclaimer.
	 *
	 * - Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * - Neither the name of CodePlex Foundation nor the names of its
	 *   contributors may be used to endorse or promote products derived from
	 *   this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
	 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */
	
	(function( $ ){
	
	/**
	 * @class LegacyTileSource
	 * @classdesc The LegacyTileSource allows simple, traditional image pyramids to be loaded
	 * into an OpenSeadragon Viewer.  Basically, this translates to the historically
	 * common practice of starting with a 'master' image, maybe a tiff for example,
	 * and generating a set of 'service' images like one or more thumbnails, a medium
	 * resolution image and a high resolution image in standard web formats like
	 * png or jpg.
	 *
	 * @memberof OpenSeadragon
	 * @extends OpenSeadragon.TileSource
	 * @param {Array} levels An array of file descriptions, each is an object with
	 *      a 'url', a 'width', and a 'height'.  Overriding classes can expect more
	 *      properties but these properties are sufficient for this implementation.
	 *      Additionally, the levels are required to be listed in order from
	 *      smallest to largest.
	 * @property {Number} aspectRatio
	 * @property {Number} dimensions
	 * @property {Number} tileSize
	 * @property {Number} tileOverlap
	 * @property {Number} minLevel
	 * @property {Number} maxLevel
	 * @property {Array}  levels
	 */
	$.LegacyTileSource = function( levels ) {
	
	    var options,
	        width,
	        height;
	
	    if( $.isArray( levels ) ){
	        options = {
	            type: 'legacy-image-pyramid',
	            levels: levels
	        };
	    }
	
	    //clean up the levels to make sure we support all formats
	    options.levels = filterFiles( options.levels );
	
	    if ( options.levels.length > 0 ) {
	        width = options.levels[ options.levels.length - 1 ].width;
	        height = options.levels[ options.levels.length - 1 ].height;
	    }
	    else {
	        width = 0;
	        height = 0;
	        $.console.error( "No supported image formats found" );
	    }
	
	    $.extend( true, options, {
	        width: width,
	        height: height,
	        tileSize: Math.max( height, width ),
	        tileOverlap: 0,
	        minLevel: 0,
	        maxLevel: options.levels.length > 0 ? options.levels.length - 1 : 0
	    } );
	
	    $.TileSource.apply( this, [ options ] );
	
	    this.levels = options.levels;
	};
	
	$.extend( $.LegacyTileSource.prototype, $.TileSource.prototype, /** @lends OpenSeadragon.LegacyTileSource.prototype */{
	    /**
	     * Determine if the data and/or url imply the image service is supported by
	     * this tile source.
	     * @function
	     * @param {Object|Array} data
	     * @param {String} optional - url
	     */
	    supports: function( data, url ){
	        return (
	            data.type &&
	            "legacy-image-pyramid" == data.type
	        ) || (
	            data.documentElement &&
	            "legacy-image-pyramid" == data.documentElement.getAttribute('type')
	        );
	    },
	
	
	    /**
	     *
	     * @function
	     * @param {Object|XMLDocument} configuration - the raw configuration
	     * @param {String} dataUrl - the url the data was retreived from if any.
	     * @return {Object} options - A dictionary of keyword arguments sufficient
	     *      to configure this tile sources constructor.
	     */
	    configure: function( configuration, dataUrl ){
	
	        var options;
	
	        if( !$.isPlainObject(configuration) ){
	
	            options = configureFromXML( this, configuration );
	
	        }else{
	
	            options = configureFromObject( this, configuration );
	        }
	
	        return options;
	
	    },
	
	    /**
	     * @function
	     * @param {Number} level
	     */
	    getLevelScale: function ( level ) {
	        var levelScale = NaN;
	        if ( this.levels.length > 0 && level >= this.minLevel && level <= this.maxLevel ) {
	            levelScale =
	                this.levels[ level ].width /
	                this.levels[ this.maxLevel ].width;
	        }
	        return levelScale;
	    },
	
	    /**
	     * @function
	     * @param {Number} level
	     */
	    getNumTiles: function( level ) {
	        var scale = this.getLevelScale( level );
	        if ( scale ){
	            return new $.Point( 1, 1 );
	        } else {
	            return new $.Point( 0, 0 );
	        }
	    },
	
	    /**
	     * @function
	     * @param {Number} level
	     * @param {OpenSeadragon.Point} point
	     */
	    getTileAtPoint: function( level, point ) {
	        return new $.Point( 0, 0 );
	    },
	
	
	    /**
	     * This method is not implemented by this class other than to throw an Error
	     * announcing you have to implement it.  Because of the variety of tile
	     * server technologies, and various specifications for building image
	     * pyramids, this method is here to allow easy integration.
	     * @function
	     * @param {Number} level
	     * @param {Number} x
	     * @param {Number} y
	     * @throws {Error}
	     */
	    getTileUrl: function ( level, x, y ) {
	        var url = null;
	        if ( this.levels.length > 0 && level >= this.minLevel && level <= this.maxLevel ) {
	            url = this.levels[ level ].url;
	        }
	        return url;
	    }
	} );
	
	/**
	 * This method removes any files from the Array which dont conform to our
	 * basic requirements for a 'level' in the LegacyTileSource.
	 * @private
	 * @inner
	 * @function
	 */
	function filterFiles( files ){
	    var filtered = [],
	        file,
	        i;
	    for( i = 0; i < files.length; i++ ){
	        file = files[ i ];
	        if( file.height &&
	            file.width &&
	            file.url && (
	                file.url.toLowerCase().match(/^.*\.(png|jpg|jpeg|gif)(?:\?.*)?$/) || (
	                    file.mimetype &&
	                    file.mimetype.toLowerCase().match(/^.*\/(png|jpg|jpeg|gif)$/)
	                )
	            ) ){
	            //This is sufficient to serve as a level
	            filtered.push({
	                url: file.url,
	                width: Number( file.width ),
	                height: Number( file.height )
	            });
	        }
	        else {
	            $.console.error( 'Unsupported image format: %s', file.url ? file.url : '<no URL>' );
	        }
	    }
	
	    return filtered.sort(function(a,b){
	        return a.height - b.height;
	    });
	
	}
	
	/**
	 * @private
	 * @inner
	 * @function
	 */
	function configureFromXML( tileSource, xmlDoc ){
	
	    if ( !xmlDoc || !xmlDoc.documentElement ) {
	        throw new Error( $.getString( "Errors.Xml" ) );
	    }
	
	    var root         = xmlDoc.documentElement,
	        rootName     = root.tagName,
	        conf         = null,
	        levels       = [],
	        level,
	        i;
	
	    if ( rootName == "image" ) {
	
	        try {
	            conf = {
	                type:        root.getAttribute( "type" ),
	                levels:      []
	            };
	
	            levels = root.getElementsByTagName( "level" );
	            for ( i = 0; i < levels.length; i++ ) {
	                level = levels[ i ];
	
	                conf.levels .push({
	                    url:    level.getAttribute( "url" ),
	                    width:  parseInt( level.getAttribute( "width" ), 10 ),
	                    height: parseInt( level.getAttribute( "height" ), 10 )
	                });
	            }
	
	            return configureFromObject( tileSource, conf );
	
	        } catch ( e ) {
	            throw (e instanceof Error) ?
	                e :
	                new Error( 'Unknown error parsing Legacy Image Pyramid XML.' );
	        }
	    } else if ( rootName == "collection" ) {
	        throw new Error( 'Legacy Image Pyramid Collections not yet supported.' );
	    } else if ( rootName == "error" ) {
	        throw new Error( 'Error: ' + xmlDoc );
	    }
	
	    throw new Error( 'Unknown element ' + rootName );
	}
	
	/**
	 * @private
	 * @inner
	 * @function
	 */
	function configureFromObject( tileSource, configuration ){
	
	    return configuration.levels;
	
	}
	
	}( OpenSeadragon ));
	
	/*
	 * OpenSeadragon - ImageTileSource
	 *
	 * Copyright (C) 2009 CodePlex Foundation
	 * Copyright (C) 2010-2013 OpenSeadragon contributors
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 * - Redistributions of source code must retain the above copyright notice,
	 *   this list of conditions and the following disclaimer.
	 *
	 * - Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * - Neither the name of CodePlex Foundation nor the names of its
	 *   contributors may be used to endorse or promote products derived from
	 *   this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
	 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */
	
	(function ($) {
	
	    /**
	     * @class ImageTileSource
	     * @classdesc The ImageTileSource allows a simple image to be loaded
	     * into an OpenSeadragon Viewer.
	     * There are 2 ways to open an ImageTileSource:
	     * 1. viewer.open({type: 'image', url: fooUrl});
	     * 2. viewer.open(new OpenSeadragon.ImageTileSource({url: fooUrl}));
	     *
	     * With the first syntax, the crossOriginPolicy, ajaxWithCredentials and
	     * useCanvas options are inherited from the viewer if they are not
	     * specified directly in the options object.
	     *
	     * @memberof OpenSeadragon
	     * @extends OpenSeadragon.TileSource
	     * @param {Object} options Options object.
	     * @param {String} options.url URL of the image
	     * @param {Boolean} [options.buildPyramid=true] If set to true (default), a
	     * pyramid will be built internally to provide a better downsampling.
	     * @param {String|Boolean} [options.crossOriginPolicy=false] Valid values are
	     * 'Anonymous', 'use-credentials', and false. If false, image requests will
	     * not use CORS preventing internal pyramid building for images from other
	     * domains.
	     * @param {String|Boolean} [options.ajaxWithCredentials=false] Whether to set
	     * the withCredentials XHR flag for AJAX requests (when loading tile sources).
	     * @param {Boolean} [options.useCanvas=true] Set to false to prevent any use
	     * of the canvas API.
	     */
	    $.ImageTileSource = function (options) {
	
	        options = $.extend({
	            buildPyramid: true,
	            crossOriginPolicy: false,
	            ajaxWithCredentials: false,
	            useCanvas: true
	        }, options);
	        $.TileSource.apply(this, [options]);
	
	    };
	
	    $.extend($.ImageTileSource.prototype, $.TileSource.prototype, /** @lends OpenSeadragon.ImageTileSource.prototype */{
	        /**
	         * Determine if the data and/or url imply the image service is supported by
	         * this tile source.
	         * @function
	         * @param {Object|Array} data
	         * @param {String} optional - url
	         */
	        supports: function (data, url) {
	            return data.type && data.type === "image";
	        },
	        /**
	         *
	         * @function
	         * @param {Object} options - the options
	         * @param {String} dataUrl - the url the image was retreived from, if any.
	         * @return {Object} options - A dictionary of keyword arguments sufficient
	         *      to configure this tile sources constructor.
	         */
	        configure: function (options, dataUrl) {
	            return options;
	        },
	        /**
	         * Responsible for retrieving, and caching the
	         * image metadata pertinent to this TileSources implementation.
	         * @function
	         * @param {String} url
	         * @throws {Error}
	         */
	        getImageInfo: function (url) {
	            var image = this._image = new Image();
	            var _this = this;
	
	            if (this.crossOriginPolicy) {
	                image.crossOrigin = this.crossOriginPolicy;
	            }
	            if (this.ajaxWithCredentials) {
	                image.useCredentials = this.ajaxWithCredentials;
	            }
	
	            $.addEvent(image, 'load', function () {
	                _this.width = image.naturalWidth;
	                _this.height = image.naturalHeight;
	                _this.aspectRatio = _this.width / _this.height;
	                _this.dimensions = new $.Point(_this.width, _this.height);
	                _this._tileWidth = _this.width;
	                _this._tileHeight = _this.height;
	                _this.tileOverlap = 0;
	                _this.minLevel = 0;
	                _this.levels = _this._buildLevels();
	                _this.maxLevel = _this.levels.length - 1;
	
	                _this.ready = true;
	
	                // Note: this event is documented elsewhere, in TileSource
	                _this.raiseEvent('ready', {tileSource: _this});
	            });
	
	            $.addEvent(image, 'error', function () {
	                // Note: this event is documented elsewhere, in TileSource
	                _this.raiseEvent('open-failed', {
	                    message: "Error loading image at " + url,
	                    source: url
	                });
	            });
	
	            image.src = url;
	        },
	        /**
	         * @function
	         * @param {Number} level
	         */
	        getLevelScale: function (level) {
	            var levelScale = NaN;
	            if (level >= this.minLevel && level <= this.maxLevel) {
	                levelScale =
	                        this.levels[level].width /
	                        this.levels[this.maxLevel].width;
	            }
	            return levelScale;
	        },
	        /**
	         * @function
	         * @param {Number} level
	         */
	        getNumTiles: function (level) {
	            var scale = this.getLevelScale(level);
	            if (scale) {
	                return new $.Point(1, 1);
	            } else {
	                return new $.Point(0, 0);
	            }
	        },
	        /**
	         * @function
	         * @param {Number} level
	         * @param {OpenSeadragon.Point} point
	         */
	        getTileAtPoint: function (level, point) {
	            return new $.Point(0, 0);
	        },
	        /**
	         * Retrieves a tile url
	         * @function
	         * @param {Number} level Level of the tile
	         * @param {Number} x x coordinate of the tile
	         * @param {Number} y y coordinate of the tile
	         */
	        getTileUrl: function (level, x, y) {
	            var url = null;
	            if (level >= this.minLevel && level <= this.maxLevel) {
	                url = this.levels[level].url;
	            }
	            return url;
	        },
	        /**
	         * Retrieves a tile context 2D
	         * @function
	         * @param {Number} level Level of the tile
	         * @param {Number} x x coordinate of the tile
	         * @param {Number} y y coordinate of the tile
	         */
	        getContext2D: function (level, x, y) {
	            var context = null;
	            if (level >= this.minLevel && level <= this.maxLevel) {
	                context = this.levels[level].context2D;
	            }
	            return context;
	        },
	
	        // private
	        //
	        // Builds the differents levels of the pyramid if possible
	        // (i.e. if canvas API enabled and no canvas tainting issue).
	        _buildLevels: function () {
	            var levels = [{
	                    url: this._image.src,
	                    width: this._image.naturalWidth,
	                    height: this._image.naturalHeight
	                }];
	
	            if (!this.buildPyramid || !$.supportsCanvas || !this.useCanvas) {
	                // We don't need the image anymore. Allows it to be GC.
	                delete this._image;
	                return levels;
	            }
	
	            var currentWidth = this._image.naturalWidth;
	            var currentHeight = this._image.naturalHeight;
	
	            var bigCanvas = document.createElement("canvas");
	            var bigContext = bigCanvas.getContext("2d");
	
	            bigCanvas.width = currentWidth;
	            bigCanvas.height = currentHeight;
	            bigContext.drawImage(this._image, 0, 0, currentWidth, currentHeight);
	            // We cache the context of the highest level because the browser
	            // is a lot faster at downsampling something it already has
	            // downsampled before.
	            levels[0].context2D = bigContext;
	            // We don't need the image anymore. Allows it to be GC.
	            delete this._image;
	
	            if ($.isCanvasTainted(bigCanvas)) {
	                // If the canvas is tainted, we can't compute the pyramid.
	                return levels;
	            }
	
	            // We build smaller levels until either width or height becomes
	            // 1 pixel wide.
	            while (currentWidth >= 2 && currentHeight >= 2) {
	                currentWidth = Math.floor(currentWidth / 2);
	                currentHeight = Math.floor(currentHeight / 2);
	                var smallCanvas = document.createElement("canvas");
	                var smallContext = smallCanvas.getContext("2d");
	                smallCanvas.width = currentWidth;
	                smallCanvas.height = currentHeight;
	                smallContext.drawImage(bigCanvas, 0, 0, currentWidth, currentHeight);
	
	                levels.splice(0, 0, {
	                    context2D: smallContext,
	                    width: currentWidth,
	                    height: currentHeight
	                });
	
	                bigCanvas = smallCanvas;
	                bigContext = smallContext;
	            }
	            return levels;
	        }
	    });
	
	}(OpenSeadragon));
	
	/*
	 * OpenSeadragon - TileSourceCollection
	 *
	 * Copyright (C) 2009 CodePlex Foundation
	 * Copyright (C) 2010-2013 OpenSeadragon contributors
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 * - Redistributions of source code must retain the above copyright notice,
	 *   this list of conditions and the following disclaimer.
	 *
	 * - Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * - Neither the name of CodePlex Foundation nor the names of its
	 *   contributors may be used to endorse or promote products derived from
	 *   this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
	 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */
	
	(function( $ ){
	
	// deprecated
	$.TileSourceCollection = function( tileSize, tileSources, rows, layout  ) {
	    $.console.error('TileSourceCollection is deprecated; use World instead');
	};
	
	}( OpenSeadragon ));
	
	/*
	 * OpenSeadragon - Button
	 *
	 * Copyright (C) 2009 CodePlex Foundation
	 * Copyright (C) 2010-2013 OpenSeadragon contributors
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 * - Redistributions of source code must retain the above copyright notice,
	 *   this list of conditions and the following disclaimer.
	 *
	 * - Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * - Neither the name of CodePlex Foundation nor the names of its
	 *   contributors may be used to endorse or promote products derived from
	 *   this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
	 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */
	
	(function( $ ){
	
	/**
	 * An enumeration of button states
	 * @member ButtonState
	 * @memberof OpenSeadragon
	 * @static
	 * @type {Object}
	 * @property {Number} REST
	 * @property {Number} GROUP
	 * @property {Number} HOVER
	 * @property {Number} DOWN
	 */
	$.ButtonState = {
	    REST:   0,
	    GROUP:  1,
	    HOVER:  2,
	    DOWN:   3
	};
	
	/**
	 * @class Button
	 * @classdesc Manages events, hover states for individual buttons, tool-tips, as well
	 * as fading the buttons out when the user has not interacted with them
	 * for a specified period.
	 *
	 * @memberof OpenSeadragon
	 * @extends OpenSeadragon.EventSource
	 * @param {Object} options
	 * @param {Element} [options.element=null] Element to use as the button. If not specified, an HTML &lt;button&gt; element is created.
	 * @param {String} [options.tooltip=null] Provides context help for the button when the
	 *  user hovers over it.
	 * @param {String} [options.srcRest=null] URL of image to use in 'rest' state.
	 * @param {String} [options.srcGroup=null] URL of image to use in 'up' state.
	 * @param {String} [options.srcHover=null] URL of image to use in 'hover' state.
	 * @param {String} [options.srcDown=null] URL of image to use in 'down' state.
	 * @param {Number} [options.fadeDelay=0] How long to wait before fading.
	 * @param {Number} [options.fadeLength=2000] How long should it take to fade the button.
	 * @param {OpenSeadragon.EventHandler} [options.onPress=null] Event handler callback for {@link OpenSeadragon.Button.event:press}.
	 * @param {OpenSeadragon.EventHandler} [options.onRelease=null] Event handler callback for {@link OpenSeadragon.Button.event:release}.
	 * @param {OpenSeadragon.EventHandler} [options.onClick=null] Event handler callback for {@link OpenSeadragon.Button.event:click}.
	 * @param {OpenSeadragon.EventHandler} [options.onEnter=null] Event handler callback for {@link OpenSeadragon.Button.event:enter}.
	 * @param {OpenSeadragon.EventHandler} [options.onExit=null] Event handler callback for {@link OpenSeadragon.Button.event:exit}.
	 * @param {OpenSeadragon.EventHandler} [options.onFocus=null] Event handler callback for {@link OpenSeadragon.Button.event:focus}.
	 * @param {OpenSeadragon.EventHandler} [options.onBlur=null] Event handler callback for {@link OpenSeadragon.Button.event:blur}.
	 */
	$.Button = function( options ) {
	
	    var _this = this;
	
	    $.EventSource.call( this );
	
	    $.extend( true, this, {
	
	        tooltip:            null,
	        srcRest:            null,
	        srcGroup:           null,
	        srcHover:           null,
	        srcDown:            null,
	        clickTimeThreshold: $.DEFAULT_SETTINGS.clickTimeThreshold,
	        clickDistThreshold: $.DEFAULT_SETTINGS.clickDistThreshold,
	        /**
	         * How long to wait before fading.
	         * @member {Number} fadeDelay
	         * @memberof OpenSeadragon.Button#
	         */
	        fadeDelay:          0,
	        /**
	         * How long should it take to fade the button.
	         * @member {Number} fadeLength
	         * @memberof OpenSeadragon.Button#
	         */
	        fadeLength:         2000,
	        onPress:            null,
	        onRelease:          null,
	        onClick:            null,
	        onEnter:            null,
	        onExit:             null,
	        onFocus:            null,
	        onBlur:             null
	
	    }, options );
	
	    /**
	     * The button element.
	     * @member {Element} element
	     * @memberof OpenSeadragon.Button#
	     */
	    this.element        = options.element   || $.makeNeutralElement( "div" );
	
	    //if the user has specified the element to bind the control to explicitly
	    //then do not add the default control images
	    if ( !options.element ) {
	        this.imgRest      = $.makeTransparentImage( this.srcRest );
	        this.imgGroup     = $.makeTransparentImage( this.srcGroup );
	        this.imgHover     = $.makeTransparentImage( this.srcHover );
	        this.imgDown      = $.makeTransparentImage( this.srcDown );
	
	        this.imgRest.alt  =
	        this.imgGroup.alt =
	        this.imgHover.alt =
	        this.imgDown.alt  =
	            this.tooltip;
	
	        this.element.style.position = "relative";
	        $.setElementTouchActionNone( this.element );
	
	        this.imgGroup.style.position =
	        this.imgHover.style.position =
	        this.imgDown.style.position  =
	            "absolute";
	
	        this.imgGroup.style.top =
	        this.imgHover.style.top =
	        this.imgDown.style.top  =
	            "0px";
	
	        this.imgGroup.style.left =
	        this.imgHover.style.left =
	        this.imgDown.style.left  =
	            "0px";
	
	        this.imgHover.style.visibility =
	        this.imgDown.style.visibility  =
	            "hidden";
	
	        if ( $.Browser.vendor == $.BROWSERS.FIREFOX  && $.Browser.version < 3 ){
	            this.imgGroup.style.top =
	            this.imgHover.style.top =
	            this.imgDown.style.top  =
	                "";
	        }
	
	        this.element.appendChild( this.imgRest );
	        this.element.appendChild( this.imgGroup );
	        this.element.appendChild( this.imgHover );
	        this.element.appendChild( this.imgDown );
	    }
	
	
	    this.addHandler( "press",     this.onPress );
	    this.addHandler( "release",   this.onRelease );
	    this.addHandler( "click",     this.onClick );
	    this.addHandler( "enter",     this.onEnter );
	    this.addHandler( "exit",      this.onExit );
	    this.addHandler( "focus",     this.onFocus );
	    this.addHandler( "blur",      this.onBlur );
	
	    /**
	     * The button's current state.
	     * @member {OpenSeadragon.ButtonState} currentState
	     * @memberof OpenSeadragon.Button#
	     */
	    this.currentState = $.ButtonState.GROUP;
	
	    // When the button last began to fade.
	    this.fadeBeginTime  = null;
	    // Whether this button should fade after user stops interacting with the viewport.
	    this.shouldFade     = false;
	
	    this.element.style.display  = "inline-block";
	    this.element.style.position = "relative";
	    this.element.title          = this.tooltip;
	
	    /**
	     * Tracks mouse/touch/key events on the button.
	     * @member {OpenSeadragon.MouseTracker} tracker
	     * @memberof OpenSeadragon.Button#
	     */
	    this.tracker = new $.MouseTracker({
	
	        element:            this.element,
	        clickTimeThreshold: this.clickTimeThreshold,
	        clickDistThreshold: this.clickDistThreshold,
	
	        enterHandler: function( event ) {
	            if ( event.insideElementPressed ) {
	                inTo( _this, $.ButtonState.DOWN );
	                /**
	                 * Raised when the cursor enters the Button element.
	                 *
	                 * @event enter
	                 * @memberof OpenSeadragon.Button
	                 * @type {object}
	                 * @property {OpenSeadragon.Button} eventSource - A reference to the Button which raised the event.
	                 * @property {Object} originalEvent - The original DOM event.
	                 * @property {?Object} userData - Arbitrary subscriber-defined object.
	                 */
	                _this.raiseEvent( "enter", { originalEvent: event.originalEvent } );
	            } else if ( !event.buttonDownAny ) {
	                inTo( _this, $.ButtonState.HOVER );
	            }
	        },
	
	        focusHandler: function ( event ) {
	            this.enterHandler( event );
	            /**
	             * Raised when the Button element receives focus.
	             *
	             * @event focus
	             * @memberof OpenSeadragon.Button
	             * @type {object}
	             * @property {OpenSeadragon.Button} eventSource - A reference to the Button which raised the event.
	             * @property {Object} originalEvent - The original DOM event.
	             * @property {?Object} userData - Arbitrary subscriber-defined object.
	             */
	            _this.raiseEvent( "focus", { originalEvent: event.originalEvent } );
	        },
	
	        exitHandler: function( event ) {
	            outTo( _this, $.ButtonState.GROUP );
	            if ( event.insideElementPressed ) {
	                /**
	                 * Raised when the cursor leaves the Button element.
	                 *
	                 * @event exit
	                 * @memberof OpenSeadragon.Button
	                 * @type {object}
	                 * @property {OpenSeadragon.Button} eventSource - A reference to the Button which raised the event.
	                 * @property {Object} originalEvent - The original DOM event.
	                 * @property {?Object} userData - Arbitrary subscriber-defined object.
	                 */
	                _this.raiseEvent( "exit", { originalEvent: event.originalEvent } );
	            }
	        },
	
	        blurHandler: function ( event ) {
	            this.exitHandler( event );
	            /**
	             * Raised when the Button element loses focus.
	             *
	             * @event blur
	             * @memberof OpenSeadragon.Button
	             * @type {object}
	             * @property {OpenSeadragon.Button} eventSource - A reference to the Button which raised the event.
	             * @property {Object} originalEvent - The original DOM event.
	             * @property {?Object} userData - Arbitrary subscriber-defined object.
	             */
	            _this.raiseEvent( "blur", { originalEvent: event.originalEvent } );
	        },
	
	        pressHandler: function ( event ) {
	            inTo( _this, $.ButtonState.DOWN );
	            /**
	             * Raised when a mouse button is pressed or touch occurs in the Button element.
	             *
	             * @event press
	             * @memberof OpenSeadragon.Button
	             * @type {object}
	             * @property {OpenSeadragon.Button} eventSource - A reference to the Button which raised the event.
	             * @property {Object} originalEvent - The original DOM event.
	             * @property {?Object} userData - Arbitrary subscriber-defined object.
	             */
	            _this.raiseEvent( "press", { originalEvent: event.originalEvent } );
	        },
	
	        releaseHandler: function( event ) {
	            if ( event.insideElementPressed && event.insideElementReleased ) {
	                outTo( _this, $.ButtonState.HOVER );
	                /**
	                 * Raised when the mouse button is released or touch ends in the Button element.
	                 *
	                 * @event release
	                 * @memberof OpenSeadragon.Button
	                 * @type {object}
	                 * @property {OpenSeadragon.Button} eventSource - A reference to the Button which raised the event.
	                 * @property {Object} originalEvent - The original DOM event.
	                 * @property {?Object} userData - Arbitrary subscriber-defined object.
	                 */
	                _this.raiseEvent( "release", { originalEvent: event.originalEvent } );
	            } else if ( event.insideElementPressed ) {
	                outTo( _this, $.ButtonState.GROUP );
	            } else {
	                inTo( _this, $.ButtonState.HOVER );
	            }
	        },
	
	        clickHandler: function( event ) {
	            if ( event.quick ) {
	                /**
	                 * Raised when a mouse button is pressed and released or touch is initiated and ended in the Button element within the time and distance threshold.
	                 *
	                 * @event click
	                 * @memberof OpenSeadragon.Button
	                 * @type {object}
	                 * @property {OpenSeadragon.Button} eventSource - A reference to the Button which raised the event.
	                 * @property {Object} originalEvent - The original DOM event.
	                 * @property {?Object} userData - Arbitrary subscriber-defined object.
	                 */
	                _this.raiseEvent("click", { originalEvent: event.originalEvent });
	            }
	        },
	
	        keyHandler: function( event ){
	            //console.log( "%s : handling key %s!", _this.tooltip, event.keyCode);
	            if( 13 === event.keyCode ){
	                /***
	                 * Raised when a mouse button is pressed and released or touch is initiated and ended in the Button element within the time and distance threshold.
	                 *
	                 * @event click
	                 * @memberof OpenSeadragon.Button
	                 * @type {object}
	                 * @property {OpenSeadragon.Button} eventSource - A reference to the Button which raised the event.
	                 * @property {Object} originalEvent - The original DOM event.
	                 * @property {?Object} userData - Arbitrary subscriber-defined object.
	                 */
	                _this.raiseEvent( "click", { originalEvent: event.originalEvent } );
	                /***
	                 * Raised when the mouse button is released or touch ends in the Button element.
	                 *
	                 * @event release
	                 * @memberof OpenSeadragon.Button
	                 * @type {object}
	                 * @property {OpenSeadragon.Button} eventSource - A reference to the Button which raised the event.
	                 * @property {Object} originalEvent - The original DOM event.
	                 * @property {?Object} userData - Arbitrary subscriber-defined object.
	                 */
	                _this.raiseEvent( "release", { originalEvent: event.originalEvent } );
	                return false;
	            }
	            return true;
	        }
	
	    });
	
	    outTo( this, $.ButtonState.REST );
	};
	
	$.extend( $.Button.prototype, $.EventSource.prototype, /** @lends OpenSeadragon.Button.prototype */{
	
	    /**
	     * TODO: Determine what this function is intended to do and if it's actually
	     * useful as an API point.
	     * @function
	     */
	    notifyGroupEnter: function() {
	        inTo( this, $.ButtonState.GROUP );
	    },
	
	    /**
	     * TODO: Determine what this function is intended to do and if it's actually
	     * useful as an API point.
	     * @function
	     */
	    notifyGroupExit: function() {
	        outTo( this, $.ButtonState.REST );
	    },
	
	    /**
	     * @function
	     */
	    disable: function(){
	        this.notifyGroupExit();
	        this.element.disabled = true;
	        $.setElementOpacity( this.element, 0.2, true );
	    },
	
	    /**
	     * @function
	     */
	    enable: function(){
	        this.element.disabled = false;
	        $.setElementOpacity( this.element, 1.0, true );
	        this.notifyGroupEnter();
	    }
	
	});
	
	
	function scheduleFade( button ) {
	    $.requestAnimationFrame(function(){
	        updateFade( button );
	    });
	}
	
	function updateFade( button ) {
	    var currentTime,
	        deltaTime,
	        opacity;
	
	    if ( button.shouldFade ) {
	        currentTime = $.now();
	        deltaTime   = currentTime - button.fadeBeginTime;
	        opacity     = 1.0 - deltaTime / button.fadeLength;
	        opacity     = Math.min( 1.0, opacity );
	        opacity     = Math.max( 0.0, opacity );
	
	        if( button.imgGroup ){
	            $.setElementOpacity( button.imgGroup, opacity, true );
	        }
	        if ( opacity > 0 ) {
	            // fade again
	            scheduleFade( button );
	        }
	    }
	}
	
	function beginFading( button ) {
	    button.shouldFade = true;
	    button.fadeBeginTime = $.now() + button.fadeDelay;
	    window.setTimeout( function(){
	        scheduleFade( button );
	    }, button.fadeDelay );
	}
	
	function stopFading( button ) {
	    button.shouldFade = false;
	    if( button.imgGroup ){
	        $.setElementOpacity( button.imgGroup, 1.0, true );
	    }
	}
	
	function inTo( button, newState ) {
	
	    if( button.element.disabled ){
	        return;
	    }
	
	    if ( newState >= $.ButtonState.GROUP &&
	         button.currentState == $.ButtonState.REST ) {
	        stopFading( button );
	        button.currentState = $.ButtonState.GROUP;
	    }
	
	    if ( newState >= $.ButtonState.HOVER &&
	         button.currentState == $.ButtonState.GROUP ) {
	        if( button.imgHover ){
	            button.imgHover.style.visibility = "";
	        }
	        button.currentState = $.ButtonState.HOVER;
	    }
	
	    if ( newState >= $.ButtonState.DOWN &&
	         button.currentState == $.ButtonState.HOVER ) {
	        if( button.imgDown ){
	            button.imgDown.style.visibility = "";
	        }
	        button.currentState = $.ButtonState.DOWN;
	    }
	}
	
	
	function outTo( button, newState ) {
	
	    if( button.element.disabled ){
	        return;
	    }
	
	    if ( newState <= $.ButtonState.HOVER &&
	         button.currentState == $.ButtonState.DOWN ) {
	        if( button.imgDown ){
	            button.imgDown.style.visibility = "hidden";
	        }
	        button.currentState = $.ButtonState.HOVER;
	    }
	
	    if ( newState <= $.ButtonState.GROUP &&
	         button.currentState == $.ButtonState.HOVER ) {
	        if( button.imgHover ){
	            button.imgHover.style.visibility = "hidden";
	        }
	        button.currentState = $.ButtonState.GROUP;
	    }
	
	    if ( newState <= $.ButtonState.REST &&
	         button.currentState == $.ButtonState.GROUP ) {
	        beginFading( button );
	        button.currentState = $.ButtonState.REST;
	    }
	}
	
	
	
	}( OpenSeadragon ));
	
	/*
	 * OpenSeadragon - ButtonGroup
	 *
	 * Copyright (C) 2009 CodePlex Foundation
	 * Copyright (C) 2010-2013 OpenSeadragon contributors
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 * - Redistributions of source code must retain the above copyright notice,
	 *   this list of conditions and the following disclaimer.
	 *
	 * - Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * - Neither the name of CodePlex Foundation nor the names of its
	 *   contributors may be used to endorse or promote products derived from
	 *   this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
	 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */
	
	(function( $ ){
	/**
	 * @class ButtonGroup
	 * @classdesc Manages events on groups of buttons.
	 *
	 * @memberof OpenSeadragon
	 * @param {Object} options - A dictionary of settings applied against the entire group of buttons.
	 * @param {Array} options.buttons Array of buttons
	 * @param {Element} [options.element] Element to use as the container
	 **/
	$.ButtonGroup = function( options ) {
	
	    $.extend( true, this, {
	        /**
	         * An array containing the buttons themselves.
	         * @member {Array} buttons
	         * @memberof OpenSeadragon.ButtonGroup#
	         */
	        buttons:            [],
	        clickTimeThreshold: $.DEFAULT_SETTINGS.clickTimeThreshold,
	        clickDistThreshold: $.DEFAULT_SETTINGS.clickDistThreshold,
	        labelText:          ""
	    }, options );
	
	    // copy the button elements  TODO: Why?
	    var buttons = this.buttons.concat([]),
	        _this = this,
	        i;
	
	    /**
	     * The shared container for the buttons.
	     * @member {Element} element
	     * @memberof OpenSeadragon.ButtonGroup#
	     */
	    this.element = options.element || $.makeNeutralElement( "div" );
	
	    // TODO What if there IS an options.group specified?
	    if( !options.group ){
	        this.label   = $.makeNeutralElement( "label" );
	        //TODO: support labels for ButtonGroups
	        //this.label.innerHTML = this.labelText;
	        this.element.style.display = "inline-block";
	        this.element.appendChild( this.label );
	        for ( i = 0; i < buttons.length; i++ ) {
	            this.element.appendChild( buttons[ i ].element );
	        }
	    }
	
	    $.setElementTouchActionNone( this.element );
	
	    /**
	     * Tracks mouse/touch/key events accross the group of buttons.
	     * @member {OpenSeadragon.MouseTracker} tracker
	     * @memberof OpenSeadragon.ButtonGroup#
	     */
	    this.tracker = new $.MouseTracker({
	        element:            this.element,
	        clickTimeThreshold: this.clickTimeThreshold,
	        clickDistThreshold: this.clickDistThreshold,
	        enterHandler: function ( event ) {
	            var i;
	            for ( i = 0; i < _this.buttons.length; i++ ) {
	                _this.buttons[ i ].notifyGroupEnter();
	            }
	        },
	        exitHandler: function ( event ) {
	            var i;
	            if ( !event.insideElementPressed ) {
	                for ( i = 0; i < _this.buttons.length; i++ ) {
	                    _this.buttons[ i ].notifyGroupExit();
	                }
	            }
	        },
	    });
	};
	
	/** @lends OpenSeadragon.ButtonGroup.prototype */
	$.ButtonGroup.prototype = {
	
	    /**
	     * TODO: Figure out why this is used on the public API and if a more useful
	     * api can be created.
	     * @function
	     * @private
	     */
	    emulateEnter: function() {
	        this.tracker.enterHandler( { eventSource: this.tracker } );
	    },
	
	    /**
	     * TODO: Figure out why this is used on the public API and if a more useful
	     * api can be created.
	     * @function
	     * @private
	     */
	    emulateExit: function() {
	        this.tracker.exitHandler( { eventSource: this.tracker } );
	    }
	};
	
	
	}( OpenSeadragon ));
	
	/*
	 * OpenSeadragon - Rect
	 *
	 * Copyright (C) 2009 CodePlex Foundation
	 * Copyright (C) 2010-2013 OpenSeadragon contributors
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 * - Redistributions of source code must retain the above copyright notice,
	 *   this list of conditions and the following disclaimer.
	 *
	 * - Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * - Neither the name of CodePlex Foundation nor the names of its
	 *   contributors may be used to endorse or promote products derived from
	 *   this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
	 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */
	
	(function($) {
	
	/**
	 * @class Rect
	 * @classdesc A Rectangle is described by it top left coordinates (x, y), width,
	 * height and degrees of rotation around (x, y).
	 * Note that the coordinate system used is the one commonly used with images:
	 * x increases when going to the right
	 * y increases when going to the bottom
	 * degrees increases clockwise with 0 being the horizontal
	 *
	 * The constructor normalizes the rectangle to always have 0 <= degrees < 90
	 *
	 * @memberof OpenSeadragon
	 * @param {Number} [x=0] The vector component 'x'.
	 * @param {Number} [y=0] The vector component 'y'.
	 * @param {Number} [width=0] The vector component 'width'.
	 * @param {Number} [height=0] The vector component 'height'.
	 * @param {Number} [degrees=0] Rotation of the rectangle around (x,y) in degrees.
	 */
	$.Rect = function(x, y, width, height, degrees) {
	    /**
	     * The vector component 'x'.
	     * @member {Number} x
	     * @memberof OpenSeadragon.Rect#
	     */
	    this.x = typeof(x) === "number" ? x : 0;
	    /**
	     * The vector component 'y'.
	     * @member {Number} y
	     * @memberof OpenSeadragon.Rect#
	     */
	    this.y = typeof(y) === "number" ? y : 0;
	    /**
	     * The vector component 'width'.
	     * @member {Number} width
	     * @memberof OpenSeadragon.Rect#
	     */
	    this.width  = typeof(width) === "number" ? width : 0;
	    /**
	     * The vector component 'height'.
	     * @member {Number} height
	     * @memberof OpenSeadragon.Rect#
	     */
	    this.height = typeof(height) === "number" ? height : 0;
	
	    this.degrees = typeof(degrees) === "number" ? degrees : 0;
	
	    // Normalizes the rectangle.
	    this.degrees = this.degrees % 360;
	    if (this.degrees < 0) {
	        this.degrees += 360;
	    }
	    var newTopLeft, newWidth;
	    if (this.degrees >= 270) {
	        newTopLeft = this.getTopRight();
	        this.x = newTopLeft.x;
	        this.y = newTopLeft.y;
	        newWidth = this.height;
	        this.height = this.width;
	        this.width = newWidth;
	        this.degrees -= 270;
	    } else if (this.degrees >= 180) {
	        newTopLeft = this.getBottomRight();
	        this.x = newTopLeft.x;
	        this.y = newTopLeft.y;
	        this.degrees -= 180;
	    } else if (this.degrees >= 90) {
	        newTopLeft = this.getBottomLeft();
	        this.x = newTopLeft.x;
	        this.y = newTopLeft.y;
	        newWidth = this.height;
	        this.height = this.width;
	        this.width = newWidth;
	        this.degrees -= 90;
	    }
	};
	
	/**
	 * Builds a rectangle having the 3 specified points as summits.
	 * @static
	 * @memberof OpenSeadragon.Rect
	 * @param {OpenSeadragon.Point} topLeft
	 * @param {OpenSeadragon.Point} topRight
	 * @param {OpenSeadragon.Point} bottomLeft
	 * @returns {OpenSeadragon.Rect}
	 */
	$.Rect.fromSummits = function(topLeft, topRight, bottomLeft) {
	    var width = topLeft.distanceTo(topRight);
	    var height = topLeft.distanceTo(bottomLeft);
	    var diff = topRight.minus(topLeft);
	    var radians = Math.atan(diff.y / diff.x);
	    if (diff.x < 0) {
	        radians += Math.PI;
	    } else if (diff.y < 0) {
	        radians += 2 * Math.PI;
	    }
	    return new $.Rect(
	        topLeft.x,
	        topLeft.y,
	        width,
	        height,
	        radians / Math.PI * 180);
	};
	
	/** @lends OpenSeadragon.Rect.prototype */
	$.Rect.prototype = {
	    /**
	     * @function
	     * @returns {OpenSeadragon.Rect} a duplicate of this Rect
	     */
	    clone: function() {
	        return new $.Rect(
	            this.x,
	            this.y,
	            this.width,
	            this.height,
	            this.degrees);
	    },
	
	    /**
	     * The aspect ratio is simply the ratio of width to height.
	     * @function
	     * @returns {Number} The ratio of width to height.
	     */
	    getAspectRatio: function() {
	        return this.width / this.height;
	    },
	
	    /**
	     * Provides the coordinates of the upper-left corner of the rectangle as a
	     * point.
	     * @function
	     * @returns {OpenSeadragon.Point} The coordinate of the upper-left corner of
	     *  the rectangle.
	     */
	    getTopLeft: function() {
	        return new $.Point(
	            this.x,
	            this.y
	        );
	    },
	
	    /**
	     * Provides the coordinates of the bottom-right corner of the rectangle as a
	     * point.
	     * @function
	     * @returns {OpenSeadragon.Point} The coordinate of the bottom-right corner of
	     *  the rectangle.
	     */
	    getBottomRight: function() {
	        return new $.Point(this.x + this.width, this.y + this.height)
	            .rotate(this.degrees, this.getTopLeft());
	    },
	
	    /**
	     * Provides the coordinates of the top-right corner of the rectangle as a
	     * point.
	     * @function
	     * @returns {OpenSeadragon.Point} The coordinate of the top-right corner of
	     *  the rectangle.
	     */
	    getTopRight: function() {
	        return new $.Point(this.x + this.width, this.y)
	            .rotate(this.degrees, this.getTopLeft());
	    },
	
	    /**
	     * Provides the coordinates of the bottom-left corner of the rectangle as a
	     * point.
	     * @function
	     * @returns {OpenSeadragon.Point} The coordinate of the bottom-left corner of
	     *  the rectangle.
	     */
	    getBottomLeft: function() {
	        return new $.Point(this.x, this.y + this.height)
	            .rotate(this.degrees, this.getTopLeft());
	    },
	
	    /**
	     * Computes the center of the rectangle.
	     * @function
	     * @returns {OpenSeadragon.Point} The center of the rectangle as represented
	     *  as represented by a 2-dimensional vector (x,y)
	     */
	    getCenter: function() {
	        return new $.Point(
	            this.x + this.width / 2.0,
	            this.y + this.height / 2.0
	        ).rotate(this.degrees, this.getTopLeft());
	    },
	
	    /**
	     * Returns the width and height component as a vector OpenSeadragon.Point
	     * @function
	     * @returns {OpenSeadragon.Point} The 2 dimensional vector representing the
	     *  the width and height of the rectangle.
	     */
	    getSize: function() {
	        return new $.Point(this.width, this.height);
	    },
	
	    /**
	     * Determines if two Rectangles have equivalent components.
	     * @function
	     * @param {OpenSeadragon.Rect} rectangle The Rectangle to compare to.
	     * @return {Boolean} 'true' if all components are equal, otherwise 'false'.
	     */
	    equals: function(other) {
	        return (other instanceof $.Rect) &&
	            this.x === other.x &&
	            this.y === other.y &&
	            this.width === other.width &&
	            this.height === other.height &&
	            this.degrees === other.degrees;
	    },
	
	    /**
	    * Multiply all dimensions (except degrees) in this Rect by a factor and
	    * return a new Rect.
	    * @function
	    * @param {Number} factor The factor to multiply vector components.
	    * @returns {OpenSeadragon.Rect} A new rect representing the multiplication
	    *  of the vector components by the factor
	    */
	    times: function(factor) {
	        return new $.Rect(
	            this.x * factor,
	            this.y * factor,
	            this.width * factor,
	            this.height * factor,
	            this.degrees);
	    },
	
	    /**
	    * Translate/move this Rect by a vector and return new Rect.
	    * @function
	    * @param {OpenSeadragon.Point} delta The translation vector.
	    * @returns {OpenSeadragon.Rect} A new rect with altered position
	    */
	    translate: function(delta) {
	        return new $.Rect(
	            this.x + delta.x,
	            this.y + delta.y,
	            this.width,
	            this.height,
	            this.degrees);
	    },
	
	    /**
	     * Returns the smallest rectangle that will contain this and the given
	     * rectangle bounding boxes.
	     * @param {OpenSeadragon.Rect} rect
	     * @return {OpenSeadragon.Rect} The new rectangle.
	     */
	    union: function(rect) {
	        var thisBoundingBox = this.getBoundingBox();
	        var otherBoundingBox = rect.getBoundingBox();
	
	        var left = Math.min(thisBoundingBox.x, otherBoundingBox.x);
	        var top = Math.min(thisBoundingBox.y, otherBoundingBox.y);
	        var right = Math.max(
	            thisBoundingBox.x + thisBoundingBox.width,
	            otherBoundingBox.x + otherBoundingBox.width);
	        var bottom = Math.max(
	            thisBoundingBox.y + thisBoundingBox.height,
	            otherBoundingBox.y + otherBoundingBox.height);
	
	        return new $.Rect(
	            left,
	            top,
	            right - left,
	            bottom - top);
	    },
	
	    /**
	     * Returns the bounding box of the intersection of this rectangle with the
	     * given rectangle.
	     * @param {OpenSeadragon.Rect} rect
	     * @return {OpenSeadragon.Rect} the bounding box of the intersection
	     * or null if the rectangles don't intersect.
	     */
	    intersection: function(rect) {
	        // Simplified version of Weiler Atherton clipping algorithm
	        // https://en.wikipedia.org/wiki/Weiler%E2%80%93Atherton_clipping_algorithm
	        // Because we just want the bounding box of the intersection,
	        // we can just compute the bounding box of:
	        // 1. all the summits of this which are inside rect
	        // 2. all the summits of rect which are inside this
	        // 3. all the intersections of rect and this
	        var EPSILON = 0.0000000001;
	
	        var intersectionPoints = [];
	
	        var thisTopLeft = this.getTopLeft();
	        if (rect.containsPoint(thisTopLeft, EPSILON)) {
	            intersectionPoints.push(thisTopLeft);
	        }
	        var thisTopRight = this.getTopRight();
	        if (rect.containsPoint(thisTopRight, EPSILON)) {
	            intersectionPoints.push(thisTopRight);
	        }
	        var thisBottomLeft = this.getBottomLeft();
	        if (rect.containsPoint(thisBottomLeft, EPSILON)) {
	            intersectionPoints.push(thisBottomLeft);
	        }
	        var thisBottomRight = this.getBottomRight();
	        if (rect.containsPoint(thisBottomRight, EPSILON)) {
	            intersectionPoints.push(thisBottomRight);
	        }
	
	        var rectTopLeft = rect.getTopLeft();
	        if (this.containsPoint(rectTopLeft, EPSILON)) {
	            intersectionPoints.push(rectTopLeft);
	        }
	        var rectTopRight = rect.getTopRight();
	        if (this.containsPoint(rectTopRight, EPSILON)) {
	            intersectionPoints.push(rectTopRight);
	        }
	        var rectBottomLeft = rect.getBottomLeft();
	        if (this.containsPoint(rectBottomLeft, EPSILON)) {
	            intersectionPoints.push(rectBottomLeft);
	        }
	        var rectBottomRight = rect.getBottomRight();
	        if (this.containsPoint(rectBottomRight, EPSILON)) {
	            intersectionPoints.push(rectBottomRight);
	        }
	
	        var thisSegments = this._getSegments();
	        var rectSegments = rect._getSegments();
	        for (var i = 0; i < thisSegments.length; i++) {
	            var thisSegment = thisSegments[i];
	            for (var j = 0; j < rectSegments.length; j++) {
	                var rectSegment = rectSegments[j];
	                var intersect = getIntersection(thisSegment[0], thisSegment[1],
	                    rectSegment[0], rectSegment[1]);
	                if (intersect) {
	                    intersectionPoints.push(intersect);
	                }
	            }
	        }
	
	        // Get intersection point of segments [a,b] and [c,d]
	        function getIntersection(a, b, c, d) {
	            // http://stackoverflow.com/a/1968345/1440403
	            var abVector = b.minus(a);
	            var cdVector = d.minus(c);
	
	            var denom = -cdVector.x * abVector.y + abVector.x * cdVector.y;
	            if (denom === 0) {
	                return null;
	            }
	
	            var s = (abVector.x * (a.y - c.y) - abVector.y * (a.x - c.x)) / denom;
	            var t = (cdVector.x * (a.y - c.y) - cdVector.y * (a.x - c.x)) / denom;
	
	            if (-EPSILON <= s && s <= 1 - EPSILON &&
	                -EPSILON <= t && t <= 1 - EPSILON) {
	                return new $.Point(a.x + t * abVector.x, a.y + t * abVector.y);
	            }
	            return null;
	        }
	
	        if (intersectionPoints.length === 0) {
	            return null;
	        }
	
	        var minX = intersectionPoints[0].x;
	        var maxX = intersectionPoints[0].x;
	        var minY = intersectionPoints[0].y;
	        var maxY = intersectionPoints[0].y;
	        for (var k = 1; k < intersectionPoints.length; k++) {
	            var point = intersectionPoints[k];
	            if (point.x < minX) {
	                minX = point.x;
	            }
	            if (point.x > maxX) {
	                maxX = point.x;
	            }
	            if (point.y < minY) {
	                minY = point.y;
	            }
	            if (point.y > maxY) {
	                maxY = point.y;
	            }
	        }
	        return new $.Rect(minX, minY, maxX - minX, maxY - minY);
	    },
	
	    // private
	    _getSegments: function() {
	        var topLeft = this.getTopLeft();
	        var topRight = this.getTopRight();
	        var bottomLeft = this.getBottomLeft();
	        var bottomRight = this.getBottomRight();
	        return [[topLeft, topRight],
	            [topRight, bottomRight],
	            [bottomRight, bottomLeft],
	            [bottomLeft, topLeft]];
	    },
	
	    /**
	     * Rotates a rectangle around a point.
	     * @function
	     * @param {Number} degrees The angle in degrees to rotate.
	     * @param {OpenSeadragon.Point} [pivot] The point about which to rotate.
	     * Defaults to the center of the rectangle.
	     * @return {OpenSeadragon.Rect}
	     */
	    rotate: function(degrees, pivot) {
	        degrees = degrees % 360;
	        if (degrees === 0) {
	            return this.clone();
	        }
	        if (degrees < 0) {
	            degrees += 360;
	        }
	
	        pivot = pivot || this.getCenter();
	        var newTopLeft = this.getTopLeft().rotate(degrees, pivot);
	        var newTopRight = this.getTopRight().rotate(degrees, pivot);
	
	        var diff = newTopRight.minus(newTopLeft);
	        var radians = Math.atan(diff.y / diff.x);
	        if (diff.x < 0) {
	            radians += Math.PI;
	        } else if (diff.y < 0) {
	            radians += 2 * Math.PI;
	        }
	        return new $.Rect(
	            newTopLeft.x,
	            newTopLeft.y,
	            this.width,
	            this.height,
	            radians / Math.PI * 180);
	    },
	
	    /**
	     * Retrieves the smallest horizontal (degrees=0) rectangle which contains
	     * this rectangle.
	     * @returns {OpenSeadragon.Rect}
	     */
	    getBoundingBox: function() {
	        if (this.degrees === 0) {
	            return this.clone();
	        }
	        var topLeft = this.getTopLeft();
	        var topRight = this.getTopRight();
	        var bottomLeft = this.getBottomLeft();
	        var bottomRight = this.getBottomRight();
	        var minX = Math.min(topLeft.x, topRight.x, bottomLeft.x, bottomRight.x);
	        var maxX = Math.max(topLeft.x, topRight.x, bottomLeft.x, bottomRight.x);
	        var minY = Math.min(topLeft.y, topRight.y, bottomLeft.y, bottomRight.y);
	        var maxY = Math.max(topLeft.y, topRight.y, bottomLeft.y, bottomRight.y);
	        return new $.Rect(
	            minX,
	            minY,
	            maxX - minX,
	            maxY - minY);
	    },
	
	    /**
	     * Retrieves the smallest horizontal (degrees=0) rectangle which contains
	     * this rectangle and has integers x, y, width and height
	     * @returns {OpenSeadragon.Rect}
	     */
	    getIntegerBoundingBox: function() {
	        var boundingBox = this.getBoundingBox();
	        var x = Math.floor(boundingBox.x);
	        var y = Math.floor(boundingBox.y);
	        var width = Math.ceil(boundingBox.width + boundingBox.x - x);
	        var height = Math.ceil(boundingBox.height + boundingBox.y - y);
	        return new $.Rect(x, y, width, height);
	    },
	
	    /**
	     * Determines whether a point is inside this rectangle (edge included).
	     * @function
	     * @param {OpenSeadragon.Point} point
	     * @param {Number} [epsilon=0] the margin of error allowed
	     * @returns {Boolean} true if the point is inside this rectangle, false
	     * otherwise.
	     */
	    containsPoint: function(point, epsilon) {
	        epsilon = epsilon || 0;
	
	        // See http://stackoverflow.com/a/2752754/1440403 for explanation
	        var topLeft = this.getTopLeft();
	        var topRight = this.getTopRight();
	        var bottomLeft = this.getBottomLeft();
	        var topDiff = topRight.minus(topLeft);
	        var leftDiff = bottomLeft.minus(topLeft);
	
	        return ((point.x - topLeft.x) * topDiff.x +
	            (point.y - topLeft.y) * topDiff.y >= -epsilon) &&
	
	            ((point.x - topRight.x) * topDiff.x +
	            (point.y - topRight.y) * topDiff.y <= epsilon) &&
	
	            ((point.x - topLeft.x) * leftDiff.x +
	            (point.y - topLeft.y) * leftDiff.y >= -epsilon) &&
	
	            ((point.x - bottomLeft.x) * leftDiff.x +
	            (point.y - bottomLeft.y) * leftDiff.y <= epsilon);
	    },
	
	    /**
	     * Provides a string representation of the rectangle which is useful for
	     * debugging.
	     * @function
	     * @returns {String} A string representation of the rectangle.
	     */
	    toString: function() {
	        return "[" +
	            (Math.round(this.x * 100) / 100) + ", " +
	            (Math.round(this.y * 100) / 100) + ", " +
	            (Math.round(this.width * 100) / 100) + "x" +
	            (Math.round(this.height * 100) / 100) + ", " +
	            (Math.round(this.degrees * 100) / 100) + "deg" +
	            "]";
	    }
	};
	
	
	}(OpenSeadragon));
	
	/*
	 * OpenSeadragon - ReferenceStrip
	 *
	 * Copyright (C) 2009 CodePlex Foundation
	 * Copyright (C) 2010-2013 OpenSeadragon contributors
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 * - Redistributions of source code must retain the above copyright notice,
	 *   this list of conditions and the following disclaimer.
	 *
	 * - Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * - Neither the name of CodePlex Foundation nor the names of its
	 *   contributors may be used to endorse or promote products derived from
	 *   this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
	 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */
	
	(function ( $ ) {
	
	// dictionary from id to private properties
	var THIS = {};
	
	/**
	 *  The CollectionDrawer is a reimplementation if the Drawer API that
	 *  focuses on allowing a viewport to be redefined as a collection
	 *  of smaller viewports, defined by a clear number of rows and / or
	 *  columns of which each item in the matrix of viewports has its own
	 *  source.
	 *
	 *  This idea is a reexpression of the idea of dzi collections
	 *  which allows a clearer algorithm to reuse the tile sources already
	 *  supported by OpenSeadragon, in heterogenious or homogenious
	 *  sequences just like mixed groups already supported by the viewer
	 *  for the purpose of image sequnces.
	 *
	 *  TODO:   The difficult part of this feature is figuring out how to express
	 *          this functionality as a combination of the functionality already
	 *          provided by Drawer, Viewport, TileSource, and Navigator.  It may
	 *          require better abstraction at those points in order to effeciently
	 *          reuse those paradigms.
	 */
	/**
	 * @class ReferenceStrip
	 * @memberof OpenSeadragon
	 * @param {Object} options
	 */
	$.ReferenceStrip = function ( options ) {
	
	    var _this       = this,
	        viewer      = options.viewer,
	        viewerSize  = $.getElementSize( viewer.element ),
	        element,
	        style,
	        i;
	
	    //We may need to create a new element and id if they did not
	    //provide the id for the existing element
	    if ( !options.id ) {
	        options.id              = 'referencestrip-' + $.now();
	        this.element            = $.makeNeutralElement( "div" );
	        this.element.id         = options.id;
	        this.element.className  = 'referencestrip';
	    }
	
	    options = $.extend( true, {
	        sizeRatio:  $.DEFAULT_SETTINGS.referenceStripSizeRatio,
	        position:   $.DEFAULT_SETTINGS.referenceStripPosition,
	        scroll:     $.DEFAULT_SETTINGS.referenceStripScroll,
	        clickTimeThreshold:  $.DEFAULT_SETTINGS.clickTimeThreshold
	    }, options, {
	        //required overrides
	        element:                this.element,
	        //These need to be overridden to prevent recursion since
	        //the navigator is a viewer and a viewer has a navigator
	        showNavigator:          false,
	        mouseNavEnabled:        false,
	        showNavigationControl:  false,
	        showSequenceControl:    false
	    } );
	
	    $.extend( this, options );
	    //Private state properties
	    THIS[this.id] = {
	        "animating":           false
	    };
	
	    this.minPixelRatio = this.viewer.minPixelRatio;
	
	    style = this.element.style;
	    style.marginTop     = '0px';
	    style.marginRight   = '0px';
	    style.marginBottom  = '0px';
	    style.marginLeft    = '0px';
	    style.left          = '0px';
	    style.bottom        = '0px';
	    style.border        = '0px';
	    style.background    = '#000';
	    style.position      = 'relative';
	
	    $.setElementTouchActionNone( this.element );
	
	    $.setElementOpacity( this.element, 0.8 );
	
	    this.viewer = viewer;
	    this.innerTracker = new $.MouseTracker( {
	        element:        this.element,
	        dragHandler:    $.delegate( this, onStripDrag ),
	        scrollHandler:  $.delegate( this, onStripScroll ),
	        enterHandler:   $.delegate( this, onStripEnter ),
	        exitHandler:    $.delegate( this, onStripExit ),
	        keyDownHandler: $.delegate( this, onKeyDown ),
	        keyHandler:     $.delegate( this, onKeyPress )
	    } );
	
	    //Controls the position and orientation of the reference strip and sets the
	    //appropriate width and height
	    if ( options.width && options.height ) {
	        this.element.style.width  = options.width + 'px';
	        this.element.style.height = options.height + 'px';
	        viewer.addControl(
	            this.element,
	            { anchor: $.ControlAnchor.BOTTOM_LEFT }
	        );
	    } else {
	        if ( "horizontal" == options.scroll ) {
	            this.element.style.width = (
	                viewerSize.x *
	                options.sizeRatio *
	                viewer.tileSources.length
	            ) + ( 12 * viewer.tileSources.length ) + 'px';
	
	            this.element.style.height = (
	                viewerSize.y *
	                options.sizeRatio
	            ) + 'px';
	
	            viewer.addControl(
	                this.element,
	                { anchor: $.ControlAnchor.BOTTOM_LEFT }
	            );
	        } else {
	            this.element.style.height = (
	                viewerSize.y *
	                options.sizeRatio *
	                viewer.tileSources.length
	            ) + ( 12 * viewer.tileSources.length ) + 'px';
	
	            this.element.style.width = (
	                viewerSize.x *
	                options.sizeRatio
	            ) + 'px';
	
	            viewer.addControl(
	                this.element,
	                { anchor: $.ControlAnchor.TOP_LEFT }
	            );
	
	        }
	    }
	
	    this.panelWidth = ( viewerSize.x * this.sizeRatio ) + 8;
	    this.panelHeight = ( viewerSize.y * this.sizeRatio ) + 8;
	    this.panels = [];
	
	    /*jshint loopfunc:true*/
	    for ( i = 0; i < viewer.tileSources.length; i++ ) {
	
	        element = $.makeNeutralElement( 'div' );
	        element.id = this.element.id + "-" + i;
	
	        element.style.width         = _this.panelWidth + 'px';
	        element.style.height        = _this.panelHeight + 'px';
	        element.style.display       = 'inline';
	        element.style.float         = 'left'; //Webkit
	        element.style.cssFloat      = 'left'; //Firefox
	        element.style.styleFloat    = 'left'; //IE
	        element.style.padding       = '2px';
	        $.setElementTouchActionNone( element );
	
	        element.innerTracker = new $.MouseTracker( {
	            element:            element,
	            clickTimeThreshold: this.clickTimeThreshold,
	            clickDistThreshold: this.clickDistThreshold,
	            pressHandler: function ( event ) {
	                event.eventSource.dragging = $.now();
	            },
	            releaseHandler: function ( event ) {
	                var tracker = event.eventSource,
	                    id      = tracker.element.id,
	                    page    = Number( id.split( '-' )[2] ),
	                    now     = $.now();
	
	                if ( event.insideElementPressed &&
	                     event.insideElementReleased &&
	                     tracker.dragging &&
	                     ( now - tracker.dragging ) < tracker.clickTimeThreshold ) {
	                    tracker.dragging = null;
	                    viewer.goToPage( page );
	                }
	            }
	        } );
	
	        this.element.appendChild( element );
	
	        element.activePanel = false;
	
	        this.panels.push( element );
	
	    }
	    loadPanels( this, this.scroll == 'vertical' ? viewerSize.y : viewerSize.x, 0 );
	    this.setFocus( 0 );
	
	};
	
	$.extend( $.ReferenceStrip.prototype, $.EventSource.prototype, $.Viewer.prototype, /** @lends OpenSeadragon.ReferenceStrip.prototype */{
	
	    /**
	     * @function
	     */
	    setFocus: function ( page ) {
	        var element      = $.getElement( this.element.id + '-' + page ),
	            viewerSize   = $.getElementSize( this.viewer.canvas ),
	            scrollWidth  = Number( this.element.style.width.replace( 'px', '' ) ),
	            scrollHeight = Number( this.element.style.height.replace( 'px', '' ) ),
	            offsetLeft   = -Number( this.element.style.marginLeft.replace( 'px', '' ) ),
	            offsetTop    = -Number( this.element.style.marginTop.replace( 'px', '' ) ),
	            offset;
	
	        if ( this.currentSelected !== element ) {
	            if ( this.currentSelected ) {
	                this.currentSelected.style.background = '#000';
	            }
	            this.currentSelected = element;
	            this.currentSelected.style.background = '#999';
	
	            if ( 'horizontal' == this.scroll ) {
	                //right left
	                offset = ( Number( page ) ) * ( this.panelWidth + 3 );
	                if ( offset > offsetLeft + viewerSize.x - this.panelWidth ) {
	                    offset = Math.min( offset, ( scrollWidth - viewerSize.x ) );
	                    this.element.style.marginLeft = -offset + 'px';
	                    loadPanels( this, viewerSize.x, -offset );
	                } else if ( offset < offsetLeft ) {
	                    offset = Math.max( 0, offset - viewerSize.x / 2 );
	                    this.element.style.marginLeft = -offset + 'px';
	                    loadPanels( this, viewerSize.x, -offset );
	                }
	            } else {
	                offset = ( Number( page ) ) * ( this.panelHeight + 3 );
	                if ( offset > offsetTop + viewerSize.y - this.panelHeight ) {
	                    offset = Math.min( offset, ( scrollHeight - viewerSize.y ) );
	                    this.element.style.marginTop = -offset + 'px';
	                    loadPanels( this, viewerSize.y, -offset );
	                } else if ( offset < offsetTop ) {
	                    offset = Math.max( 0, offset - viewerSize.y / 2 );
	                    this.element.style.marginTop = -offset + 'px';
	                    loadPanels( this, viewerSize.y, -offset );
	                }
	            }
	
	            this.currentPage = page;
	            onStripEnter.call( this, { eventSource: this.innerTracker } );
	        }
	    },
	
	    /**
	     * @function
	     */
	    update: function () {
	        if ( THIS[this.id].animating ) {
	            $.console.log( 'image reference strip update' );
	            return true;
	        }
	        return false;
	    },
	
	    // Overrides Viewer.destroy
	    destroy: function() {
	        if (this.element) {
	            this.element.parentNode.removeChild(this.element);
	        }
	    }
	
	} );
	
	
	
	
	/**
	 * @private
	 * @inner
	 * @function
	 */
	function onStripDrag( event ) {
	
	    var offsetLeft   = Number( this.element.style.marginLeft.replace( 'px', '' ) ),
	        offsetTop    = Number( this.element.style.marginTop.replace( 'px', '' ) ),
	        scrollWidth  = Number( this.element.style.width.replace( 'px', '' ) ),
	        scrollHeight = Number( this.element.style.height.replace( 'px', '' ) ),
	        viewerSize   = $.getElementSize( this.viewer.canvas );
	    this.dragging = true;
	    if ( this.element ) {
	        if ( 'horizontal' == this.scroll ) {
	            if ( -event.delta.x > 0 ) {
	                //forward
	                if ( offsetLeft > -( scrollWidth - viewerSize.x ) ) {
	                    this.element.style.marginLeft = ( offsetLeft + ( event.delta.x * 2 ) ) + 'px';
	                    loadPanels( this, viewerSize.x, offsetLeft + ( event.delta.x * 2 ) );
	                }
	            } else if ( -event.delta.x < 0 ) {
	                //reverse
	                if ( offsetLeft < 0 ) {
	                    this.element.style.marginLeft = ( offsetLeft + ( event.delta.x * 2 ) ) + 'px';
	                    loadPanels( this, viewerSize.x, offsetLeft + ( event.delta.x * 2 ) );
	                }
	            }
	        } else {
	            if ( -event.delta.y > 0 ) {
	                //forward
	                if ( offsetTop > -( scrollHeight - viewerSize.y ) ) {
	                    this.element.style.marginTop = ( offsetTop + ( event.delta.y * 2 ) ) + 'px';
	                    loadPanels( this, viewerSize.y, offsetTop + ( event.delta.y * 2 ) );
	                }
	            } else if ( -event.delta.y < 0 ) {
	                //reverse
	                if ( offsetTop < 0 ) {
	                    this.element.style.marginTop = ( offsetTop + ( event.delta.y * 2 ) ) + 'px';
	                    loadPanels( this, viewerSize.y, offsetTop + ( event.delta.y * 2 ) );
	                }
	            }
	        }
	    }
	    return false;
	
	}
	
	
	
	/**
	 * @private
	 * @inner
	 * @function
	 */
	function onStripScroll( event ) {
	    var offsetLeft   = Number( this.element.style.marginLeft.replace( 'px', '' ) ),
	        offsetTop    = Number( this.element.style.marginTop.replace( 'px', '' ) ),
	        scrollWidth  = Number( this.element.style.width.replace( 'px', '' ) ),
	        scrollHeight = Number( this.element.style.height.replace( 'px', '' ) ),
	        viewerSize   = $.getElementSize( this.viewer.canvas );
	    if ( this.element ) {
	        if ( 'horizontal' == this.scroll ) {
	            if ( event.scroll > 0 ) {
	                //forward
	                if ( offsetLeft > -( scrollWidth - viewerSize.x ) ) {
	                    this.element.style.marginLeft = ( offsetLeft - ( event.scroll * 60 ) ) + 'px';
	                    loadPanels( this, viewerSize.x, offsetLeft - ( event.scroll * 60 ) );
	                }
	            } else if ( event.scroll < 0 ) {
	                //reverse
	                if ( offsetLeft < 0 ) {
	                    this.element.style.marginLeft = ( offsetLeft - ( event.scroll * 60 ) ) + 'px';
	                    loadPanels( this, viewerSize.x, offsetLeft - ( event.scroll * 60 ) );
	                }
	            }
	        } else {
	            if ( event.scroll < 0 ) {
	                //scroll up
	                if ( offsetTop > viewerSize.y - scrollHeight ) {
	                    this.element.style.marginTop = ( offsetTop + ( event.scroll * 60 ) ) + 'px';
	                    loadPanels( this, viewerSize.y, offsetTop + ( event.scroll * 60 ) );
	                }
	            } else if ( event.scroll > 0 ) {
	                //scroll dowm
	                if ( offsetTop < 0 ) {
	                    this.element.style.marginTop = ( offsetTop + ( event.scroll * 60 ) ) + 'px';
	                    loadPanels( this, viewerSize.y, offsetTop + ( event.scroll * 60 ) );
	                }
	            }
	        }
	    }
	    //cancels event
	    return false;
	}
	
	
	function loadPanels( strip, viewerSize, scroll ) {
	    var panelSize,
	        activePanelsStart,
	        activePanelsEnd,
	        miniViewer,
	        style,
	        i,
	        element;
	    if ( 'horizontal' == strip.scroll ) {
	        panelSize = strip.panelWidth;
	    } else {
	        panelSize = strip.panelHeight;
	    }
	    activePanelsStart = Math.ceil( viewerSize / panelSize ) + 5;
	    activePanelsEnd = Math.ceil( ( Math.abs( scroll ) + viewerSize ) / panelSize ) + 1;
	    activePanelsStart = activePanelsEnd - activePanelsStart;
	    activePanelsStart = activePanelsStart < 0 ? 0 : activePanelsStart;
	
	    for ( i = activePanelsStart; i < activePanelsEnd && i < strip.panels.length; i++ ) {
	        element = strip.panels[i];
	        if ( !element.activePanel ) {
	            miniViewer = new $.Viewer( {
	                id:                     element.id,
	                tileSources:            [strip.viewer.tileSources[i]],
	                element:                element,
	                navigatorSizeRatio:     strip.sizeRatio,
	                showNavigator:          false,
	                mouseNavEnabled:        false,
	                showNavigationControl:  false,
	                showSequenceControl:    false,
	                immediateRender:        true,
	                blendTime:              0,
	                animationTime:          0
	            } );
	
	            miniViewer.displayRegion           = $.makeNeutralElement( "div" );
	            miniViewer.displayRegion.id        = element.id + '-displayregion';
	            miniViewer.displayRegion.className = 'displayregion';
	
	            style               = miniViewer.displayRegion.style;
	            style.position      = 'relative';
	            style.top           = '0px';
	            style.left          = '0px';
	            style.fontSize      = '0px';
	            style.overflow      = 'hidden';
	            style.float         = 'left'; //Webkit
	            style.cssFloat      = 'left'; //Firefox
	            style.styleFloat    = 'left'; //IE
	            style.zIndex        = 999999999;
	            style.cursor        = 'default';
	            style.width         = ( strip.panelWidth - 4 ) + 'px';
	            style.height        = ( strip.panelHeight - 4 ) + 'px';
	
	            // TODO: What is this for? Future keyboard navigation support?
	            miniViewer.displayRegion.innerTracker = new $.MouseTracker( {
	                element: miniViewer.displayRegion,
	                startDisabled: true
	            } );
	
	            element.getElementsByTagName( 'div' )[0].appendChild(
	                miniViewer.displayRegion
	            );
	
	            element.activePanel = true;
	        }
	    }
	}
	
	
	/**
	 * @private
	 * @inner
	 * @function
	 */
	function onStripEnter( event ) {
	    var element = event.eventSource.element;
	
	    //$.setElementOpacity(element, 0.8);
	
	    //element.style.border = '1px solid #555';
	    //element.style.background = '#000';
	
	    if ( 'horizontal' == this.scroll ) {
	
	        //element.style.paddingTop = "0px";
	        element.style.marginBottom = "0px";
	
	    } else {
	
	        //element.style.paddingRight = "0px";
	        element.style.marginLeft = "0px";
	
	    }
	    return false;
	}
	
	
	/**
	 * @private
	 * @inner
	 * @function
	 */
	function onStripExit( event ) {
	    var element = event.eventSource.element;
	
	    if ( 'horizontal' == this.scroll ) {
	
	        //element.style.paddingTop = "10px";
	        element.style.marginBottom = "-" + ( $.getElementSize( element ).y / 2 ) + "px";
	
	    } else {
	
	        //element.style.paddingRight = "10px";
	        element.style.marginLeft = "-" + ( $.getElementSize( element ).x / 2 ) + "px";
	
	    }
	    return false;
	}
	
	
	/**
	 * @private
	 * @inner
	 * @function
	 */
	function onKeyDown( event ) {
	    //console.log( event.keyCode );
	
	    if ( !event.preventDefaultAction && !event.ctrl && !event.alt && !event.meta ) {
	        switch ( event.keyCode ) {
	            case 38: //up arrow
	                onStripScroll.call( this, { eventSource: this.tracker, position: null, scroll: 1, shift: null } );
	                return false;
	            case 40: //down arrow
	                onStripScroll.call( this, { eventSource: this.tracker, position: null, scroll: -1, shift: null } );
	                return false;
	            case 37: //left arrow
	                onStripScroll.call( this, { eventSource: this.tracker, position: null, scroll: -1, shift: null } );
	                return false;
	            case 39: //right arrow
	                onStripScroll.call( this, { eventSource: this.tracker, position: null, scroll: 1, shift: null } );
	                return false;
	            default:
	                //console.log( 'navigator keycode %s', event.keyCode );
	                return true;
	        }
	    } else {
	        return true;
	    }
	}
	
	
	/**
	 * @private
	 * @inner
	 * @function
	 */
	function onKeyPress( event ) {
	    //console.log( event.keyCode );
	
	    if ( !event.preventDefaultAction && !event.ctrl && !event.alt && !event.meta ) {
	        switch ( event.keyCode ) {
	            case 61: //=|+
	                onStripScroll.call( this, { eventSource: this.tracker, position: null, scroll: 1, shift: null } );
	                return false;
	            case 45: //-|_
	                onStripScroll.call( this, { eventSource: this.tracker, position: null, scroll: -1, shift: null } );
	                return false;
	            case 48: //0|)
	            case 119: //w
	            case 87: //W
	                onStripScroll.call( this, { eventSource: this.tracker, position: null, scroll: 1, shift: null } );
	                return false;
	            case 115: //s
	            case 83: //S
	                onStripScroll.call( this, { eventSource: this.tracker, position: null, scroll: -1, shift: null } );
	                return false;
	            case 97: //a
	                onStripScroll.call( this, { eventSource: this.tracker, position: null, scroll: -1, shift: null } );
	                return false;
	            case 100: //d
	                onStripScroll.call( this, { eventSource: this.tracker, position: null, scroll: 1, shift: null } );
	                return false;
	            default:
	                //console.log( 'navigator keycode %s', event.keyCode );
	                return true;
	        }
	    } else {
	        return true;
	    }
	}
	
	
	
	} ( OpenSeadragon ) );
	
	/*
	 * OpenSeadragon - DisplayRect
	 *
	 * Copyright (C) 2009 CodePlex Foundation
	 * Copyright (C) 2010-2013 OpenSeadragon contributors
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 * - Redistributions of source code must retain the above copyright notice,
	 *   this list of conditions and the following disclaimer.
	 *
	 * - Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * - Neither the name of CodePlex Foundation nor the names of its
	 *   contributors may be used to endorse or promote products derived from
	 *   this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
	 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */
	
	(function( $ ){
	
	/**
	 * @class DisplayRect
	 * @classdesc A display rectangle is very similar to {@link OpenSeadragon.Rect} but adds two
	 * fields, 'minLevel' and 'maxLevel' which denote the supported zoom levels
	 * for this rectangle.
	 *
	 * @memberof OpenSeadragon
	 * @extends OpenSeadragon.Rect
	 * @param {Number} x The vector component 'x'.
	 * @param {Number} y The vector component 'y'.
	 * @param {Number} width The vector component 'height'.
	 * @param {Number} height The vector component 'width'.
	 * @param {Number} minLevel The lowest zoom level supported.
	 * @param {Number} maxLevel The highest zoom level supported.
	 */
	$.DisplayRect = function( x, y, width, height, minLevel, maxLevel ) {
	    $.Rect.apply( this, [ x, y, width, height ] );
	
	    /**
	     * The lowest zoom level supported.
	     * @member {Number} minLevel
	     * @memberof OpenSeadragon.DisplayRect#
	     */
	    this.minLevel = minLevel;
	    /**
	     * The highest zoom level supported.
	     * @member {Number} maxLevel
	     * @memberof OpenSeadragon.DisplayRect#
	     */
	    this.maxLevel = maxLevel;
	};
	
	$.extend( $.DisplayRect.prototype, $.Rect.prototype );
	
	}( OpenSeadragon ));
	
	/*
	 * OpenSeadragon - Spring
	 *
	 * Copyright (C) 2009 CodePlex Foundation
	 * Copyright (C) 2010-2013 OpenSeadragon contributors
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 * - Redistributions of source code must retain the above copyright notice,
	 *   this list of conditions and the following disclaimer.
	 *
	 * - Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * - Neither the name of CodePlex Foundation nor the names of its
	 *   contributors may be used to endorse or promote products derived from
	 *   this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
	 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */
	
	(function( $ ){
	
	/**
	 * @class Spring
	 * @memberof OpenSeadragon
	 * @param {Object} options - Spring configuration settings.
	 * @param {Number} options.springStiffness - Spring stiffness. Must be greater than zero.
	 * The closer to zero, the closer to linear animation.
	 * @param {Number} options.animationTime - Animation duration per spring, in seconds.
	 * Must be zero or greater.
	 * @param {Number} [options.initial=0] - Initial value of spring.
	 * @param {Boolean} [options.exponential=false] - Whether this spring represents
	 * an exponential scale (such as zoom) and should be animated accordingly. Note that
	 * exponential springs must have non-zero values.
	 */
	$.Spring = function( options ) {
	    var args = arguments;
	
	    if( typeof( options ) != 'object' ){
	        //allows backward compatible use of ( initialValue, config ) as
	        //constructor parameters
	        options = {
	            initial: args.length && typeof ( args[ 0 ] ) == "number" ?
	                args[ 0 ] :
	                undefined,
	            /**
	             * Spring stiffness.
	             * @member {Number} springStiffness
	             * @memberof OpenSeadragon.Spring#
	             */
	            springStiffness: args.length > 1 ?
	                args[ 1 ].springStiffness :
	                5.0,
	            /**
	             * Animation duration per spring.
	             * @member {Number} animationTime
	             * @memberof OpenSeadragon.Spring#
	             */
	            animationTime: args.length > 1 ?
	                args[ 1 ].animationTime :
	                1.5
	        };
	    }
	
	    $.console.assert(typeof options.springStiffness === "number" && options.springStiffness !== 0,
	        "[OpenSeadragon.Spring] options.springStiffness must be a non-zero number");
	
	    $.console.assert(typeof options.animationTime === "number" && options.animationTime >= 0,
	        "[OpenSeadragon.Spring] options.animationTime must be a number greater than or equal to 0");
	
	    if (options.exponential) {
	        this._exponential = true;
	        delete options.exponential;
	    }
	
	    $.extend( true, this, options);
	
	    /**
	     * @member {Object} current
	     * @memberof OpenSeadragon.Spring#
	     * @property {Number} value
	     * @property {Number} time
	     */
	    this.current = {
	        value: typeof ( this.initial ) == "number" ?
	            this.initial :
	            (this._exponential ? 0 : 1),
	        time:  $.now() // always work in milliseconds
	    };
	
	    $.console.assert(!this._exponential || this.current.value !== 0,
	        "[OpenSeadragon.Spring] value must be non-zero for exponential springs");
	
	    /**
	     * @member {Object} start
	     * @memberof OpenSeadragon.Spring#
	     * @property {Number} value
	     * @property {Number} time
	     */
	    this.start = {
	        value: this.current.value,
	        time:  this.current.time
	    };
	
	    /**
	     * @member {Object} target
	     * @memberof OpenSeadragon.Spring#
	     * @property {Number} value
	     * @property {Number} time
	     */
	    this.target = {
	        value: this.current.value,
	        time:  this.current.time
	    };
	
	    if (this._exponential) {
	        this.start._logValue = Math.log(this.start.value);
	        this.target._logValue = Math.log(this.target.value);
	        this.current._logValue = Math.log(this.current.value);
	    }
	};
	
	/** @lends OpenSeadragon.Spring.prototype */
	$.Spring.prototype = {
	
	    /**
	     * @function
	     * @param {Number} target
	     */
	    resetTo: function( target ) {
	        $.console.assert(!this._exponential || target !== 0,
	            "[OpenSeadragon.Spring.resetTo] target must be non-zero for exponential springs");
	
	        this.start.value = this.target.value = this.current.value = target;
	        this.start.time = this.target.time = this.current.time = $.now();
	
	        if (this._exponential) {
	            this.start._logValue = Math.log(this.start.value);
	            this.target._logValue = Math.log(this.target.value);
	            this.current._logValue = Math.log(this.current.value);
	        }
	    },
	
	    /**
	     * @function
	     * @param {Number} target
	     */
	    springTo: function( target ) {
	        $.console.assert(!this._exponential || target !== 0,
	            "[OpenSeadragon.Spring.springTo] target must be non-zero for exponential springs");
	
	        this.start.value  = this.current.value;
	        this.start.time   = this.current.time;
	        this.target.value = target;
	        this.target.time  = this.start.time + 1000 * this.animationTime;
	
	        if (this._exponential) {
	            this.start._logValue = Math.log(this.start.value);
	            this.target._logValue = Math.log(this.target.value);
	        }
	    },
	
	    /**
	     * @function
	     * @param {Number} delta
	     */
	    shiftBy: function( delta ) {
	        this.start.value  += delta;
	        this.target.value += delta;
	
	        if (this._exponential) {
	            $.console.assert(this.target.value !== 0 && this.start.value !== 0,
	                "[OpenSeadragon.Spring.shiftBy] spring value must be non-zero for exponential springs");
	
	            this.start._logValue = Math.log(this.start.value);
	            this.target._logValue = Math.log(this.target.value);
	        }
	    },
	
	    setExponential: function(value) {
	        this._exponential = value;
	
	        if (this._exponential) {
	            $.console.assert(this.current.value !== 0 && this.target.value !== 0 && this.start.value !== 0,
	                "[OpenSeadragon.Spring.setExponential] spring value must be non-zero for exponential springs");
	
	            this.start._logValue = Math.log(this.start.value);
	            this.target._logValue = Math.log(this.target.value);
	            this.current._logValue = Math.log(this.current.value);
	        }
	    },
	
	    /**
	     * @function
	     */
	    update: function() {
	        this.current.time  = $.now();
	
	        var startValue, targetValue;
	        if (this._exponential) {
	            startValue = this.start._logValue;
	            targetValue = this.target._logValue;
	        } else {
	            startValue = this.start.value;
	            targetValue = this.target.value;
	        }
	
	        var currentValue = (this.current.time >= this.target.time) ?
	            targetValue :
	            startValue +
	                ( targetValue - startValue ) *
	                transform(
	                    this.springStiffness,
	                    ( this.current.time - this.start.time ) /
	                    ( this.target.time  - this.start.time )
	                );
	
	        if (this._exponential) {
	            this.current.value = Math.exp(currentValue);
	        } else {
	            this.current.value = currentValue;
	        }
	    },
	
	    /**
	     * Returns whether the spring is at the target value
	     * @function
	     * @returns {Boolean} True if at target value, false otherwise
	     */
	    isAtTargetValue: function() {
	        return this.current.value === this.target.value;
	    }
	};
	
	/**
	 * @private
	 */
	function transform( stiffness, x ) {
	    return ( 1.0 - Math.exp( stiffness * -x ) ) /
	        ( 1.0 - Math.exp( -stiffness ) );
	}
	
	}( OpenSeadragon ));
	
	/*
	 * OpenSeadragon - ImageLoader
	 *
	 * Copyright (C) 2009 CodePlex Foundation
	 * Copyright (C) 2010-2013 OpenSeadragon contributors
	
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 * - Redistributions of source code must retain the above copyright notice,
	 *   this list of conditions and the following disclaimer.
	 *
	 * - Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * - Neither the name of CodePlex Foundation nor the names of its
	 *   contributors may be used to endorse or promote products derived from
	 *   this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
	 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */
	
	(function( $ ){
	
	// private class
	function ImageJob ( options ) {
	
	    $.extend( true, this, {
	        timeout:        $.DEFAULT_SETTINGS.timeout,
	        jobId:          null
	    }, options );
	
	    /**
	     * Image object which will contain downloaded image.
	     * @member {Image} image
	     * @memberof OpenSeadragon.ImageJob#
	     */
	    this.image = null;
	}
	
	ImageJob.prototype = {
	    errorMsg: null,
	    start: function(){
	        var _this = this;
	
	        this.image = new Image();
	
	        if ( this.crossOriginPolicy !== false ) {
	            this.image.crossOrigin = this.crossOriginPolicy;
	        }
	
	        this.image.onload = function(){
	            _this.finish( true );
	        };
	        this.image.onabort = this.image.onerror = function(){
	            _this.errorMsg = "Image load aborted";
	            _this.finish( false );
	        };
	
	        this.jobId = window.setTimeout( function(){
	            _this.errorMsg = "Image load exceeded timeout";
	            _this.finish( false );
	        }, this.timeout);
	
	        this.image.src = this.src;
	    },
	
	    finish: function( successful ) {
	        this.image.onload = this.image.onerror = this.image.onabort = null;
	        if (!successful) {
	            this.image = null;
	        }
	
	        if ( this.jobId ) {
	            window.clearTimeout( this.jobId );
	        }
	
	        this.callback( this );
	    }
	
	};
	
	/**
	 * @class ImageLoader
	 * @memberof OpenSeadragon
	 * @classdesc Handles downloading of a set of images using asynchronous queue pattern.
	 * You generally won't have to interact with the ImageLoader directly.
	 * @param {Object} options - Options for this ImageLoader.
	 * @param {Number} [options.jobLimit] - The number of concurrent image requests. See imageLoaderLimit in {@link OpenSeadragon.Options} for details.
	 */
	$.ImageLoader = function( options ) {
	
	    $.extend( true, this, {
	        jobLimit:       $.DEFAULT_SETTINGS.imageLoaderLimit,
	        jobQueue:       [],
	        jobsInProgress: 0
	    }, options );
	
	};
	
	/** @lends OpenSeadragon.ImageLoader.prototype */
	$.ImageLoader.prototype = {
	
	    /**
	     * Add an unloaded image to the loader queue.
	     * @method
	     * @param {String} src - URL of image to download.
	     * @param {String} crossOriginPolicy - CORS policy to use for downloads
	     * @param {Function} callback - Called once image has been downloaded.
	     */
	    addJob: function( options ) {
	        var _this = this,
	            complete = function( job ) {
	                completeJob( _this, job, options.callback );
	            },
	            jobOptions = {
	                src: options.src,
	                crossOriginPolicy: options.crossOriginPolicy,
	                callback: complete,
	                abort: options.abort
	            },
	            newJob = new ImageJob( jobOptions );
	
	        if ( !this.jobLimit || this.jobsInProgress < this.jobLimit ) {
	            newJob.start();
	            this.jobsInProgress++;
	        }
	        else {
	            this.jobQueue.push( newJob );
	        }
	    },
	
	    /**
	     * Clear any unstarted image loading jobs from the queue.
	     * @method
	     */
	    clear: function() {
	        for( var i = 0; i < this.jobQueue.length; i++ ) {
	            var job = this.jobQueue[i];
	            if ( typeof job.abort === "function" ) {
	                job.abort();
	            }
	        }
	
	        this.jobQueue = [];
	    }
	};
	
	/**
	 * Cleans up ImageJob once completed.
	 * @method
	 * @private
	 * @param loader - ImageLoader used to start job.
	 * @param job - The ImageJob that has completed.
	 * @param callback - Called once cleanup is finished.
	 */
	function completeJob( loader, job, callback ) {
	    var nextJob;
	
	    loader.jobsInProgress--;
	
	    if ( (!loader.jobLimit || loader.jobsInProgress < loader.jobLimit) && loader.jobQueue.length > 0) {
	        nextJob = loader.jobQueue.shift();
	        nextJob.start();
	        loader.jobsInProgress++;
	    }
	
	    callback( job.image, job.errorMsg );
	}
	
	}( OpenSeadragon ));
	
	/*
	 * OpenSeadragon - Tile
	 *
	 * Copyright (C) 2009 CodePlex Foundation
	 * Copyright (C) 2010-2013 OpenSeadragon contributors
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 * - Redistributions of source code must retain the above copyright notice,
	 *   this list of conditions and the following disclaimer.
	 *
	 * - Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * - Neither the name of CodePlex Foundation nor the names of its
	 *   contributors may be used to endorse or promote products derived from
	 *   this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
	 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */
	
	(function( $ ){
	
	/**
	 * @class Tile
	 * @memberof OpenSeadragon
	 * @param {Number} level The zoom level this tile belongs to.
	 * @param {Number} x The vector component 'x'.
	 * @param {Number} y The vector component 'y'.
	 * @param {OpenSeadragon.Point} bounds Where this tile fits, in normalized
	 *      coordinates.
	 * @param {Boolean} exists Is this tile a part of a sparse image? ( Also has
	 *      this tile failed to load? )
	 * @param {String} url The URL of this tile's image.
	 * @param {CanvasRenderingContext2D} context2D The context2D of this tile if it
	 * is provided directly by the tile source.
	 */
	$.Tile = function(level, x, y, bounds, exists, url, context2D) {
	    /**
	     * The zoom level this tile belongs to.
	     * @member {Number} level
	     * @memberof OpenSeadragon.Tile#
	     */
	    this.level   = level;
	    /**
	     * The vector component 'x'.
	     * @member {Number} x
	     * @memberof OpenSeadragon.Tile#
	     */
	    this.x       = x;
	    /**
	     * The vector component 'y'.
	     * @member {Number} y
	     * @memberof OpenSeadragon.Tile#
	     */
	    this.y       = y;
	    /**
	     * Where this tile fits, in normalized coordinates
	     * @member {OpenSeadragon.Rect} bounds
	     * @memberof OpenSeadragon.Tile#
	     */
	    this.bounds  = bounds;
	    /**
	     * Is this tile a part of a sparse image? Also has this tile failed to load?
	     * @member {Boolean} exists
	     * @memberof OpenSeadragon.Tile#
	     */
	    this.exists  = exists;
	    /**
	     * The URL of this tile's image.
	     * @member {String} url
	     * @memberof OpenSeadragon.Tile#
	     */
	    this.url     = url;
	    /**
	     * The context2D of this tile if it is provided directly by the tile source.
	     * @member {CanvasRenderingContext2D} context2D
	     * @memberOf OpenSeadragon.Tile#
	     */
	    this.context2D = context2D;
	    /**
	     * Is this tile loaded?
	     * @member {Boolean} loaded
	     * @memberof OpenSeadragon.Tile#
	     */
	    this.loaded  = false;
	    /**
	     * Is this tile loading?
	     * @member {Boolean} loading
	     * @memberof OpenSeadragon.Tile#
	     */
	    this.loading = false;
	
	    /**
	     * The HTML div element for this tile
	     * @member {Element} element
	     * @memberof OpenSeadragon.Tile#
	     */
	    this.element    = null;
	    /**
	     * The HTML img element for this tile.
	     * @member {Element} imgElement
	     * @memberof OpenSeadragon.Tile#
	     */
	    this.imgElement = null;
	    /**
	     * The Image object for this tile.
	     * @member {Object} image
	     * @memberof OpenSeadragon.Tile#
	     */
	    this.image      = null;
	
	    /**
	     * The alias of this.element.style.
	     * @member {String} style
	     * @memberof OpenSeadragon.Tile#
	     */
	    this.style      = null;
	    /**
	     * This tile's position on screen, in pixels.
	     * @member {OpenSeadragon.Point} position
	     * @memberof OpenSeadragon.Tile#
	     */
	    this.position   = null;
	    /**
	     * This tile's size on screen, in pixels.
	     * @member {OpenSeadragon.Point} size
	     * @memberof OpenSeadragon.Tile#
	     */
	    this.size       = null;
	    /**
	     * The start time of this tile's blending.
	     * @member {Number} blendStart
	     * @memberof OpenSeadragon.Tile#
	     */
	    this.blendStart = null;
	    /**
	     * The current opacity this tile should be.
	     * @member {Number} opacity
	     * @memberof OpenSeadragon.Tile#
	     */
	    this.opacity    = null;
	    /**
	     * The distance of this tile to the viewport center.
	     * @member {Number} distance
	     * @memberof OpenSeadragon.Tile#
	     */
	    this.distance   = null;
	    /**
	     * The visibility score of this tile.
	     * @member {Number} visibility
	     * @memberof OpenSeadragon.Tile#
	     */
	    this.visibility = null;
	
	    /**
	     * Whether this tile is currently being drawn.
	     * @member {Boolean} beingDrawn
	     * @memberof OpenSeadragon.Tile#
	     */
	    this.beingDrawn     = false;
	    /**
	     * Timestamp the tile was last touched.
	     * @member {Number} lastTouchTime
	     * @memberof OpenSeadragon.Tile#
	     */
	    this.lastTouchTime  = 0;
	};
	
	/** @lends OpenSeadragon.Tile.prototype */
	$.Tile.prototype = {
	
	    /**
	     * Provides a string representation of this tiles level and (x,y)
	     * components.
	     * @function
	     * @returns {String}
	     */
	    toString: function() {
	        return this.level + "/" + this.x + "_" + this.y;
	    },
	
	    // private
	    _hasTransparencyChannel: function() {
	        return !!this.context2D || this.url.match('.png');
	    },
	
	    /**
	     * Renders the tile in an html container.
	     * @function
	     * @param {Element} container
	     */
	    drawHTML: function( container ) {
	        if (!this.cacheImageRecord) {
	            $.console.warn(
	                '[Tile.drawHTML] attempting to draw tile %s when it\'s not cached',
	                this.toString());
	            return;
	        }
	
	        if ( !this.loaded ) {
	            $.console.warn(
	                "Attempting to draw tile %s when it's not yet loaded.",
	                this.toString()
	            );
	            return;
	        }
	
	        //EXPERIMENTAL - trying to figure out how to scale the container
	        //               content during animation of the container size.
	
	        if ( !this.element ) {
	            this.element                              = $.makeNeutralElement( "div" );
	            this.imgElement                           = this.cacheImageRecord.getImage().cloneNode();
	            this.imgElement.style.msInterpolationMode = "nearest-neighbor";
	            this.imgElement.style.width               = "100%";
	            this.imgElement.style.height              = "100%";
	
	            this.style                     = this.element.style;
	            this.style.position            = "absolute";
	        }
	        if ( this.element.parentNode != container ) {
	            container.appendChild( this.element );
	        }
	        if ( this.imgElement.parentNode != this.element ) {
	            this.element.appendChild( this.imgElement );
	        }
	
	        this.style.top     = this.position.y + "px";
	        this.style.left    = this.position.x + "px";
	        this.style.height  = this.size.y + "px";
	        this.style.width   = this.size.x + "px";
	
	        $.setElementOpacity( this.element, this.opacity );
	    },
	
	    /**
	     * Renders the tile in a canvas-based context.
	     * @function
	     * @param {Canvas} context
	     * @param {Function} drawingHandler - Method for firing the drawing event.
	     * drawingHandler({context, tile, rendered})
	     * where <code>rendered</code> is the context with the pre-drawn image.
	     * @param {Number} [scale=1] - Apply a scale to position and size
	     * @param {OpenSeadragon.Point} [translate] - A translation vector
	     */
	    drawCanvas: function( context, drawingHandler, scale, translate ) {
	
	        var position = this.position.times($.pixelDensityRatio),
	            size     = this.size.times($.pixelDensityRatio),
	            rendered;
	
	        if (!this.context2D && !this.cacheImageRecord) {
	            $.console.warn(
	                '[Tile.drawCanvas] attempting to draw tile %s when it\'s not cached',
	                this.toString());
	            return;
	        }
	
	        rendered = this.context2D || this.cacheImageRecord.getRenderedContext();
	
	        if ( !this.loaded || !rendered ){
	            $.console.warn(
	                "Attempting to draw tile %s when it's not yet loaded.",
	                this.toString()
	            );
	
	            return;
	        }
	
	        context.save();
	
	        context.globalAlpha = this.opacity;
	
	        if (typeof scale === 'number' && scale !== 1) {
	            // draw tile at a different scale
	            position = position.times(scale);
	            size = size.times(scale);
	        }
	
	        if (translate instanceof $.Point) {
	            // shift tile position slightly
	            position = position.plus(translate);
	        }
	
	        //if we are supposed to be rendering fully opaque rectangle,
	        //ie its done fading or fading is turned off, and if we are drawing
	        //an image with an alpha channel, then the only way
	        //to avoid seeing the tile underneath is to clear the rectangle
	        if (context.globalAlpha === 1 && this._hasTransparencyChannel()) {
	            //clearing only the inside of the rectangle occupied
	            //by the png prevents edge flikering
	            context.clearRect(
	                position.x + 1,
	                position.y + 1,
	                size.x - 2,
	                size.y - 2
	            );
	        }
	
	        // This gives the application a chance to make image manipulation
	        // changes as we are rendering the image
	        drawingHandler({context: context, tile: this, rendered: rendered});
	
	        context.drawImage(
	            rendered.canvas,
	            0,
	            0,
	            rendered.canvas.width,
	            rendered.canvas.height,
	            position.x,
	            position.y,
	            size.x,
	            size.y
	        );
	
	        context.restore();
	    },
	
	    /**
	     * Get the ratio between current and original size.
	     * @function
	     * @return {Float}
	     */
	    getScaleForEdgeSmoothing: function() {
	        var context;
	        if (this.cacheImageRecord) {
	            context = this.cacheImageRecord.getRenderedContext();
	        } else if (this.context2D) {
	            context = this.context2D;
	        } else {
	            $.console.warn(
	                '[Tile.drawCanvas] attempting to get tile scale %s when tile\'s not cached',
	                this.toString());
	            return 1;
	        }
	        return context.canvas.width / (this.size.x * $.pixelDensityRatio);
	    },
	
	    /**
	     * Get a translation vector that when applied to the tile position produces integer coordinates.
	     * Needed to avoid swimming and twitching.
	     * @function
	     * @param {Number} [scale=1] - Scale to be applied to position.
	     * @return {OpenSeadragon.Point}
	     */
	    getTranslationForEdgeSmoothing: function(scale, canvasSize, sketchCanvasSize) {
	        // The translation vector must have positive values, otherwise the image goes a bit off
	        // the sketch canvas to the top and left and we must use negative coordinates to repaint it
	        // to the main canvas. In that case, some browsers throw:
	        // INDEX_SIZE_ERR: DOM Exception 1: Index or size was negative, or greater than the allowed value.
	        var x = Math.max(1, Math.ceil((sketchCanvasSize.x - canvasSize.x) / 2));
	        var y = Math.max(1, Math.ceil((sketchCanvasSize.y - canvasSize.y) / 2));
	        return new $.Point(x, y).minus(
	            this.position
	                .times($.pixelDensityRatio)
	                .times(scale || 1)
	                .apply(function(x) {
	                    return x % 1;
	                })
	        );
	    },
	
	    /**
	     * Removes tile from its container.
	     * @function
	     */
	    unload: function() {
	        if ( this.imgElement && this.imgElement.parentNode ) {
	            this.imgElement.parentNode.removeChild( this.imgElement );
	        }
	        if ( this.element && this.element.parentNode ) {
	            this.element.parentNode.removeChild( this.element );
	        }
	
	        this.element    = null;
	        this.imgElement = null;
	        this.loaded     = false;
	        this.loading    = false;
	    }
	};
	
	}( OpenSeadragon ));
	
	/*
	 * OpenSeadragon - Overlay
	 *
	 * Copyright (C) 2009 CodePlex Foundation
	 * Copyright (C) 2010-2013 OpenSeadragon contributors
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 * - Redistributions of source code must retain the above copyright notice,
	 *   this list of conditions and the following disclaimer.
	 *
	 * - Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * - Neither the name of CodePlex Foundation nor the names of its
	 *   contributors may be used to endorse or promote products derived from
	 *   this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
	 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */
	
	(function($) {
	
	    /**
	     * An enumeration of positions that an overlay may be assigned relative to
	     * the viewport.
	     * It is identical to OpenSeadragon.Placement but is kept for backward
	     * compatibility.
	     * @member OverlayPlacement
	     * @memberof OpenSeadragon
	     * @static
	     * @readonly
	     * @type {Object}
	     * @property {Number} CENTER
	     * @property {Number} TOP_LEFT
	     * @property {Number} TOP
	     * @property {Number} TOP_RIGHT
	     * @property {Number} RIGHT
	     * @property {Number} BOTTOM_RIGHT
	     * @property {Number} BOTTOM
	     * @property {Number} BOTTOM_LEFT
	     * @property {Number} LEFT
	     */
	    $.OverlayPlacement = $.Placement;
	
	    /**
	     * An enumeration of possible ways to handle overlays rotation
	     * @member OverlayRotationMode
	     * @memberOf OpenSeadragon
	     * @static
	     * @readonly
	     * @property {Number} NO_ROTATION The overlay ignore the viewport rotation.
	     * @property {Number} EXACT The overlay use CSS 3 transforms to rotate with
	     * the viewport. If the overlay contains text, it will get rotated as well.
	     * @property {Number} BOUNDING_BOX The overlay adjusts for rotation by
	     * taking the size of the bounding box of the rotated bounds.
	     * Only valid for overlays with Rect location and scalable in both directions.
	     */
	    $.OverlayRotationMode = $.freezeObject({
	        NO_ROTATION: 1,
	        EXACT: 2,
	        BOUNDING_BOX: 3
	    });
	
	    /**
	     * @class Overlay
	     * @classdesc Provides a way to float an HTML element on top of the viewer element.
	     *
	     * @memberof OpenSeadragon
	     * @param {Object} options
	     * @param {Element} options.element
	     * @param {OpenSeadragon.Point|OpenSeadragon.Rect} options.location - The
	     * location of the overlay on the image. If a {@link OpenSeadragon.Point}
	     * is specified, the overlay will be located at this location with respect
	     * to the placement option. If a {@link OpenSeadragon.Rect} is specified,
	     * the overlay will be placed at this location with the corresponding width
	     * and height and placement TOP_LEFT.
	     * @param {OpenSeadragon.Placement} [options.placement=OpenSeadragon.Placement.TOP_LEFT]
	     * Defines what part of the overlay should be at the specified options.location
	     * @param {OpenSeadragon.Overlay.OnDrawCallback} [options.onDraw]
	     * @param {Boolean} [options.checkResize=true] Set to false to avoid to
	     * check the size of the overlay everytime it is drawn in the directions
	     * which are not scaled. It will improve performances but will cause a
	     * misalignment if the overlay size changes.
	     * @param {Number} [options.width] The width of the overlay in viewport
	     * coordinates. If specified, the width of the overlay will be adjusted when
	     * the zoom changes.
	     * @param {Number} [options.height] The height of the overlay in viewport
	     * coordinates. If specified, the height of the overlay will be adjusted when
	     * the zoom changes.
	     * @param {Boolean} [options.rotationMode=OpenSeadragon.OverlayRotationMode.EXACT]
	     * How to handle the rotation of the viewport.
	     */
	    $.Overlay = function(element, location, placement) {
	
	        /**
	         * onDraw callback signature used by {@link OpenSeadragon.Overlay}.
	         *
	         * @callback OnDrawCallback
	         * @memberof OpenSeadragon.Overlay
	         * @param {OpenSeadragon.Point} position
	         * @param {OpenSeadragon.Point} size
	         * @param {Element} element
	         */
	
	        var options;
	        if ($.isPlainObject(element)) {
	            options = element;
	        } else {
	            options = {
	                element: element,
	                location: location,
	                placement: placement
	            };
	        }
	
	        this.element = options.element;
	        this.style = options.element.style;
	        this._init(options);
	    };
	
	    /** @lends OpenSeadragon.Overlay.prototype */
	    $.Overlay.prototype = {
	
	        // private
	        _init: function(options) {
	            this.location = options.location;
	            this.placement = options.placement === undefined ?
	                $.Placement.TOP_LEFT : options.placement;
	            this.onDraw = options.onDraw;
	            this.checkResize = options.checkResize === undefined ?
	                true : options.checkResize;
	
	            // When this.width is not null, the overlay get scaled horizontally
	            this.width = options.width === undefined ? null : options.width;
	
	            // When this.height is not null, the overlay get scaled vertically
	            this.height = options.height === undefined ? null : options.height;
	
	            this.rotationMode = options.rotationMode || $.OverlayRotationMode.EXACT;
	
	            // Having a rect as location is a syntactic sugar
	            if (this.location instanceof $.Rect) {
	                this.width = this.location.width;
	                this.height = this.location.height;
	                this.location = this.location.getTopLeft();
	                this.placement = $.Placement.TOP_LEFT;
	            }
	
	            // Deprecated properties kept for backward compatibility.
	            this.scales = this.width !== null && this.height !== null;
	            this.bounds = new $.Rect(
	                this.location.x, this.location.y, this.width, this.height);
	            this.position = this.location;
	        },
	
	        /**
	         * Internal function to adjust the position of an overlay
	         * depending on it size and placement.
	         * @function
	         * @param {OpenSeadragon.Point} position
	         * @param {OpenSeadragon.Point} size
	         */
	        adjust: function(position, size) {
	            var properties = $.Placement.properties[this.placement];
	            if (!properties) {
	                return;
	            }
	            if (properties.isHorizontallyCentered) {
	                position.x -= size.x / 2;
	            } else if (properties.isRight) {
	                position.x -= size.x;
	            }
	            if (properties.isVerticallyCentered) {
	                position.y -= size.y / 2;
	            } else if (properties.isBottom) {
	                position.y -= size.y;
	            }
	        },
	
	        /**
	         * @function
	         */
	        destroy: function() {
	            var element = this.element;
	            var style = this.style;
	
	            if (element.parentNode) {
	                element.parentNode.removeChild(element);
	                //this should allow us to preserve overlays when required between
	                //pages
	                if (element.prevElementParent) {
	                    style.display = 'none';
	                    //element.prevElementParent.insertBefore(
	                    //    element,
	                    //    element.prevNextSibling
	                    //);
	                    document.body.appendChild(element);
	                }
	            }
	
	            // clear the onDraw callback
	            this.onDraw = null;
	
	            style.top = "";
	            style.left = "";
	            style.position = "";
	
	            if (this.width !== null) {
	                style.width = "";
	            }
	            if (this.height !== null) {
	                style.height = "";
	            }
	            var transformOriginProp = $.getCssPropertyWithVendorPrefix(
	                'transformOrigin');
	            var transformProp = $.getCssPropertyWithVendorPrefix(
	                'transform');
	            if (transformOriginProp && transformProp) {
	                style[transformOriginProp] = "";
	                style[transformProp] = "";
	            }
	        },
	
	        /**
	         * @function
	         * @param {Element} container
	         */
	        drawHTML: function(container, viewport) {
	            var element = this.element;
	            if (element.parentNode !== container) {
	                //save the source parent for later if we need it
	                element.prevElementParent = element.parentNode;
	                element.prevNextSibling = element.nextSibling;
	                container.appendChild(element);
	
	                // this.size is used by overlays which don't get scaled in at
	                // least one direction when this.checkResize is set to false.
	                this.size = $.getElementSize(element);
	            }
	
	            var positionAndSize = this._getOverlayPositionAndSize(viewport);
	
	            var position = positionAndSize.position;
	            var size = this.size = positionAndSize.size;
	            var rotate = positionAndSize.rotate;
	
	            // call the onDraw callback if it exists to allow one to overwrite
	            // the drawing/positioning/sizing of the overlay
	            if (this.onDraw) {
	                this.onDraw(position, size, this.element);
	            } else {
	                var style = this.style;
	                style.left = position.x + "px";
	                style.top = position.y + "px";
	                if (this.width !== null) {
	                    style.width = size.x + "px";
	                }
	                if (this.height !== null) {
	                    style.height = size.y + "px";
	                }
	                var transformOriginProp = $.getCssPropertyWithVendorPrefix(
	                    'transformOrigin');
	                var transformProp = $.getCssPropertyWithVendorPrefix(
	                    'transform');
	                if (transformOriginProp && transformProp) {
	                    if (rotate) {
	                        style[transformOriginProp] = this._getTransformOrigin();
	                        style[transformProp] = "rotate(" + rotate + "deg)";
	                    } else {
	                        style[transformOriginProp] = "";
	                        style[transformProp] = "";
	                    }
	                }
	                style.position = "absolute";
	
	                if (style.display !== 'none') {
	                    style.display = 'block';
	                }
	            }
	        },
	
	        // private
	        _getOverlayPositionAndSize: function(viewport) {
	            var position = viewport.pixelFromPoint(this.location, true);
	            var size = this._getSizeInPixels(viewport);
	            this.adjust(position, size);
	
	            var rotate = 0;
	            if (viewport.degrees &&
	                this.rotationMode !== $.OverlayRotationMode.NO_ROTATION) {
	                // BOUNDING_BOX is only valid if both directions get scaled.
	                // Get replaced by EXACT otherwise.
	                if (this.rotationMode === $.OverlayRotationMode.BOUNDING_BOX &&
	                    this.width !== null && this.height !== null) {
	                    var rect = new $.Rect(position.x, position.y, size.x, size.y);
	                    var boundingBox = this._getBoundingBox(rect, viewport.degrees);
	                    position = boundingBox.getTopLeft();
	                    size = boundingBox.getSize();
	                } else {
	                    rotate = viewport.degrees;
	                }
	            }
	
	            return {
	                position: position,
	                size: size,
	                rotate: rotate
	            };
	        },
	
	        // private
	        _getSizeInPixels: function(viewport) {
	            var width = this.size.x;
	            var height = this.size.y;
	            if (this.width !== null || this.height !== null) {
	                var scaledSize = viewport.deltaPixelsFromPointsNoRotate(
	                    new $.Point(this.width || 0, this.height || 0), true);
	                if (this.width !== null) {
	                    width = scaledSize.x;
	                }
	                if (this.height !== null) {
	                    height = scaledSize.y;
	                }
	            }
	            if (this.checkResize &&
	                (this.width === null || this.height === null)) {
	                var eltSize = this.size = $.getElementSize(this.element);
	                if (this.width === null) {
	                    width = eltSize.x;
	                }
	                if (this.height === null) {
	                    height = eltSize.y;
	                }
	            }
	            return new $.Point(width, height);
	        },
	
	        // private
	        _getBoundingBox: function(rect, degrees) {
	            var refPoint = this._getPlacementPoint(rect);
	            return rect.rotate(degrees, refPoint).getBoundingBox();
	        },
	
	        // private
	        _getPlacementPoint: function(rect) {
	            var result = new $.Point(rect.x, rect.y);
	            var properties = $.Placement.properties[this.placement];
	            if (properties) {
	                if (properties.isHorizontallyCentered) {
	                    result.x += rect.width / 2;
	                } else if (properties.isRight) {
	                    result.x += rect.width;
	                }
	                if (properties.isVerticallyCentered) {
	                    result.y += rect.height / 2;
	                } else if (properties.isBottom) {
	                    result.y += rect.height;
	                }
	            }
	            return result;
	        },
	
	        // private
	        _getTransformOrigin: function() {
	            var result = "";
	            var properties = $.Placement.properties[this.placement];
	            if (!properties) {
	                return result;
	            }
	            if (properties.isLeft) {
	                result = "left";
	            } else if (properties.isRight) {
	                result = "right";
	            }
	            if (properties.isTop) {
	                result += " top";
	            } else if (properties.isBottom) {
	                result += " bottom";
	            }
	            return result;
	        },
	
	        /**
	         * Changes the overlay settings.
	         * @function
	         * @param {OpenSeadragon.Point|OpenSeadragon.Rect|Object} location
	         * If an object is specified, the options are the same than the constructor
	         * except for the element which can not be changed.
	         * @param {OpenSeadragon.Placement} position
	         */
	        update: function(location, placement) {
	            var options = $.isPlainObject(location) ? location : {
	                location: location,
	                placement: placement
	            };
	            this._init({
	                location: options.location || this.location,
	                placement: options.placement !== undefined ?
	                    options.placement : this.placement,
	                onDraw: options.onDraw || this.onDraw,
	                checkResize: options.checkResize || this.checkResize,
	                width: options.width !== undefined ? options.width : this.width,
	                height: options.height !== undefined ? options.height : this.height,
	                rotationMode: options.rotationMode || this.rotationMode
	            });
	        },
	
	        /**
	         * Returns the current bounds of the overlay in viewport coordinates
	         * @function
	         * @param {OpenSeadragon.Viewport} viewport the viewport
	         * @returns {OpenSeadragon.Rect} overlay bounds
	         */
	        getBounds: function(viewport) {
	            $.console.assert(viewport,
	                'A viewport must now be passed to Overlay.getBounds.');
	            var width = this.width;
	            var height = this.height;
	            if (width === null || height === null) {
	                var size = viewport.deltaPointsFromPixelsNoRotate(this.size, true);
	                if (width === null) {
	                    width = size.x;
	                }
	                if (height === null) {
	                    height = size.y;
	                }
	            }
	            var location = this.location.clone();
	            this.adjust(location, new $.Point(width, height));
	            return this._adjustBoundsForRotation(
	                viewport, new $.Rect(location.x, location.y, width, height));
	        },
	
	        // private
	        _adjustBoundsForRotation: function(viewport, bounds) {
	            if (!viewport ||
	                viewport.degrees === 0 ||
	                this.rotationMode === $.OverlayRotationMode.EXACT) {
	                return bounds;
	            }
	            if (this.rotationMode === $.OverlayRotationMode.BOUNDING_BOX) {
	                // If overlay not fully scalable, BOUNDING_BOX falls back to EXACT
	                if (this.width === null || this.height === null) {
	                    return bounds;
	                }
	                // It is easier to just compute the position and size and
	                // convert to viewport coordinates.
	                var positionAndSize = this._getOverlayPositionAndSize(viewport);
	                return viewport.viewerElementToViewportRectangle(new $.Rect(
	                    positionAndSize.position.x,
	                    positionAndSize.position.y,
	                    positionAndSize.size.x,
	                    positionAndSize.size.y));
	            }
	
	            // NO_ROTATION case
	            return bounds.rotate(-viewport.degrees,
	                this._getPlacementPoint(bounds));
	        }
	    };
	
	}(OpenSeadragon));
	
	/*
	 * OpenSeadragon - Drawer
	 *
	 * Copyright (C) 2009 CodePlex Foundation
	 * Copyright (C) 2010-2013 OpenSeadragon contributors
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 * - Redistributions of source code must retain the above copyright notice,
	 *   this list of conditions and the following disclaimer.
	 *
	 * - Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * - Neither the name of CodePlex Foundation nor the names of its
	 *   contributors may be used to endorse or promote products derived from
	 *   this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
	 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */
	
	(function( $ ){
	
	/**
	 * @class Drawer
	 * @memberof OpenSeadragon
	 * @classdesc Handles rendering of tiles for an {@link OpenSeadragon.Viewer}.
	 * @param {Object} options - Options for this Drawer.
	 * @param {OpenSeadragon.Viewer} options.viewer - The Viewer that owns this Drawer.
	 * @param {OpenSeadragon.Viewport} options.viewport - Reference to Viewer viewport.
	 * @param {Element} options.element - Parent element.
	 * @param {Number} [options.debugGridColor] - See debugGridColor in {@link OpenSeadragon.Options} for details.
	 */
	$.Drawer = function( options ) {
	
	    $.console.assert( options.viewer, "[Drawer] options.viewer is required" );
	
	    //backward compatibility for positional args while prefering more
	    //idiomatic javascript options object as the only argument
	    var args  = arguments;
	
	    if( !$.isPlainObject( options ) ){
	        options = {
	            source:     args[ 0 ], // Reference to Viewer tile source.
	            viewport:   args[ 1 ], // Reference to Viewer viewport.
	            element:    args[ 2 ]  // Parent element.
	        };
	    }
	
	    $.console.assert( options.viewport, "[Drawer] options.viewport is required" );
	    $.console.assert( options.element, "[Drawer] options.element is required" );
	
	    if ( options.source ) {
	        $.console.error( "[Drawer] options.source is no longer accepted; use TiledImage instead" );
	    }
	
	    this.viewer = options.viewer;
	    this.viewport = options.viewport;
	    this.debugGridColor = options.debugGridColor || $.DEFAULT_SETTINGS.debugGridColor;
	    if (options.opacity) {
	        $.console.error( "[Drawer] options.opacity is no longer accepted; set the opacity on the TiledImage instead" );
	    }
	
	    this.useCanvas  = $.supportsCanvas && ( this.viewer ? this.viewer.useCanvas : true );
	    /**
	     * The parent element of this Drawer instance, passed in when the Drawer was created.
	     * The parent of {@link OpenSeadragon.Drawer#canvas}.
	     * @member {Element} container
	     * @memberof OpenSeadragon.Drawer#
	     */
	    this.container  = $.getElement( options.element );
	    /**
	     * A &lt;canvas&gt; element if the browser supports them, otherwise a &lt;div&gt; element.
	     * Child element of {@link OpenSeadragon.Drawer#container}.
	     * @member {Element} canvas
	     * @memberof OpenSeadragon.Drawer#
	     */
	    this.canvas     = $.makeNeutralElement( this.useCanvas ? "canvas" : "div" );
	    /**
	     * 2d drawing context for {@link OpenSeadragon.Drawer#canvas} if it's a &lt;canvas&gt; element, otherwise null.
	     * @member {Object} context
	     * @memberof OpenSeadragon.Drawer#
	     */
	    this.context    = this.useCanvas ? this.canvas.getContext( "2d" ) : null;
	
	    /**
	     * Sketch canvas used to temporarily draw tiles which cannot be drawn directly
	     * to the main canvas due to opacity. Lazily initialized.
	     */
	    this.sketchCanvas = null;
	    this.sketchContext = null;
	
	    /**
	     * @member {Element} element
	     * @memberof OpenSeadragon.Drawer#
	     * @deprecated Alias for {@link OpenSeadragon.Drawer#container}.
	     */
	    this.element    = this.container;
	
	    // We force our container to ltr because our drawing math doesn't work in rtl.
	    // This issue only affects our canvas renderer, but we do it always for consistency.
	    // Note that this means overlays you want to be rtl need to be explicitly set to rtl.
	    this.container.dir = 'ltr';
	
	    // check canvas available width and height, set canvas width and height such that the canvas backing store is set to the proper pixel density
	    if (this.useCanvas) {
	        var viewportSize = this._calculateCanvasSize();
	        this.canvas.width = viewportSize.x;
	        this.canvas.height = viewportSize.y;
	    }
	
	    this.canvas.style.width     = "100%";
	    this.canvas.style.height    = "100%";
	    this.canvas.style.position  = "absolute";
	    $.setElementOpacity( this.canvas, this.opacity, true );
	
	    // explicit left-align
	    this.container.style.textAlign = "left";
	    this.container.appendChild( this.canvas );
	};
	
	/** @lends OpenSeadragon.Drawer.prototype */
	$.Drawer.prototype = {
	    // deprecated
	    addOverlay: function( element, location, placement, onDraw ) {
	        $.console.error("drawer.addOverlay is deprecated. Use viewer.addOverlay instead.");
	        this.viewer.addOverlay( element, location, placement, onDraw );
	        return this;
	    },
	
	    // deprecated
	    updateOverlay: function( element, location, placement ) {
	        $.console.error("drawer.updateOverlay is deprecated. Use viewer.updateOverlay instead.");
	        this.viewer.updateOverlay( element, location, placement );
	        return this;
	    },
	
	    // deprecated
	    removeOverlay: function( element ) {
	        $.console.error("drawer.removeOverlay is deprecated. Use viewer.removeOverlay instead.");
	        this.viewer.removeOverlay( element );
	        return this;
	    },
	
	    // deprecated
	    clearOverlays: function() {
	        $.console.error("drawer.clearOverlays is deprecated. Use viewer.clearOverlays instead.");
	        this.viewer.clearOverlays();
	        return this;
	    },
	
	    /**
	     * Set the opacity of the drawer.
	     * @param {Number} opacity
	     * @return {OpenSeadragon.Drawer} Chainable.
	     */
	    setOpacity: function( opacity ) {
	        $.console.error("drawer.setOpacity is deprecated. Use tiledImage.setOpacity instead.");
	        var world = this.viewer.world;
	        for (var i = 0; i < world.getItemCount(); i++) {
	            world.getItemAt( i ).setOpacity( opacity );
	        }
	        return this;
	    },
	
	    /**
	     * Get the opacity of the drawer.
	     * @returns {Number}
	     */
	    getOpacity: function() {
	        $.console.error("drawer.getOpacity is deprecated. Use tiledImage.getOpacity instead.");
	        var world = this.viewer.world;
	        var maxOpacity = 0;
	        for (var i = 0; i < world.getItemCount(); i++) {
	            var opacity = world.getItemAt( i ).getOpacity();
	            if ( opacity > maxOpacity ) {
	                maxOpacity = opacity;
	            }
	        }
	        return maxOpacity;
	    },
	
	    // deprecated
	    needsUpdate: function() {
	        $.console.error( "[Drawer.needsUpdate] this function is deprecated. Use World.needsDraw instead." );
	        return this.viewer.world.needsDraw();
	    },
	
	    // deprecated
	    numTilesLoaded: function() {
	        $.console.error( "[Drawer.numTilesLoaded] this function is deprecated. Use TileCache.numTilesLoaded instead." );
	        return this.viewer.tileCache.numTilesLoaded();
	    },
	
	    // deprecated
	    reset: function() {
	        $.console.error( "[Drawer.reset] this function is deprecated. Use World.resetItems instead." );
	        this.viewer.world.resetItems();
	        return this;
	    },
	
	    // deprecated
	    update: function() {
	        $.console.error( "[Drawer.update] this function is deprecated. Use Drawer.clear and World.draw instead." );
	        this.clear();
	        this.viewer.world.draw();
	        return this;
	    },
	
	    /**
	     * @return {Boolean} True if rotation is supported.
	     */
	    canRotate: function() {
	        return this.useCanvas;
	    },
	
	    /**
	     * Destroy the drawer (unload current loaded tiles)
	     */
	    destroy: function() {
	        //force unloading of current canvas (1x1 will be gc later, trick not necessarily needed)
	        this.canvas.width  = 1;
	        this.canvas.height = 1;
	        this.sketchCanvas = null;
	        this.sketchContext = null;
	    },
	
	    /**
	     * Clears the Drawer so it's ready to draw another frame.
	     */
	    clear: function() {
	        this.canvas.innerHTML = "";
	        if ( this.useCanvas ) {
	            var viewportSize = this._calculateCanvasSize();
	            if( this.canvas.width != viewportSize.x ||
	                this.canvas.height != viewportSize.y ) {
	                this.canvas.width = viewportSize.x;
	                this.canvas.height = viewportSize.y;
	                if ( this.sketchCanvas !== null ) {
	                    var sketchCanvasSize = this._calculateSketchCanvasSize();
	                    this.sketchCanvas.width = sketchCanvasSize.x;
	                    this.sketchCanvas.height = sketchCanvasSize.y;
	                }
	            }
	            this._clear();
	        }
	    },
	
	    _clear: function (useSketch, bounds) {
	        if (!this.useCanvas) {
	            return;
	        }
	        var context = this._getContext(useSketch);
	        if (bounds) {
	            context.clearRect(bounds.x, bounds.y, bounds.width, bounds.height);
	        } else {
	            var canvas = context.canvas;
	            context.clearRect(0, 0, canvas.width, canvas.height);
	        }
	    },
	
	    /**
	     * Scale from OpenSeadragon viewer rectangle to drawer rectangle
	     * (ignoring rotation)
	     * @param {OpenSeadragon.Rect} rectangle - The rectangle in viewport coordinate system.
	     * @return {OpenSeadragon.Rect} Rectangle in drawer coordinate system.
	     */
	    viewportToDrawerRectangle: function(rectangle) {
	        var topLeft = this.viewport.pixelFromPointNoRotate(rectangle.getTopLeft(), true);
	        var size = this.viewport.deltaPixelsFromPointsNoRotate(rectangle.getSize(), true);
	
	        return new $.Rect(
	            topLeft.x * $.pixelDensityRatio,
	            topLeft.y * $.pixelDensityRatio,
	            size.x    * $.pixelDensityRatio,
	            size.y    * $.pixelDensityRatio
	        );
	    },
	
	    /**
	     * Draws the given tile.
	     * @param {OpenSeadragon.Tile} tile - The tile to draw.
	     * @param {Function} drawingHandler - Method for firing the drawing event if using canvas.
	     * drawingHandler({context, tile, rendered})
	     * @param {Boolean} useSketch - Whether to use the sketch canvas or not.
	     * where <code>rendered</code> is the context with the pre-drawn image.
	     * @param {Float} [scale=1] - Apply a scale to tile position and size. Defaults to 1.
	     * @param {OpenSeadragon.Point} [translate] A translation vector to offset tile position
	     */
	    drawTile: function(tile, drawingHandler, useSketch, scale, translate) {
	        $.console.assert(tile, '[Drawer.drawTile] tile is required');
	        $.console.assert(drawingHandler, '[Drawer.drawTile] drawingHandler is required');
	
	        if (this.useCanvas) {
	            var context = this._getContext(useSketch);
	            scale = scale || 1;
	            tile.drawCanvas(context, drawingHandler, scale, translate);
	        } else {
	            tile.drawHTML( this.canvas );
	        }
	    },
	
	    _getContext: function( useSketch ) {
	        var context = this.context;
	        if ( useSketch ) {
	            if (this.sketchCanvas === null) {
	                this.sketchCanvas = document.createElement( "canvas" );
	                var sketchCanvasSize = this._calculateSketchCanvasSize();
	                this.sketchCanvas.width = sketchCanvasSize.x;
	                this.sketchCanvas.height = sketchCanvasSize.y;
	                this.sketchContext = this.sketchCanvas.getContext( "2d" );
	
	                // If the viewport is not currently rotated, the sketchCanvas
	                // will have the same size as the main canvas. However, if
	                // the viewport get rotated later on, we will need to resize it.
	                if (this.viewport.getRotation() === 0) {
	                    var self = this;
	                    this.viewer.addHandler('rotate', function resizeSketchCanvas() {
	                        self.viewer.removeHandler('rotate', resizeSketchCanvas);
	                        var sketchCanvasSize = self._calculateSketchCanvasSize();
	                        self.sketchCanvas.width = sketchCanvasSize.x;
	                        self.sketchCanvas.height = sketchCanvasSize.y;
	                    });
	                }
	            }
	            context = this.sketchContext;
	        }
	        return context;
	    },
	
	    // private
	    saveContext: function( useSketch ) {
	        if (!this.useCanvas) {
	            return;
	        }
	
	        this._getContext( useSketch ).save();
	    },
	
	    // private
	    restoreContext: function( useSketch ) {
	        if (!this.useCanvas) {
	            return;
	        }
	
	        this._getContext( useSketch ).restore();
	    },
	
	    // private
	    setClip: function(rect, useSketch) {
	        if (!this.useCanvas) {
	            return;
	        }
	
	        var context = this._getContext( useSketch );
	        context.beginPath();
	        context.rect(rect.x, rect.y, rect.width, rect.height);
	        context.clip();
	    },
	
	    // private
	    drawRectangle: function(rect, fillStyle, useSketch) {
	        if (!this.useCanvas) {
	            return;
	        }
	
	        var context = this._getContext( useSketch );
	        context.save();
	        context.fillStyle = fillStyle;
	        context.fillRect(rect.x, rect.y, rect.width, rect.height);
	        context.restore();
	    },
	
	    /**
	     * Blends the sketch canvas in the main canvas.
	     * @param {Object} options The options
	     * @param {Float} options.opacity The opacity of the blending.
	     * @param {Float} [options.scale=1] The scale at which tiles were drawn on
	     * the sketch. Default is 1.
	     * Use scale to draw at a lower scale and then enlarge onto the main canvas.
	     * @param {OpenSeadragon.Point} [options.translate] A translation vector
	     * that was used to draw the tiles
	     * @param {String} [options.compositeOperation] - How the image is
	     * composited onto other images; see compositeOperation in
	     * {@link OpenSeadragon.Options} for possible values.
	     * @param {OpenSeadragon.Rect} [options.bounds] The part of the sketch
	     * canvas to blend in the main canvas. If specified, options.scale and
	     * options.translate get ignored.
	     */
	    blendSketch: function(opacity, scale, translate, compositeOperation) {
	        var options = opacity;
	        if (!$.isPlainObject(options)) {
	            options = {
	                opacity: opacity,
	                scale: scale,
	                translate: translate,
	                compositeOperation: compositeOperation
	            };
	        }
	        if (!this.useCanvas || !this.sketchCanvas) {
	            return;
	        }
	        opacity = options.opacity;
	        compositeOperation = options.compositeOperation;
	        var bounds = options.bounds;
	
	        this.context.save();
	        this.context.globalAlpha = opacity;
	        if (compositeOperation) {
	            this.context.globalCompositeOperation = compositeOperation;
	        }
	        if (bounds) {
	            this.context.drawImage(
	                this.sketchCanvas,
	                bounds.x,
	                bounds.y,
	                bounds.width,
	                bounds.height,
	                bounds.x,
	                bounds.y,
	                bounds.width,
	                bounds.height
	            );
	        } else {
	            scale = options.scale || 1;
	            translate = options.translate;
	            var position = translate instanceof $.Point ?
	                translate : new $.Point(0, 0);
	
	            var widthExt = 0;
	            var heightExt = 0;
	            if (translate) {
	                var widthDiff = this.sketchCanvas.width - this.canvas.width;
	                var heightDiff = this.sketchCanvas.height - this.canvas.height;
	                widthExt = Math.round(widthDiff / 2);
	                heightExt = Math.round(heightDiff / 2);
	            }
	            this.context.drawImage(
	                this.sketchCanvas,
	                position.x - widthExt * scale,
	                position.y - heightExt * scale,
	                (this.canvas.width + 2 * widthExt) * scale,
	                (this.canvas.height  + 2 * heightExt) * scale,
	                -widthExt,
	                -heightExt,
	                this.canvas.width + 2 * widthExt,
	                this.canvas.height + 2 * heightExt
	            );
	        }
	        this.context.restore();
	    },
	
	    // private
	    drawDebugInfo: function( tile, count, i ){
	        if ( !this.useCanvas ) {
	            return;
	        }
	
	        var context = this.context;
	        context.save();
	        context.lineWidth = 2 * $.pixelDensityRatio;
	        context.font = 'small-caps bold ' + (13 * $.pixelDensityRatio) + 'px arial';
	        context.strokeStyle = this.debugGridColor;
	        context.fillStyle = this.debugGridColor;
	
	        if ( this.viewport.degrees !== 0 ) {
	            this._offsetForRotation(this.viewport.degrees);
	        }
	
	        context.strokeRect(
	            tile.position.x * $.pixelDensityRatio,
	            tile.position.y * $.pixelDensityRatio,
	            tile.size.x * $.pixelDensityRatio,
	            tile.size.y * $.pixelDensityRatio
	        );
	
	        var tileCenterX = (tile.position.x + (tile.size.x / 2)) * $.pixelDensityRatio;
	        var tileCenterY = (tile.position.y + (tile.size.y / 2)) * $.pixelDensityRatio;
	
	        // Rotate the text the right way around.
	        context.translate( tileCenterX, tileCenterY );
	        context.rotate( Math.PI / 180 * -this.viewport.degrees );
	        context.translate( -tileCenterX, -tileCenterY );
	
	        if( tile.x === 0 && tile.y === 0 ){
	            context.fillText(
	                "Zoom: " + this.viewport.getZoom(),
	                tile.position.x * $.pixelDensityRatio,
	                (tile.position.y - 30) * $.pixelDensityRatio
	            );
	            context.fillText(
	                "Pan: " + this.viewport.getBounds().toString(),
	                tile.position.x * $.pixelDensityRatio,
	                (tile.position.y - 20) * $.pixelDensityRatio
	            );
	        }
	        context.fillText(
	            "Level: " + tile.level,
	            (tile.position.x + 10) * $.pixelDensityRatio,
	            (tile.position.y + 20) * $.pixelDensityRatio
	        );
	        context.fillText(
	            "Column: " + tile.x,
	            (tile.position.x + 10) * $.pixelDensityRatio,
	            (tile.position.y + 30) * $.pixelDensityRatio
	        );
	        context.fillText(
	            "Row: " + tile.y,
	            (tile.position.x + 10) * $.pixelDensityRatio,
	            (tile.position.y + 40) * $.pixelDensityRatio
	        );
	        context.fillText(
	            "Order: " + i + " of " + count,
	            (tile.position.x + 10) * $.pixelDensityRatio,
	            (tile.position.y + 50) * $.pixelDensityRatio
	        );
	        context.fillText(
	            "Size: " + tile.size.toString(),
	            (tile.position.x + 10) * $.pixelDensityRatio,
	            (tile.position.y + 60) * $.pixelDensityRatio
	        );
	        context.fillText(
	            "Position: " + tile.position.toString(),
	            (tile.position.x + 10) * $.pixelDensityRatio,
	            (tile.position.y + 70) * $.pixelDensityRatio
	        );
	
	        if ( this.viewport.degrees !== 0 ) {
	            this._restoreRotationChanges();
	        }
	        context.restore();
	    },
	
	    // private
	    debugRect: function(rect) {
	        if ( this.useCanvas ) {
	            var context = this.context;
	            context.save();
	            context.lineWidth = 2 * $.pixelDensityRatio;
	            context.strokeStyle = this.debugGridColor;
	            context.fillStyle = this.debugGridColor;
	
	            context.strokeRect(
	                rect.x * $.pixelDensityRatio,
	                rect.y * $.pixelDensityRatio,
	                rect.width * $.pixelDensityRatio,
	                rect.height * $.pixelDensityRatio
	            );
	
	            context.restore();
	        }
	    },
	
	    /**
	     * Get the canvas size
	     * @param {Boolean} sketch If set to true return the size of the sketch canvas
	     * @returns {OpenSeadragon.Point} The size of the canvas
	     */
	    getCanvasSize: function(sketch) {
	        var canvas = this._getContext(sketch).canvas;
	        return new $.Point(canvas.width, canvas.height);
	    },
	
	    // private
	    _offsetForRotation: function(degrees, useSketch) {
	        var cx = this.canvas.width / 2;
	        var cy = this.canvas.height / 2;
	
	        var context = this._getContext(useSketch);
	        context.save();
	
	        context.translate(cx, cy);
	        context.rotate(Math.PI / 180 * degrees);
	        context.translate(-cx, -cy);
	    },
	
	    // private
	    _restoreRotationChanges: function(useSketch) {
	        var context = this._getContext(useSketch);
	        context.restore();
	    },
	
	    // private
	    _calculateCanvasSize: function() {
	        var pixelDensityRatio = $.pixelDensityRatio;
	        var viewportSize = this.viewport.getContainerSize();
	        return {
	            x: viewportSize.x * pixelDensityRatio,
	            y: viewportSize.y * pixelDensityRatio
	        };
	    },
	
	    // private
	    _calculateSketchCanvasSize: function() {
	        var canvasSize = this._calculateCanvasSize();
	        if (this.viewport.getRotation() === 0) {
	            return canvasSize;
	        }
	        // If the viewport is rotated, we need a larger sketch canvas in order
	        // to support edge smoothing.
	        var sketchCanvasSize = Math.ceil(Math.sqrt(
	            canvasSize.x * canvasSize.x +
	            canvasSize.y * canvasSize.y));
	        return {
	            x: sketchCanvasSize,
	            y: sketchCanvasSize
	        };
	    }
	};
	
	}( OpenSeadragon ));
	
	/*
	 * OpenSeadragon - Viewport
	 *
	 * Copyright (C) 2009 CodePlex Foundation
	 * Copyright (C) 2010-2013 OpenSeadragon contributors
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 * - Redistributions of source code must retain the above copyright notice,
	 *   this list of conditions and the following disclaimer.
	 *
	 * - Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * - Neither the name of CodePlex Foundation nor the names of its
	 *   contributors may be used to endorse or promote products derived from
	 *   this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
	 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */
	
	(function( $ ){
	
	
	/**
	 * @class Viewport
	 * @memberof OpenSeadragon
	 * @classdesc Handles coordinate-related functionality (zoom, pan, rotation, etc.)
	 * for an {@link OpenSeadragon.Viewer}.
	 * @param {Object} options - Options for this Viewport.
	 * @param {Object} [options.margins] - See viewportMargins in {@link OpenSeadragon.Options}.
	 * @param {Number} [options.springStiffness] - See springStiffness in {@link OpenSeadragon.Options}.
	 * @param {Number} [options.animationTime] - See animationTime in {@link OpenSeadragon.Options}.
	 * @param {Number} [options.minZoomImageRatio] - See minZoomImageRatio in {@link OpenSeadragon.Options}.
	 * @param {Number} [options.maxZoomPixelRatio] - See maxZoomPixelRatio in {@link OpenSeadragon.Options}.
	 * @param {Number} [options.visibilityRatio] - See visibilityRatio in {@link OpenSeadragon.Options}.
	 * @param {Boolean} [options.wrapHorizontal] - See wrapHorizontal in {@link OpenSeadragon.Options}.
	 * @param {Boolean} [options.wrapVertical] - See wrapVertical in {@link OpenSeadragon.Options}.
	 * @param {Number} [options.defaultZoomLevel] - See defaultZoomLevel in {@link OpenSeadragon.Options}.
	 * @param {Number} [options.minZoomLevel] - See minZoomLevel in {@link OpenSeadragon.Options}.
	 * @param {Number} [options.maxZoomLevel] - See maxZoomLevel in {@link OpenSeadragon.Options}.
	 * @param {Number} [options.degrees] - See degrees in {@link OpenSeadragon.Options}.
	 * @param {Boolean} [options.homeFillsViewer] - See homeFillsViewer in {@link OpenSeadragon.Options}.
	 */
	$.Viewport = function( options ) {
	
	    //backward compatibility for positional args while prefering more
	    //idiomatic javascript options object as the only argument
	    var args = arguments;
	    if(  args.length && args[ 0 ] instanceof $.Point ){
	        options = {
	            containerSize:  args[ 0 ],
	            contentSize:    args[ 1 ],
	            config:         args[ 2 ]
	        };
	    }
	
	    //options.config and the general config argument are deprecated
	    //in favor of the more direct specification of optional settings
	    //being passed directly on the options object
	    if ( options.config ){
	        $.extend( true, options, options.config );
	        delete options.config;
	    }
	
	    this._margins = $.extend({
	        left: 0,
	        top: 0,
	        right: 0,
	        bottom: 0
	    }, options.margins || {});
	
	    delete options.margins;
	
	    $.extend( true, this, {
	
	        //required settings
	        containerSize:      null,
	        contentSize:        null,
	
	        //internal state properties
	        zoomPoint:          null,
	        viewer:           null,
	
	        //configurable options
	        springStiffness:    $.DEFAULT_SETTINGS.springStiffness,
	        animationTime:      $.DEFAULT_SETTINGS.animationTime,
	        minZoomImageRatio:  $.DEFAULT_SETTINGS.minZoomImageRatio,
	        maxZoomPixelRatio:  $.DEFAULT_SETTINGS.maxZoomPixelRatio,
	        visibilityRatio:    $.DEFAULT_SETTINGS.visibilityRatio,
	        wrapHorizontal:     $.DEFAULT_SETTINGS.wrapHorizontal,
	        wrapVertical:       $.DEFAULT_SETTINGS.wrapVertical,
	        defaultZoomLevel:   $.DEFAULT_SETTINGS.defaultZoomLevel,
	        minZoomLevel:       $.DEFAULT_SETTINGS.minZoomLevel,
	        maxZoomLevel:       $.DEFAULT_SETTINGS.maxZoomLevel,
	        degrees:            $.DEFAULT_SETTINGS.degrees,
	        homeFillsViewer:    $.DEFAULT_SETTINGS.homeFillsViewer
	
	    }, options );
	
	    this._updateContainerInnerSize();
	
	    this.centerSpringX = new $.Spring({
	        initial: 0,
	        springStiffness: this.springStiffness,
	        animationTime:   this.animationTime
	    });
	    this.centerSpringY = new $.Spring({
	        initial: 0,
	        springStiffness: this.springStiffness,
	        animationTime:   this.animationTime
	    });
	    this.zoomSpring    = new $.Spring({
	        exponential: true,
	        initial: 1,
	        springStiffness: this.springStiffness,
	        animationTime:   this.animationTime
	    });
	
	    this._oldCenterX = this.centerSpringX.current.value;
	    this._oldCenterY = this.centerSpringY.current.value;
	    this._oldZoom    = this.zoomSpring.current.value;
	
	    this._setContentBounds(new $.Rect(0, 0, 1, 1), 1);
	
	    this.goHome(true);
	    this.update();
	};
	
	/** @lends OpenSeadragon.Viewport.prototype */
	$.Viewport.prototype = {
	    /**
	     * Updates the viewport's home bounds and constraints for the given content size.
	     * @function
	     * @param {OpenSeadragon.Point} contentSize - size of the content in content units
	     * @return {OpenSeadragon.Viewport} Chainable.
	     * @fires OpenSeadragon.Viewer.event:reset-size
	     */
	    resetContentSize: function(contentSize) {
	        $.console.assert(contentSize, "[Viewport.resetContentSize] contentSize is required");
	        $.console.assert(contentSize instanceof $.Point, "[Viewport.resetContentSize] contentSize must be an OpenSeadragon.Point");
	        $.console.assert(contentSize.x > 0, "[Viewport.resetContentSize] contentSize.x must be greater than 0");
	        $.console.assert(contentSize.y > 0, "[Viewport.resetContentSize] contentSize.y must be greater than 0");
	
	        this._setContentBounds(new $.Rect(0, 0, 1, contentSize.y / contentSize.x), contentSize.x);
	        return this;
	    },
	
	    // deprecated
	    setHomeBounds: function(bounds, contentFactor) {
	        $.console.error("[Viewport.setHomeBounds] this function is deprecated; The content bounds should not be set manually.");
	        this._setContentBounds(bounds, contentFactor);
	    },
	
	    // Set the viewport's content bounds
	    // @param {OpenSeadragon.Rect} bounds - the new bounds in viewport coordinates
	    // without rotation
	    // @param {Number} contentFactor - how many content units per viewport unit
	    // @fires OpenSeadragon.Viewer.event:reset-size
	    // @private
	    _setContentBounds: function(bounds, contentFactor) {
	        $.console.assert(bounds, "[Viewport._setContentBounds] bounds is required");
	        $.console.assert(bounds instanceof $.Rect, "[Viewport._setContentBounds] bounds must be an OpenSeadragon.Rect");
	        $.console.assert(bounds.width > 0, "[Viewport._setContentBounds] bounds.width must be greater than 0");
	        $.console.assert(bounds.height > 0, "[Viewport._setContentBounds] bounds.height must be greater than 0");
	
	        this._contentBoundsNoRotate = bounds.clone();
	        this._contentSizeNoRotate = this._contentBoundsNoRotate.getSize().times(
	            contentFactor);
	
	        this._contentBounds = bounds.rotate(this.degrees).getBoundingBox();
	        this._contentSize = this._contentBounds.getSize().times(contentFactor);
	        this._contentAspectRatio = this._contentSize.x / this._contentSize.y;
	
	        if (this.viewer) {
	            /**
	             * Raised when the viewer's content size or home bounds are reset
	             * (see {@link OpenSeadragon.Viewport#resetContentSize}).
	             *
	             * @event reset-size
	             * @memberof OpenSeadragon.Viewer
	             * @type {object}
	             * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
	             * @property {OpenSeadragon.Point} contentSize
	             * @property {OpenSeadragon.Rect} contentBounds - Content bounds.
	             * @property {OpenSeadragon.Rect} homeBounds - Content bounds.
	             * Deprecated use contentBounds instead.
	             * @property {Number} contentFactor
	             * @property {?Object} userData - Arbitrary subscriber-defined object.
	             */
	            this.viewer.raiseEvent('reset-size', {
	                contentSize: this._contentSizeNoRotate.clone(),
	                contentFactor: contentFactor,
	                homeBounds: this._contentBoundsNoRotate.clone(),
	                contentBounds: this._contentBounds.clone()
	            });
	        }
	    },
	
	    /**
	     * Returns the home zoom in "viewport zoom" value.
	     * @function
	     * @returns {Number} The home zoom in "viewport zoom".
	     */
	    getHomeZoom: function() {
	        if (this.defaultZoomLevel) {
	            return this.defaultZoomLevel;
	        }
	
	        var aspectFactor = this._contentAspectRatio / this.getAspectRatio();
	        var output;
	        if (this.homeFillsViewer) { // fill the viewer and clip the image
	            output = aspectFactor >= 1 ? aspectFactor : 1;
	        } else {
	            output = aspectFactor >= 1 ? 1 : aspectFactor;
	        }
	
	        return output / this._contentBounds.width;
	    },
	
	    /**
	     * Returns the home bounds in viewport coordinates.
	     * @function
	     * @returns {OpenSeadragon.Rect} The home bounds in vewport coordinates.
	     */
	    getHomeBounds: function() {
	        return this.getHomeBoundsNoRotate().rotate(-this.getRotation());
	    },
	
	    /**
	     * Returns the home bounds in viewport coordinates.
	     * This method ignores the viewport rotation. Use
	     * {@link OpenSeadragon.Viewport#getHomeBounds} to take it into account.
	     * @function
	     * @returns {OpenSeadragon.Rect} The home bounds in vewport coordinates.
	     */
	    getHomeBoundsNoRotate: function() {
	        var center = this._contentBounds.getCenter();
	        var width  = 1.0 / this.getHomeZoom();
	        var height = width / this.getAspectRatio();
	
	        return new $.Rect(
	            center.x - (width / 2.0),
	            center.y - (height / 2.0),
	            width,
	            height
	        );
	    },
	
	    /**
	     * @function
	     * @param {Boolean} immediately
	     * @fires OpenSeadragon.Viewer.event:home
	     */
	    goHome: function(immediately) {
	        if (this.viewer) {
	            /**
	             * Raised when the "home" operation occurs (see {@link OpenSeadragon.Viewport#goHome}).
	             *
	             * @event home
	             * @memberof OpenSeadragon.Viewer
	             * @type {object}
	             * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
	             * @property {Boolean} immediately
	             * @property {?Object} userData - Arbitrary subscriber-defined object.
	             */
	            this.viewer.raiseEvent('home', {
	                immediately: immediately
	            });
	        }
	        return this.fitBounds(this.getHomeBounds(), immediately);
	    },
	
	    /**
	     * @function
	     */
	    getMinZoom: function() {
	        var homeZoom = this.getHomeZoom(),
	            zoom = this.minZoomLevel ?
	            this.minZoomLevel :
	                this.minZoomImageRatio * homeZoom;
	
	        return zoom;
	    },
	
	    /**
	     * @function
	     */
	    getMaxZoom: function() {
	        var zoom = this.maxZoomLevel;
	        if (!zoom) {
	            zoom = this._contentSize.x * this.maxZoomPixelRatio / this._containerInnerSize.x;
	            zoom /= this._contentBounds.width;
	        }
	
	        return Math.max( zoom, this.getHomeZoom() );
	    },
	
	    /**
	     * @function
	     */
	    getAspectRatio: function() {
	        return this._containerInnerSize.x / this._containerInnerSize.y;
	    },
	
	    /**
	     * @function
	     * @returns {OpenSeadragon.Point} The size of the container, in screen coordinates.
	     */
	    getContainerSize: function() {
	        return new $.Point(
	            this.containerSize.x,
	            this.containerSize.y
	        );
	    },
	
	    /**
	     * The margins push the "home" region in from the sides by the specified amounts.
	     * @function
	     * @returns {Object} Properties (Numbers, in screen coordinates): left, top, right, bottom.
	     */
	    getMargins: function() {
	        return $.extend({}, this._margins); // Make a copy so we are not returning our original
	    },
	
	    /**
	     * The margins push the "home" region in from the sides by the specified amounts.
	     * @function
	     * @param {Object} margins - Properties (Numbers, in screen coordinates): left, top, right, bottom.
	     */
	    setMargins: function(margins) {
	        $.console.assert($.type(margins) === 'object', '[Viewport.setMargins] margins must be an object');
	
	        this._margins = $.extend({
	            left: 0,
	            top: 0,
	            right: 0,
	            bottom: 0
	        }, margins);
	
	        this._updateContainerInnerSize();
	        if (this.viewer) {
	            this.viewer.forceRedraw();
	        }
	    },
	
	    /**
	     * Returns the bounds of the visible area in viewport coordinates.
	     * @function
	     * @param {Boolean} current - Pass true for the current location; defaults to false (target location).
	     * @returns {OpenSeadragon.Rect} The location you are zoomed/panned to, in viewport coordinates.
	     */
	    getBounds: function(current) {
	        return this.getBoundsNoRotate(current).rotate(-this.getRotation());
	    },
	
	    /**
	     * Returns the bounds of the visible area in viewport coordinates.
	     * This method ignores the viewport rotation. Use
	     * {@link OpenSeadragon.Viewport#getBounds} to take it into account.
	     * @function
	     * @param {Boolean} current - Pass true for the current location; defaults to false (target location).
	     * @returns {OpenSeadragon.Rect} The location you are zoomed/panned to, in viewport coordinates.
	     */
	    getBoundsNoRotate: function(current) {
	        var center = this.getCenter(current);
	        var width  = 1.0 / this.getZoom(current);
	        var height = width / this.getAspectRatio();
	
	        return new $.Rect(
	            center.x - (width / 2.0),
	            center.y - (height / 2.0),
	            width,
	            height
	        );
	    },
	
	    /**
	     * @function
	     * @param {Boolean} current - Pass true for the current location; defaults to false (target location).
	     * @returns {OpenSeadragon.Rect} The location you are zoomed/panned to,
	     * including the space taken by margins, in viewport coordinates.
	     */
	    getBoundsWithMargins: function(current) {
	        return this.getBoundsNoRotateWithMargins(current).rotate(
	            -this.getRotation(), this.getCenter(current));
	    },
	
	    /**
	     * @function
	     * @param {Boolean} current - Pass true for the current location; defaults to false (target location).
	     * @returns {OpenSeadragon.Rect} The location you are zoomed/panned to,
	     * including the space taken by margins, in viewport coordinates.
	     */
	    getBoundsNoRotateWithMargins: function(current) {
	        var bounds = this.getBoundsNoRotate(current);
	        var factor = this._containerInnerSize.x * this.getZoom(current);
	        bounds.x -= this._margins.left / factor;
	        bounds.y -= this._margins.top / factor;
	        bounds.width += (this._margins.left + this._margins.right) / factor;
	        bounds.height += (this._margins.top + this._margins.bottom) / factor;
	        return bounds;
	    },
	
	    /**
	     * @function
	     * @param {Boolean} current - Pass true for the current location; defaults to false (target location).
	     */
	    getCenter: function( current ) {
	        var centerCurrent = new $.Point(
	                this.centerSpringX.current.value,
	                this.centerSpringY.current.value
	            ),
	            centerTarget = new $.Point(
	                this.centerSpringX.target.value,
	                this.centerSpringY.target.value
	            ),
	            oldZoomPixel,
	            zoom,
	            width,
	            height,
	            bounds,
	            newZoomPixel,
	            deltaZoomPixels,
	            deltaZoomPoints;
	
	        if ( current ) {
	            return centerCurrent;
	        } else if ( !this.zoomPoint ) {
	            return centerTarget;
	        }
	
	        oldZoomPixel = this.pixelFromPoint(this.zoomPoint, true);
	
	        zoom    = this.getZoom();
	        width   = 1.0 / zoom;
	        height  = width / this.getAspectRatio();
	        bounds  = new $.Rect(
	            centerCurrent.x - width / 2.0,
	            centerCurrent.y - height / 2.0,
	            width,
	            height
	        );
	
	        newZoomPixel = this._pixelFromPoint(this.zoomPoint, bounds);
	        deltaZoomPixels = newZoomPixel.minus( oldZoomPixel );
	        deltaZoomPoints = deltaZoomPixels.divide( this._containerInnerSize.x * zoom );
	
	        return centerTarget.plus( deltaZoomPoints );
	    },
	
	    /**
	     * @function
	     * @param {Boolean} current - Pass true for the current location; defaults to false (target location).
	     */
	    getZoom: function( current ) {
	        if ( current ) {
	            return this.zoomSpring.current.value;
	        } else {
	            return this.zoomSpring.target.value;
	        }
	    },
	
	    // private
	    _applyZoomConstraints: function(zoom) {
	        return Math.max(
	            Math.min(zoom, this.getMaxZoom()),
	            this.getMinZoom());
	    },
	
	    /**
	     * @function
	     * @private
	     * @param {OpenSeadragon.Rect} bounds
	     * @param {Boolean} immediately
	     * @return {OpenSeadragon.Rect} constrained bounds.
	     */
	    _applyBoundaryConstraints: function(bounds, immediately) {
	        var newBounds = new $.Rect(
	                bounds.x,
	                bounds.y,
	                bounds.width,
	                bounds.height);
	
	        if (this.wrapHorizontal) {
	            //do nothing
	        } else {
	            var horizontalThreshold = this.visibilityRatio * newBounds.width;
	            var boundsRight = newBounds.x + newBounds.width;
	            var contentRight = this._contentBoundsNoRotate.x + this._contentBoundsNoRotate.width;
	            var leftDx = this._contentBoundsNoRotate.x - boundsRight + horizontalThreshold;
	            var rightDx = contentRight - newBounds.x - horizontalThreshold;
	
	            if (horizontalThreshold > this._contentBoundsNoRotate.width) {
	                newBounds.x += (leftDx + rightDx) / 2;
	            } else if (rightDx < 0) {
	                newBounds.x += rightDx;
	            } else if (leftDx > 0) {
	                newBounds.x += leftDx;
	            }
	        }
	
	        if (this.wrapVertical) {
	            //do nothing
	        } else {
	            var verticalThreshold   = this.visibilityRatio * newBounds.height;
	            var boundsBottom = newBounds.y + newBounds.height;
	            var contentBottom = this._contentBoundsNoRotate.y + this._contentBoundsNoRotate.height;
	            var topDy = this._contentBoundsNoRotate.y - boundsBottom + verticalThreshold;
	            var bottomDy = contentBottom - newBounds.y - verticalThreshold;
	
	            if (verticalThreshold > this._contentBoundsNoRotate.height) {
	                newBounds.y += (topDy + bottomDy) / 2;
	            } else if (bottomDy < 0) {
	                newBounds.y += bottomDy;
	            } else if (topDy > 0) {
	                newBounds.y += topDy;
	            }
	        }
	
	        if (this.viewer) {
	            /**
	             * Raised when the viewport constraints are applied (see {@link OpenSeadragon.Viewport#applyConstraints}).
	             *
	             * @event constrain
	             * @memberof OpenSeadragon.Viewer
	             * @type {object}
	             * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
	             * @property {Boolean} immediately
	             * @property {?Object} userData - Arbitrary subscriber-defined object.
	             */
	            this.viewer.raiseEvent( 'constrain', {
	                immediately: immediately
	            });
	        }
	
	        return newBounds;
	    },
	
	    /**
	     * Enforces the minZoom, maxZoom and visibilityRatio constraints by
	     * zooming and panning to the closest acceptable zoom and location.
	     * @function
	     * @param {Boolean} [immediately=false]
	     * @return {OpenSeadragon.Viewport} Chainable.
	     * @fires OpenSeadragon.Viewer.event:constrain
	     */
	    applyConstraints: function(immediately) {
	        var actualZoom = this.getZoom();
	        var constrainedZoom = this._applyZoomConstraints(actualZoom);
	
	        if (actualZoom !== constrainedZoom) {
	            this.zoomTo(constrainedZoom, this.zoomPoint, immediately);
	        }
	
	        var bounds = this.getBoundsNoRotate();
	        var constrainedBounds = this._applyBoundaryConstraints(
	            bounds, immediately);
	
	        if (bounds.x !== constrainedBounds.x ||
	            bounds.y !== constrainedBounds.y ||
	            immediately) {
	            this.fitBounds(
	                constrainedBounds.rotate(-this.getRotation()),
	                immediately);
	        }
	        return this;
	    },
	
	    /**
	     * Equivalent to {@link OpenSeadragon.Viewport#applyConstraints}
	     * @function
	     * @param {Boolean} [immediately=false]
	     * @return {OpenSeadragon.Viewport} Chainable.
	     * @fires OpenSeadragon.Viewer.event:constrain
	     */
	    ensureVisible: function(immediately) {
	        return this.applyConstraints(immediately);
	    },
	
	    /**
	     * @function
	     * @private
	     * @param {OpenSeadragon.Rect} bounds
	     * @param {Object} options (immediately=false, constraints=false)
	     * @return {OpenSeadragon.Viewport} Chainable.
	     */
	    _fitBounds: function(bounds, options) {
	        options = options || {};
	        var immediately = options.immediately || false;
	        var constraints = options.constraints || false;
	
	        var aspect = this.getAspectRatio();
	        var center = bounds.getCenter();
	
	        // Compute width and height of bounding box.
	        var newBounds = new $.Rect(
	            bounds.x,
	            bounds.y,
	            bounds.width,
	            bounds.height,
	            bounds.degrees + this.getRotation())
	            .getBoundingBox();
	
	        if (newBounds.getAspectRatio() >= aspect) {
	            newBounds.height = newBounds.width / aspect;
	        } else {
	            newBounds.width = newBounds.height * aspect;
	        }
	
	        // Compute x and y from width, height and center position
	        newBounds.x = center.x - newBounds.width / 2;
	        newBounds.y = center.y - newBounds.height / 2;
	        var newZoom = 1.0 / newBounds.width;
	
	        if (constraints) {
	            var newBoundsAspectRatio = newBounds.getAspectRatio();
	            var newConstrainedZoom = this._applyZoomConstraints(newZoom);
	
	            if (newZoom !== newConstrainedZoom) {
	                newZoom = newConstrainedZoom;
	                newBounds.width = 1.0 / newZoom;
	                newBounds.x = center.x - newBounds.width / 2;
	                newBounds.height = newBounds.width / newBoundsAspectRatio;
	                newBounds.y = center.y - newBounds.height / 2;
	            }
	
	            newBounds = this._applyBoundaryConstraints(newBounds, immediately);
	            center = newBounds.getCenter();
	        }
	
	        if (immediately) {
	            this.panTo(center, true);
	            return this.zoomTo(newZoom, null, true);
	        }
	
	        this.panTo(this.getCenter(true), true);
	        this.zoomTo(this.getZoom(true), null, true);
	
	        var oldBounds = this.getBounds();
	        var oldZoom   = this.getZoom();
	
	        if (oldZoom === 0 || Math.abs(newZoom / oldZoom - 1) < 0.00000001) {
	            this.zoomTo(newZoom, true);
	            return this.panTo(center, immediately);
	        }
	
	        newBounds = newBounds.rotate(-this.getRotation());
	        var referencePoint = newBounds.getTopLeft().times(newZoom)
	            .minus(oldBounds.getTopLeft().times(oldZoom))
	            .divide(newZoom - oldZoom);
	
	        return this.zoomTo(newZoom, referencePoint, immediately);
	    },
	
	    /**
	     * Makes the viewport zoom and pan so that the specified bounds take
	     * as much space as possible in the viewport.
	     * Note: this method ignores the constraints (minZoom, maxZoom and
	     * visibilityRatio).
	     * Use {@link OpenSeadragon.Viewport#fitBoundsWithConstraints} to enforce
	     * them.
	     * @function
	     * @param {OpenSeadragon.Rect} bounds
	     * @param {Boolean} [immediately=false]
	     * @return {OpenSeadragon.Viewport} Chainable.
	     */
	    fitBounds: function(bounds, immediately) {
	        return this._fitBounds(bounds, {
	            immediately: immediately,
	            constraints: false
	        });
	    },
	
	    /**
	     * Makes the viewport zoom and pan so that the specified bounds take
	     * as much space as possible in the viewport while enforcing the constraints
	     * (minZoom, maxZoom and visibilityRatio).
	     * Note: because this method enforces the constraints, part of the
	     * provided bounds may end up outside of the viewport.
	     * Use {@link OpenSeadragon.Viewport#fitBounds} to ignore them.
	     * @function
	     * @param {OpenSeadragon.Rect} bounds
	     * @param {Boolean} [immediately=false]
	     * @return {OpenSeadragon.Viewport} Chainable.
	     */
	    fitBoundsWithConstraints: function(bounds, immediately) {
	        return this._fitBounds(bounds, {
	            immediately: immediately,
	            constraints: true
	        });
	    },
	
	    /**
	     * Zooms so the image just fills the viewer vertically.
	     * @param {Boolean} immediately
	     * @return {OpenSeadragon.Viewport} Chainable.
	     */
	    fitVertically: function(immediately) {
	        var box = new $.Rect(
	            this._contentBounds.x + (this._contentBounds.width / 2),
	            this._contentBounds.y,
	            0,
	            this._contentBounds.height);
	        return this.fitBounds(box, immediately);
	    },
	
	    /**
	     * Zooms so the image just fills the viewer horizontally.
	     * @param {Boolean} immediately
	     * @return {OpenSeadragon.Viewport} Chainable.
	     */
	    fitHorizontally: function(immediately) {
	        var box = new $.Rect(
	            this._contentBounds.x,
	            this._contentBounds.y + (this._contentBounds.height / 2),
	            this._contentBounds.width,
	            0);
	        return this.fitBounds(box, immediately);
	    },
	
	
	    /**
	     * @function
	     * @param {OpenSeadragon.Point} delta
	     * @param {Boolean} immediately
	     * @return {OpenSeadragon.Viewport} Chainable.
	     * @fires OpenSeadragon.Viewer.event:pan
	     */
	    panBy: function( delta, immediately ) {
	        var center = new $.Point(
	            this.centerSpringX.target.value,
	            this.centerSpringY.target.value
	        );
	        return this.panTo( center.plus( delta ), immediately );
	    },
	
	    /**
	     * @function
	     * @param {OpenSeadragon.Point} center
	     * @param {Boolean} immediately
	     * @return {OpenSeadragon.Viewport} Chainable.
	     * @fires OpenSeadragon.Viewer.event:pan
	     */
	    panTo: function( center, immediately ) {
	        if ( immediately ) {
	            this.centerSpringX.resetTo( center.x );
	            this.centerSpringY.resetTo( center.y );
	        } else {
	            this.centerSpringX.springTo( center.x );
	            this.centerSpringY.springTo( center.y );
	        }
	
	        if( this.viewer ){
	            /**
	             * Raised when the viewport is panned (see {@link OpenSeadragon.Viewport#panBy} and {@link OpenSeadragon.Viewport#panTo}).
	             *
	             * @event pan
	             * @memberof OpenSeadragon.Viewer
	             * @type {object}
	             * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
	             * @property {OpenSeadragon.Point} center
	             * @property {Boolean} immediately
	             * @property {?Object} userData - Arbitrary subscriber-defined object.
	             */
	            this.viewer.raiseEvent( 'pan', {
	                center: center,
	                immediately: immediately
	            });
	        }
	
	        return this;
	    },
	
	    /**
	     * @function
	     * @return {OpenSeadragon.Viewport} Chainable.
	     * @fires OpenSeadragon.Viewer.event:zoom
	     */
	    zoomBy: function(factor, refPoint, immediately) {
	        return this.zoomTo(
	            this.zoomSpring.target.value * factor, refPoint, immediately);
	    },
	
	    /**
	     * Zooms to the specified zoom level
	     * @function
	     * @param {Number} zoom The zoom level to zoom to.
	     * @param {OpenSeadragon.Point} [refPoint] The point which will stay at
	     * the same screen location. Defaults to the viewport center.
	     * @param {Boolean} [immediately=false]
	     * @return {OpenSeadragon.Viewport} Chainable.
	     * @fires OpenSeadragon.Viewer.event:zoom
	     */
	    zoomTo: function( zoom, refPoint, immediately ) {
	
	        this.zoomPoint = refPoint instanceof $.Point &&
	            !isNaN(refPoint.x) &&
	            !isNaN(refPoint.y) ?
	            refPoint :
	            null;
	
	        if ( immediately ) {
	            this.zoomSpring.resetTo( zoom );
	        } else {
	            this.zoomSpring.springTo( zoom );
	        }
	
	        if( this.viewer ){
	            /**
	             * Raised when the viewport zoom level changes (see {@link OpenSeadragon.Viewport#zoomBy} and {@link OpenSeadragon.Viewport#zoomTo}).
	             *
	             * @event zoom
	             * @memberof OpenSeadragon.Viewer
	             * @type {object}
	             * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
	             * @property {Number} zoom
	             * @property {OpenSeadragon.Point} refPoint
	             * @property {Boolean} immediately
	             * @property {?Object} userData - Arbitrary subscriber-defined object.
	             */
	            this.viewer.raiseEvent( 'zoom', {
	                zoom: zoom,
	                refPoint: refPoint,
	                immediately: immediately
	            });
	        }
	
	        return this;
	    },
	
	    /**
	     * Rotates this viewport to the angle specified.
	     * @function
	     * @return {OpenSeadragon.Viewport} Chainable.
	     */
	    setRotation: function(degrees) {
	        if (!this.viewer || !this.viewer.drawer.canRotate()) {
	            return this;
	        }
	
	        degrees = degrees % 360;
	        if (degrees < 0) {
	            degrees += 360;
	        }
	        this.degrees = degrees;
	        this._setContentBounds(
	            this.viewer.world.getHomeBounds(),
	            this.viewer.world.getContentFactor());
	        this.viewer.forceRedraw();
	
	        /**
	         * Raised when rotation has been changed.
	         *
	         * @event rotate
	         * @memberof OpenSeadragon.Viewer
	         * @type {object}
	         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.
	         * @property {Number} degrees - The number of degrees the rotation was set to.
	         * @property {?Object} userData - Arbitrary subscriber-defined object.
	         */
	        this.viewer.raiseEvent('rotate', {"degrees": degrees});
	        return this;
	    },
	
	    /**
	     * Gets the current rotation in degrees.
	     * @function
	     * @return {Number} The current rotation in degrees.
	     */
	    getRotation: function() {
	        return this.degrees;
	    },
	
	    /**
	     * @function
	     * @return {OpenSeadragon.Viewport} Chainable.
	     * @fires OpenSeadragon.Viewer.event:resize
	     */
	    resize: function( newContainerSize, maintain ) {
	        var oldBounds = this.getBoundsNoRotate(),
	            newBounds = oldBounds,
	            widthDeltaFactor;
	
	        this.containerSize.x = newContainerSize.x;
	        this.containerSize.y = newContainerSize.y;
	
	        this._updateContainerInnerSize();
	
	        if ( maintain ) {
	            // TODO: widthDeltaFactor will always be 1; probably not what's intended
	            widthDeltaFactor = newContainerSize.x / this.containerSize.x;
	            newBounds.width  = oldBounds.width * widthDeltaFactor;
	            newBounds.height = newBounds.width / this.getAspectRatio();
	        }
	
	        if( this.viewer ){
	            /**
	             * Raised when the viewer is resized (see {@link OpenSeadragon.Viewport#resize}).
	             *
	             * @event resize
	             * @memberof OpenSeadragon.Viewer
	             * @type {object}
	             * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
	             * @property {OpenSeadragon.Point} newContainerSize
	             * @property {Boolean} maintain
	             * @property {?Object} userData - Arbitrary subscriber-defined object.
	             */
	            this.viewer.raiseEvent( 'resize', {
	                newContainerSize: newContainerSize,
	                maintain: maintain
	            });
	        }
	
	        return this.fitBounds( newBounds, true );
	    },
	
	    // private
	    _updateContainerInnerSize: function() {
	        this._containerInnerSize = new $.Point(
	            Math.max(1, this.containerSize.x - (this._margins.left + this._margins.right)),
	            Math.max(1, this.containerSize.y - (this._margins.top + this._margins.bottom))
	        );
	    },
	
	    /**
	     * Update the zoom and center (X and Y) springs.
	     * @function
	     * @returns {Boolean} True if any change has been made, false otherwise.
	     */
	    update: function() {
	
	        if (this.zoomPoint) {
	            var oldZoomPixel = this.pixelFromPoint(this.zoomPoint, true);
	            this.zoomSpring.update();
	            var newZoomPixel = this.pixelFromPoint(this.zoomPoint, true);
	
	            var deltaZoomPixels = newZoomPixel.minus(oldZoomPixel);
	            var deltaZoomPoints = this.deltaPointsFromPixels(
	                deltaZoomPixels, true);
	
	            this.centerSpringX.shiftBy(deltaZoomPoints.x);
	            this.centerSpringY.shiftBy(deltaZoomPoints.y);
	
	            if (this.zoomSpring.isAtTargetValue()) {
	                this.zoomPoint = null;
	            }
	        } else {
	            this.zoomSpring.update();
	        }
	
	        this.centerSpringX.update();
	        this.centerSpringY.update();
	
	        var changed = this.centerSpringX.current.value !== this._oldCenterX ||
	            this.centerSpringY.current.value !== this._oldCenterY ||
	            this.zoomSpring.current.value !== this._oldZoom;
	
	        this._oldCenterX = this.centerSpringX.current.value;
	        this._oldCenterY = this.centerSpringY.current.value;
	        this._oldZoom    = this.zoomSpring.current.value;
	
	        return changed;
	    },
	
	    /**
	     * Convert a delta (translation vector) from viewport coordinates to pixels
	     * coordinates. This method does not take rotation into account.
	     * Consider using deltaPixelsFromPoints if you need to account for rotation.
	     * @param {OpenSeadragon.Point} deltaPoints - The translation vector to convert.
	     * @param {Boolean} [current=false] - Pass true for the current location;
	     * defaults to false (target location).
	     * @returns {OpenSeadragon.Point}
	     */
	    deltaPixelsFromPointsNoRotate: function(deltaPoints, current) {
	        return deltaPoints.times(
	            this._containerInnerSize.x * this.getZoom(current)
	        );
	    },
	
	    /**
	     * Convert a delta (translation vector) from viewport coordinates to pixels
	     * coordinates.
	     * @param {OpenSeadragon.Point} deltaPoints - The translation vector to convert.
	     * @param {Boolean} [current=false] - Pass true for the current location;
	     * defaults to false (target location).
	     * @returns {OpenSeadragon.Point}
	     */
	    deltaPixelsFromPoints: function(deltaPoints, current) {
	        return this.deltaPixelsFromPointsNoRotate(
	            deltaPoints.rotate(this.getRotation()),
	            current);
	    },
	
	    /**
	     * Convert a delta (translation vector) from pixels coordinates to viewport
	     * coordinates. This method does not take rotation into account.
	     * Consider using deltaPointsFromPixels if you need to account for rotation.
	     * @param {OpenSeadragon.Point} deltaPixels - The translation vector to convert.
	     * @param {Boolean} [current=false] - Pass true for the current location;
	     * defaults to false (target location).
	     * @returns {OpenSeadragon.Point}
	     */
	    deltaPointsFromPixelsNoRotate: function(deltaPixels, current) {
	        return deltaPixels.divide(
	            this._containerInnerSize.x * this.getZoom(current)
	        );
	    },
	
	    /**
	     * Convert a delta (translation vector) from pixels coordinates to viewport
	     * coordinates.
	     * @param {OpenSeadragon.Point} deltaPixels - The translation vector to convert.
	     * @param {Boolean} [current=false] - Pass true for the current location;
	     * defaults to false (target location).
	     * @returns {OpenSeadragon.Point}
	     */
	    deltaPointsFromPixels: function(deltaPixels, current) {
	        return this.deltaPointsFromPixelsNoRotate(deltaPixels, current)
	            .rotate(-this.getRotation());
	    },
	
	    /**
	     * Convert viewport coordinates to pixels coordinates.
	     * This method does not take rotation into account.
	     * Consider using pixelFromPoint if you need to account for rotation.
	     * @param {OpenSeadragon.Point} point the viewport coordinates
	     * @param {Boolean} [current=false] - Pass true for the current location;
	     * defaults to false (target location).
	     * @returns {OpenSeadragon.Point}
	     */
	    pixelFromPointNoRotate: function(point, current) {
	        return this._pixelFromPointNoRotate(
	            point, this.getBoundsNoRotate(current));
	    },
	
	    /**
	     * Convert viewport coordinates to pixel coordinates.
	     * @param {OpenSeadragon.Point} point the viewport coordinates
	     * @param {Boolean} [current=false] - Pass true for the current location;
	     * defaults to false (target location).
	     * @returns {OpenSeadragon.Point}
	     */
	    pixelFromPoint: function(point, current) {
	        return this._pixelFromPoint(point, this.getBoundsNoRotate(current));
	    },
	
	    // private
	    _pixelFromPointNoRotate: function(point, bounds) {
	        return point.minus(
	            bounds.getTopLeft()
	        ).times(
	            this._containerInnerSize.x / bounds.width
	        ).plus(
	            new $.Point(this._margins.left, this._margins.top)
	        );
	    },
	
	    // private
	    _pixelFromPoint: function(point, bounds) {
	        return this._pixelFromPointNoRotate(
	            point.rotate(this.getRotation(), this.getCenter(true)),
	            bounds);
	    },
	
	    /**
	     * Convert pixel coordinates to viewport coordinates.
	     * This method does not take rotation into account.
	     * Consider using pointFromPixel if you need to account for rotation.
	     * @param {OpenSeadragon.Point} pixel Pixel coordinates
	     * @param {Boolean} [current=false] - Pass true for the current location;
	     * defaults to false (target location).
	     * @returns {OpenSeadragon.Point}
	     */
	    pointFromPixelNoRotate: function(pixel, current) {
	        var bounds = this.getBoundsNoRotate(current);
	        return pixel.minus(
	            new $.Point(this._margins.left, this._margins.top)
	        ).divide(
	            this._containerInnerSize.x / bounds.width
	        ).plus(
	            bounds.getTopLeft()
	        );
	    },
	
	    /**
	     * Convert pixel coordinates to viewport coordinates.
	     * @param {OpenSeadragon.Point} pixel Pixel coordinates
	     * @param {Boolean} [current=false] - Pass true for the current location;
	     * defaults to false (target location).
	     * @returns {OpenSeadragon.Point}
	     */
	    pointFromPixel: function(pixel, current) {
	        return this.pointFromPixelNoRotate(pixel, current).rotate(
	            -this.getRotation(),
	            this.getCenter(true)
	        );
	    },
	
	    // private
	    _viewportToImageDelta: function( viewerX, viewerY ) {
	        var scale = this._contentBoundsNoRotate.width;
	        return new $.Point(
	            viewerX * this._contentSizeNoRotate.x / scale,
	            viewerY * this._contentSizeNoRotate.x / scale);
	    },
	
	    /**
	     * Translates from OpenSeadragon viewer coordinate system to image coordinate system.
	     * This method can be called either by passing X,Y coordinates or an
	     * OpenSeadragon.Point
	     * Note: not accurate with multi-image; use TiledImage.viewportToImageCoordinates instead.
	     * @function
	     * @param {(OpenSeadragon.Point|Number)} viewerX either a point or the X
	     * coordinate in viewport coordinate system.
	     * @param {Number} [viewerY] Y coordinate in viewport coordinate system.
	     * @return {OpenSeadragon.Point} a point representing the coordinates in the image.
	     */
	    viewportToImageCoordinates: function(viewerX, viewerY) {
	        if (viewerX instanceof $.Point) {
	            //they passed a point instead of individual components
	            return this.viewportToImageCoordinates(viewerX.x, viewerX.y);
	        }
	
	        if (this.viewer) {
	            var count = this.viewer.world.getItemCount();
	            if (count > 1) {
	                $.console.error('[Viewport.viewportToImageCoordinates] is not accurate ' +
	                    'with multi-image; use TiledImage.viewportToImageCoordinates instead.');
	            } else if (count === 1) {
	                // It is better to use TiledImage.viewportToImageCoordinates
	                // because this._contentBoundsNoRotate can not be relied on
	                // with clipping.
	                var item = this.viewer.world.getItemAt(0);
	                return item.viewportToImageCoordinates(viewerX, viewerY, true);
	            }
	        }
	
	        return this._viewportToImageDelta(
	            viewerX - this._contentBoundsNoRotate.x,
	            viewerY - this._contentBoundsNoRotate.y);
	    },
	
	    // private
	    _imageToViewportDelta: function( imageX, imageY ) {
	        var scale = this._contentBoundsNoRotate.width;
	        return new $.Point(
	            imageX / this._contentSizeNoRotate.x * scale,
	            imageY / this._contentSizeNoRotate.x * scale);
	    },
	
	    /**
	     * Translates from image coordinate system to OpenSeadragon viewer coordinate system
	     * This method can be called either by passing X,Y coordinates or an
	     * OpenSeadragon.Point
	     * Note: not accurate with multi-image; use TiledImage.imageToViewportCoordinates instead.
	     * @function
	     * @param {(OpenSeadragon.Point | Number)} imageX the point or the
	     * X coordinate in image coordinate system.
	     * @param {Number} [imageY] Y coordinate in image coordinate system.
	     * @return {OpenSeadragon.Point} a point representing the coordinates in the viewport.
	     */
	    imageToViewportCoordinates: function(imageX, imageY) {
	        if (imageX instanceof $.Point) {
	            //they passed a point instead of individual components
	            return this.imageToViewportCoordinates(imageX.x, imageX.y);
	        }
	
	        if (this.viewer) {
	            var count = this.viewer.world.getItemCount();
	            if (count > 1) {
	                $.console.error('[Viewport.imageToViewportCoordinates] is not accurate ' +
	                    'with multi-image; use TiledImage.imageToViewportCoordinates instead.');
	            } else if (count === 1) {
	                // It is better to use TiledImage.viewportToImageCoordinates
	                // because this._contentBoundsNoRotate can not be relied on
	                // with clipping.
	                var item = this.viewer.world.getItemAt(0);
	                return item.imageToViewportCoordinates(imageX, imageY, true);
	            }
	        }
	
	        var point = this._imageToViewportDelta(imageX, imageY);
	        point.x += this._contentBoundsNoRotate.x;
	        point.y += this._contentBoundsNoRotate.y;
	        return point;
	    },
	
	    /**
	     * Translates from a rectangle which describes a portion of the image in
	     * pixel coordinates to OpenSeadragon viewport rectangle coordinates.
	     * This method can be called either by passing X,Y,width,height or an
	     * OpenSeadragon.Rect
	     * Note: not accurate with multi-image; use TiledImage.imageToViewportRectangle instead.
	     * @function
	     * @param {(OpenSeadragon.Rect | Number)} imageX the rectangle or the X
	     * coordinate of the top left corner of the rectangle in image coordinate system.
	     * @param {Number} [imageY] the Y coordinate of the top left corner of the rectangle
	     * in image coordinate system.
	     * @param {Number} [pixelWidth] the width in pixel of the rectangle.
	     * @param {Number} [pixelHeight] the height in pixel of the rectangle.
	     */
	    imageToViewportRectangle: function(imageX, imageY, pixelWidth, pixelHeight) {
	        var rect = imageX;
	        if (!(rect instanceof $.Rect)) {
	            //they passed individual components instead of a rectangle
	            rect = new $.Rect(imageX, imageY, pixelWidth, pixelHeight);
	        }
	
	        if (this.viewer) {
	            var count = this.viewer.world.getItemCount();
	            if (count > 1) {
	                $.console.error('[Viewport.imageToViewportRectangle] is not accurate ' +
	                    'with multi-image; use TiledImage.imageToViewportRectangle instead.');
	            } else if (count === 1) {
	                // It is better to use TiledImage.imageToViewportRectangle
	                // because this._contentBoundsNoRotate can not be relied on
	                // with clipping.
	                var item = this.viewer.world.getItemAt(0);
	                return item.imageToViewportRectangle(
	                    imageX, imageY, pixelWidth, pixelHeight, true);
	            }
	        }
	
	        var coordA = this.imageToViewportCoordinates(rect.x, rect.y);
	        var coordB = this._imageToViewportDelta(rect.width, rect.height);
	        return new $.Rect(
	            coordA.x,
	            coordA.y,
	            coordB.x,
	            coordB.y,
	            rect.degrees
	        );
	    },
	
	    /**
	     * Translates from a rectangle which describes a portion of
	     * the viewport in point coordinates to image rectangle coordinates.
	     * This method can be called either by passing X,Y,width,height or an
	     * OpenSeadragon.Rect
	     * Note: not accurate with multi-image; use TiledImage.viewportToImageRectangle instead.
	     * @function
	     * @param {(OpenSeadragon.Rect | Number)} viewerX either a rectangle or
	     * the X coordinate of the top left corner of the rectangle in viewport
	     * coordinate system.
	     * @param {Number} [viewerY] the Y coordinate of the top left corner of the rectangle
	     * in viewport coordinate system.
	     * @param {Number} [pointWidth] the width of the rectangle in viewport coordinate system.
	     * @param {Number} [pointHeight] the height of the rectangle in viewport coordinate system.
	     */
	    viewportToImageRectangle: function(viewerX, viewerY, pointWidth, pointHeight) {
	        var rect = viewerX;
	        if (!(rect instanceof $.Rect)) {
	            //they passed individual components instead of a rectangle
	            rect = new $.Rect(viewerX, viewerY, pointWidth, pointHeight);
	        }
	
	        if (this.viewer) {
	            var count = this.viewer.world.getItemCount();
	            if (count > 1) {
	                $.console.error('[Viewport.viewportToImageRectangle] is not accurate ' +
	                    'with multi-image; use TiledImage.viewportToImageRectangle instead.');
	            } else if (count === 1) {
	                // It is better to use TiledImage.viewportToImageCoordinates
	                // because this._contentBoundsNoRotate can not be relied on
	                // with clipping.
	                var item = this.viewer.world.getItemAt(0);
	                return item.viewportToImageRectangle(
	                    viewerX, viewerY, pointWidth, pointHeight, true);
	            }
	        }
	
	        var coordA = this.viewportToImageCoordinates(rect.x, rect.y);
	        var coordB = this._viewportToImageDelta(rect.width, rect.height);
	        return new $.Rect(
	            coordA.x,
	            coordA.y,
	            coordB.x,
	            coordB.y,
	            rect.degrees
	        );
	    },
	
	    /**
	     * Convert pixel coordinates relative to the viewer element to image
	     * coordinates.
	     * Note: not accurate with multi-image.
	     * @param {OpenSeadragon.Point} pixel
	     * @returns {OpenSeadragon.Point}
	     */
	    viewerElementToImageCoordinates: function( pixel ) {
	        var point = this.pointFromPixel( pixel, true );
	        return this.viewportToImageCoordinates( point );
	    },
	
	    /**
	     * Convert pixel coordinates relative to the image to
	     * viewer element coordinates.
	     * Note: not accurate with multi-image.
	     * @param {OpenSeadragon.Point} pixel
	     * @returns {OpenSeadragon.Point}
	     */
	    imageToViewerElementCoordinates: function( pixel ) {
	        var point = this.imageToViewportCoordinates( pixel );
	        return this.pixelFromPoint( point, true );
	    },
	
	    /**
	     * Convert pixel coordinates relative to the window to image coordinates.
	     * Note: not accurate with multi-image.
	     * @param {OpenSeadragon.Point} pixel
	     * @returns {OpenSeadragon.Point}
	     */
	    windowToImageCoordinates: function(pixel) {
	        $.console.assert(this.viewer,
	            "[Viewport.windowToImageCoordinates] the viewport must have a viewer.");
	        var viewerCoordinates = pixel.minus(
	                $.getElementPosition(this.viewer.element));
	        return this.viewerElementToImageCoordinates(viewerCoordinates);
	    },
	
	    /**
	     * Convert image coordinates to pixel coordinates relative to the window.
	     * Note: not accurate with multi-image.
	     * @param {OpenSeadragon.Point} pixel
	     * @returns {OpenSeadragon.Point}
	     */
	    imageToWindowCoordinates: function(pixel) {
	        $.console.assert(this.viewer,
	            "[Viewport.imageToWindowCoordinates] the viewport must have a viewer.");
	        var viewerCoordinates = this.imageToViewerElementCoordinates(pixel);
	        return viewerCoordinates.plus(
	                $.getElementPosition(this.viewer.element));
	    },
	
	    /**
	     * Convert pixel coordinates relative to the viewer element to viewport
	     * coordinates.
	     * @param {OpenSeadragon.Point} pixel
	     * @returns {OpenSeadragon.Point}
	     */
	    viewerElementToViewportCoordinates: function( pixel ) {
	        return this.pointFromPixel( pixel, true );
	    },
	
	    /**
	     * Convert viewport coordinates to pixel coordinates relative to the
	     * viewer element.
	     * @param {OpenSeadragon.Point} point
	     * @returns {OpenSeadragon.Point}
	     */
	    viewportToViewerElementCoordinates: function( point ) {
	        return this.pixelFromPoint( point, true );
	    },
	
	    /**
	     * Convert a rectangle in pixel coordinates relative to the viewer element
	     * to viewport coordinates.
	     * @param {OpenSeadragon.Rect} rectangle the rectangle to convert
	     * @returns {OpenSeadragon.Rect} the converted rectangle
	     */
	    viewerElementToViewportRectangle: function(rectangle) {
	        return $.Rect.fromSummits(
	            this.pointFromPixel(rectangle.getTopLeft(), true),
	            this.pointFromPixel(rectangle.getTopRight(), true),
	            this.pointFromPixel(rectangle.getBottomLeft(), true)
	        );
	    },
	
	    /**
	     * Convert a rectangle in viewport coordinates to pixel coordinates relative
	     * to the viewer element.
	     * @param {OpenSeadragon.Rect} rectangle the rectangle to convert
	     * @returns {OpenSeadragon.Rect} the converted rectangle
	     */
	    viewportToViewerElementRectangle: function(rectangle) {
	        return $.Rect.fromSummits(
	            this.pixelFromPoint(rectangle.getTopLeft(), true),
	            this.pixelFromPoint(rectangle.getTopRight(), true),
	            this.pixelFromPoint(rectangle.getBottomLeft(), true)
	        );
	    },
	
	    /**
	     * Convert pixel coordinates relative to the window to viewport coordinates.
	     * @param {OpenSeadragon.Point} pixel
	     * @returns {OpenSeadragon.Point}
	     */
	    windowToViewportCoordinates: function(pixel) {
	        $.console.assert(this.viewer,
	            "[Viewport.windowToViewportCoordinates] the viewport must have a viewer.");
	        var viewerCoordinates = pixel.minus(
	                $.getElementPosition(this.viewer.element));
	        return this.viewerElementToViewportCoordinates(viewerCoordinates);
	    },
	
	    /**
	     * Convert viewport coordinates to pixel coordinates relative to the window.
	     * @param {OpenSeadragon.Point} point
	     * @returns {OpenSeadragon.Point}
	     */
	    viewportToWindowCoordinates: function(point) {
	        $.console.assert(this.viewer,
	            "[Viewport.viewportToWindowCoordinates] the viewport must have a viewer.");
	        var viewerCoordinates = this.viewportToViewerElementCoordinates(point);
	        return viewerCoordinates.plus(
	                $.getElementPosition(this.viewer.element));
	    },
	
	    /**
	     * Convert a viewport zoom to an image zoom.
	     * Image zoom: ratio of the original image size to displayed image size.
	     * 1 means original image size, 0.5 half size...
	     * Viewport zoom: ratio of the displayed image's width to viewport's width.
	     * 1 means identical width, 2 means image's width is twice the viewport's width...
	     * Note: not accurate with multi-image.
	     * @function
	     * @param {Number} viewportZoom The viewport zoom
	     * target zoom.
	     * @returns {Number} imageZoom The image zoom
	     */
	    viewportToImageZoom: function(viewportZoom) {
	        if (this.viewer) {
	            var count = this.viewer.world.getItemCount();
	            if (count > 1) {
	                $.console.error('[Viewport.viewportToImageZoom] is not ' +
	                    'accurate with multi-image.');
	            } else if (count === 1) {
	                // It is better to use TiledImage.viewportToImageZoom
	                // because this._contentBoundsNoRotate can not be relied on
	                // with clipping.
	                var item = this.viewer.world.getItemAt(0);
	                return item.viewportToImageZoom(viewportZoom);
	            }
	        }
	
	        var imageWidth = this._contentSizeNoRotate.x;
	        var containerWidth = this._containerInnerSize.x;
	        var scale = this._contentBoundsNoRotate.width;
	        var viewportToImageZoomRatio = (containerWidth / imageWidth) * scale;
	        return viewportZoom * viewportToImageZoomRatio;
	    },
	
	    /**
	     * Convert an image zoom to a viewport zoom.
	     * Image zoom: ratio of the original image size to displayed image size.
	     * 1 means original image size, 0.5 half size...
	     * Viewport zoom: ratio of the displayed image's width to viewport's width.
	     * 1 means identical width, 2 means image's width is twice the viewport's width...
	     * Note: not accurate with multi-image.
	     * @function
	     * @param {Number} imageZoom The image zoom
	     * target zoom.
	     * @returns {Number} viewportZoom The viewport zoom
	     */
	    imageToViewportZoom: function(imageZoom) {
	        if (this.viewer) {
	            var count = this.viewer.world.getItemCount();
	            if (count > 1) {
	                $.console.error('[Viewport.imageToViewportZoom] is not accurate ' +
	                    'with multi-image.');
	            } else if (count === 1) {
	                // It is better to use TiledImage.imageToViewportZoom
	                // because this._contentBoundsNoRotate can not be relied on
	                // with clipping.
	                var item = this.viewer.world.getItemAt(0);
	                return item.imageToViewportZoom(imageZoom);
	            }
	        }
	
	        var imageWidth = this._contentSizeNoRotate.x;
	        var containerWidth = this._containerInnerSize.x;
	        var scale = this._contentBoundsNoRotate.width;
	        var viewportToImageZoomRatio = (imageWidth / containerWidth) / scale;
	        return imageZoom * viewportToImageZoomRatio;
	    }
	};
	
	}( OpenSeadragon ));
	
	/*
	 * OpenSeadragon - TiledImage
	 *
	 * Copyright (C) 2009 CodePlex Foundation
	 * Copyright (C) 2010-2013 OpenSeadragon contributors
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 * - Redistributions of source code must retain the above copyright notice,
	 *   this list of conditions and the following disclaimer.
	 *
	 * - Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * - Neither the name of CodePlex Foundation nor the names of its
	 *   contributors may be used to endorse or promote products derived from
	 *   this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
	 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */
	
	(function( $ ){
	
	/**
	 * You shouldn't have to create a TiledImage directly; use {@link OpenSeadragon.Viewer#open}
	 * or {@link OpenSeadragon.Viewer#addTiledImage} instead.
	 * @class TiledImage
	 * @memberof OpenSeadragon
	 * @extends OpenSeadragon.EventSource
	 * @classdesc Handles rendering of tiles for an {@link OpenSeadragon.Viewer}.
	 * A new instance is created for each TileSource opened.
	 * @param {Object} options - Configuration for this TiledImage.
	 * @param {OpenSeadragon.TileSource} options.source - The TileSource that defines this TiledImage.
	 * @param {OpenSeadragon.Viewer} options.viewer - The Viewer that owns this TiledImage.
	 * @param {OpenSeadragon.TileCache} options.tileCache - The TileCache for this TiledImage to use.
	 * @param {OpenSeadragon.Drawer} options.drawer - The Drawer for this TiledImage to draw onto.
	 * @param {OpenSeadragon.ImageLoader} options.imageLoader - The ImageLoader for this TiledImage to use.
	 * @param {Number} [options.x=0] - Left position, in viewport coordinates.
	 * @param {Number} [options.y=0] - Top position, in viewport coordinates.
	 * @param {Number} [options.width=1] - Width, in viewport coordinates.
	 * @param {Number} [options.height] - Height, in viewport coordinates.
	 * @param {OpenSeadragon.Rect} [options.fitBounds] The bounds in viewport coordinates
	 * to fit the image into. If specified, x, y, width and height get ignored.
	 * @param {OpenSeadragon.Placement} [options.fitBoundsPlacement=OpenSeadragon.Placement.CENTER]
	 * How to anchor the image in the bounds if options.fitBounds is set.
	 * @param {OpenSeadragon.Rect} [options.clip] - An area, in image pixels, to clip to
	 * (portions of the image outside of this area will not be visible). Only works on
	 * browsers that support the HTML5 canvas.
	 * @param {Number} [options.springStiffness] - See {@link OpenSeadragon.Options}.
	 * @param {Boolean} [options.animationTime] - See {@link OpenSeadragon.Options}.
	 * @param {Number} [options.minZoomImageRatio] - See {@link OpenSeadragon.Options}.
	 * @param {Boolean} [options.wrapHorizontal] - See {@link OpenSeadragon.Options}.
	 * @param {Boolean} [options.wrapVertical] - See {@link OpenSeadragon.Options}.
	 * @param {Boolean} [options.immediateRender] - See {@link OpenSeadragon.Options}.
	 * @param {Number} [options.blendTime] - See {@link OpenSeadragon.Options}.
	 * @param {Boolean} [options.alwaysBlend] - See {@link OpenSeadragon.Options}.
	 * @param {Number} [options.minPixelRatio] - See {@link OpenSeadragon.Options}.
	 * @param {Number} [options.smoothTileEdgesMinZoom] - See {@link OpenSeadragon.Options}.
	 * @param {Boolean} [options.iOSDevice] - See {@link OpenSeadragon.Options}.
	 * @param {Number} [options.opacity=1] - Opacity the tiled image should be drawn at.
	 * @param {String} [options.compositeOperation] - How the image is composited onto other images; see compositeOperation in {@link OpenSeadragon.Options} for possible values.
	 * @param {Boolean} [options.debugMode] - See {@link OpenSeadragon.Options}.
	 * @param {String|CanvasGradient|CanvasPattern|Function} [options.placeholderFillStyle] - See {@link OpenSeadragon.Options}.
	 * @param {String|Boolean} [options.crossOriginPolicy] - See {@link OpenSeadragon.Options}.
	 */
	$.TiledImage = function( options ) {
	    var _this = this;
	
	    $.console.assert( options.tileCache, "[TiledImage] options.tileCache is required" );
	    $.console.assert( options.drawer, "[TiledImage] options.drawer is required" );
	    $.console.assert( options.viewer, "[TiledImage] options.viewer is required" );
	    $.console.assert( options.imageLoader, "[TiledImage] options.imageLoader is required" );
	    $.console.assert( options.source, "[TiledImage] options.source is required" );
	    $.console.assert(!options.clip || options.clip instanceof $.Rect,
	        "[TiledImage] options.clip must be an OpenSeadragon.Rect if present");
	
	    $.EventSource.call( this );
	
	    this._tileCache = options.tileCache;
	    delete options.tileCache;
	
	    this._drawer = options.drawer;
	    delete options.drawer;
	
	    this._imageLoader = options.imageLoader;
	    delete options.imageLoader;
	
	    if (options.clip instanceof $.Rect) {
	        this._clip = options.clip.clone();
	    }
	
	    delete options.clip;
	
	    var x = options.x || 0;
	    delete options.x;
	    var y = options.y || 0;
	    delete options.y;
	
	    // Ratio of zoomable image height to width.
	    this.normHeight = options.source.dimensions.y / options.source.dimensions.x;
	    this.contentAspectX = options.source.dimensions.x / options.source.dimensions.y;
	
	    var scale = 1;
	    if ( options.width ) {
	        scale = options.width;
	        delete options.width;
	
	        if ( options.height ) {
	            $.console.error( "specifying both width and height to a tiledImage is not supported" );
	            delete options.height;
	        }
	    } else if ( options.height ) {
	        scale = options.height / this.normHeight;
	        delete options.height;
	    }
	
	    var fitBounds = options.fitBounds;
	    delete options.fitBounds;
	    var fitBoundsPlacement = options.fitBoundsPlacement || OpenSeadragon.Placement.CENTER;
	    delete options.fitBoundsPlacement;
	
	    $.extend( true, this, {
	
	        //internal state properties
	        viewer:         null,
	        tilesMatrix:    {},    // A '3d' dictionary [level][x][y] --> Tile.
	        coverage:       {},    // A '3d' dictionary [level][x][y] --> Boolean.
	        lastDrawn:      [],    // An unordered list of Tiles drawn last frame.
	        lastResetTime:  0,     // Last time for which the tiledImage was reset.
	        _midDraw:       false, // Is the tiledImage currently updating the viewport?
	        _needsDraw:     true,  // Does the tiledImage need to update the viewport again?
	        _hasOpaqueTile: false,  // Do we have even one fully opaque tile?
	        //configurable settings
	        springStiffness:        $.DEFAULT_SETTINGS.springStiffness,
	        animationTime:          $.DEFAULT_SETTINGS.animationTime,
	        minZoomImageRatio:      $.DEFAULT_SETTINGS.minZoomImageRatio,
	        wrapHorizontal:         $.DEFAULT_SETTINGS.wrapHorizontal,
	        wrapVertical:           $.DEFAULT_SETTINGS.wrapVertical,
	        immediateRender:        $.DEFAULT_SETTINGS.immediateRender,
	        blendTime:              $.DEFAULT_SETTINGS.blendTime,
	        alwaysBlend:            $.DEFAULT_SETTINGS.alwaysBlend,
	        minPixelRatio:          $.DEFAULT_SETTINGS.minPixelRatio,
	        smoothTileEdgesMinZoom: $.DEFAULT_SETTINGS.smoothTileEdgesMinZoom,
	        iOSDevice:              $.DEFAULT_SETTINGS.iOSDevice,
	        debugMode:              $.DEFAULT_SETTINGS.debugMode,
	        crossOriginPolicy:      $.DEFAULT_SETTINGS.crossOriginPolicy,
	        placeholderFillStyle:   $.DEFAULT_SETTINGS.placeholderFillStyle,
	        opacity:                $.DEFAULT_SETTINGS.opacity,
	        compositeOperation:     $.DEFAULT_SETTINGS.compositeOperation
	
	    }, options );
	
	    this._xSpring = new $.Spring({
	        initial: x,
	        springStiffness: this.springStiffness,
	        animationTime: this.animationTime
	    });
	
	    this._ySpring = new $.Spring({
	        initial: y,
	        springStiffness: this.springStiffness,
	        animationTime: this.animationTime
	    });
	
	    this._scaleSpring = new $.Spring({
	        initial: scale,
	        springStiffness: this.springStiffness,
	        animationTime: this.animationTime
	    });
	
	    this._updateForScale();
	
	    if (fitBounds) {
	        this.fitBounds(fitBounds, fitBoundsPlacement, true);
	    }
	
	    // We need a callback to give image manipulation a chance to happen
	    this._drawingHandler = function(args) {
	      /**
	       * This event is fired just before the tile is drawn giving the application a chance to alter the image.
	       *
	       * NOTE: This event is only fired when the drawer is using a &lt;canvas&gt;.
	       *
	       * @event tile-drawing
	       * @memberof OpenSeadragon.Viewer
	       * @type {object}
	       * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.
	       * @property {OpenSeadragon.Tile} tile - The Tile being drawn.
	       * @property {OpenSeadragon.TiledImage} tiledImage - Which TiledImage is being drawn.
	       * @property {OpenSeadragon.Tile} context - The HTML canvas context being drawn into.
	       * @property {OpenSeadragon.Tile} rendered - The HTML canvas context containing the tile imagery.
	       * @property {?Object} userData - Arbitrary subscriber-defined object.
	       */
	        _this.viewer.raiseEvent('tile-drawing', $.extend({
	            tiledImage: _this
	        }, args));
	    };
	};
	
	$.extend($.TiledImage.prototype, $.EventSource.prototype, /** @lends OpenSeadragon.TiledImage.prototype */{
	    /**
	     * @returns {Boolean} Whether the TiledImage needs to be drawn.
	     */
	    needsDraw: function() {
	        return this._needsDraw;
	    },
	
	    /**
	     * Clears all tiles and triggers an update on the next call to
	     * {@link OpenSeadragon.TiledImage#update}.
	     */
	    reset: function() {
	        this._tileCache.clearTilesFor(this);
	        this.lastResetTime = $.now();
	        this._needsDraw = true;
	    },
	
	    /**
	     * Updates the TiledImage's bounds, animating if needed.
	     * @returns {Boolean} Whether the TiledImage animated.
	     */
	    update: function() {
	        var oldX = this._xSpring.current.value;
	        var oldY = this._ySpring.current.value;
	        var oldScale = this._scaleSpring.current.value;
	
	        this._xSpring.update();
	        this._ySpring.update();
	        this._scaleSpring.update();
	
	        if (this._xSpring.current.value !== oldX || this._ySpring.current.value !== oldY ||
	                this._scaleSpring.current.value !== oldScale) {
	            this._updateForScale();
	            this._needsDraw = true;
	            return true;
	        }
	
	        return false;
	    },
	
	    /**
	     * Draws the TiledImage to its Drawer.
	     */
	    draw: function() {
	        if (this.opacity !== 0) {
	            this._midDraw = true;
	            updateViewport(this);
	            this._midDraw = false;
	        }
	    },
	
	    /**
	     * Destroy the TiledImage (unload current loaded tiles).
	     */
	    destroy: function() {
	        this.reset();
	    },
	
	    /**
	     * @returns {OpenSeadragon.Rect} This TiledImage's bounds in viewport coordinates.
	     * @param {Boolean} [current=false] - Pass true for the current location; false for target location.
	     */
	    getBounds: function(current) {
	        if (current) {
	            return new $.Rect( this._xSpring.current.value, this._ySpring.current.value,
	                this._worldWidthCurrent, this._worldHeightCurrent );
	        }
	
	        return new $.Rect( this._xSpring.target.value, this._ySpring.target.value,
	            this._worldWidthTarget, this._worldHeightTarget );
	    },
	
	    // deprecated
	    getWorldBounds: function() {
	        $.console.error('[TiledImage.getWorldBounds] is deprecated; use TiledImage.getBounds instead');
	        return this.getBounds();
	    },
	
	    /**
	     * Get the bounds of the displayed part of the tiled image.
	     * @param {Boolean} [current=false] Pass true for the current location,
	     * false for the target location.
	     * @returns {$.Rect} The clipped bounds in viewport coordinates.
	     */
	    getClippedBounds: function(current) {
	        var bounds = this.getBounds(current);
	        if (this._clip) {
	            var ratio = this._worldWidthCurrent / this.source.dimensions.x;
	            var clip = this._clip.times(ratio);
	            bounds = new $.Rect(
	                bounds.x + clip.x,
	                bounds.y + clip.y,
	                clip.width,
	                clip.height);
	        }
	        return bounds;
	    },
	
	    /**
	     * @returns {OpenSeadragon.Point} This TiledImage's content size, in original pixels.
	     */
	    getContentSize: function() {
	        return new $.Point(this.source.dimensions.x, this.source.dimensions.y);
	    },
	
	    // private
	    _viewportToImageDelta: function( viewerX, viewerY, current ) {
	        var scale = (current ? this._scaleSpring.current.value : this._scaleSpring.target.value);
	        return new $.Point(viewerX * (this.source.dimensions.x / scale),
	            viewerY * ((this.source.dimensions.y * this.contentAspectX) / scale));
	    },
	
	    /**
	     * Translates from OpenSeadragon viewer coordinate system to image coordinate system.
	     * This method can be called either by passing X,Y coordinates or an {@link OpenSeadragon.Point}.
	     * @param {Number|OpenSeadragon.Point} viewerX - The X coordinate or point in viewport coordinate system.
	     * @param {Number} [viewerY] - The Y coordinate in viewport coordinate system.
	     * @param {Boolean} [current=false] - Pass true to use the current location; false for target location.
	     * @return {OpenSeadragon.Point} A point representing the coordinates in the image.
	     */
	    viewportToImageCoordinates: function( viewerX, viewerY, current ) {
	        if (viewerX instanceof $.Point) {
	            //they passed a point instead of individual components
	            current = viewerY;
	            viewerY = viewerX.y;
	            viewerX = viewerX.x;
	        }
	
	        if (current) {
	            return this._viewportToImageDelta(viewerX - this._xSpring.current.value,
	                viewerY - this._ySpring.current.value);
	        }
	
	        return this._viewportToImageDelta(viewerX - this._xSpring.target.value,
	            viewerY - this._ySpring.target.value);
	    },
	
	    // private
	    _imageToViewportDelta: function( imageX, imageY, current ) {
	        var scale = (current ? this._scaleSpring.current.value : this._scaleSpring.target.value);
	        return new $.Point((imageX / this.source.dimensions.x) * scale,
	            (imageY / this.source.dimensions.y / this.contentAspectX) * scale);
	    },
	
	    /**
	     * Translates from image coordinate system to OpenSeadragon viewer coordinate system
	     * This method can be called either by passing X,Y coordinates or an {@link OpenSeadragon.Point}.
	     * @param {Number|OpenSeadragon.Point} imageX - The X coordinate or point in image coordinate system.
	     * @param {Number} [imageY] - The Y coordinate in image coordinate system.
	     * @param {Boolean} [current=false] - Pass true to use the current location; false for target location.
	     * @return {OpenSeadragon.Point} A point representing the coordinates in the viewport.
	     */
	    imageToViewportCoordinates: function( imageX, imageY, current ) {
	        if (imageX instanceof $.Point) {
	            //they passed a point instead of individual components
	            current = imageY;
	            imageY = imageX.y;
	            imageX = imageX.x;
	        }
	
	        var point = this._imageToViewportDelta(imageX, imageY);
	        if (current) {
	            point.x += this._xSpring.current.value;
	            point.y += this._ySpring.current.value;
	        } else {
	            point.x += this._xSpring.target.value;
	            point.y += this._ySpring.target.value;
	        }
	
	        return point;
	    },
	
	    /**
	     * Translates from a rectangle which describes a portion of the image in
	     * pixel coordinates to OpenSeadragon viewport rectangle coordinates.
	     * This method can be called either by passing X,Y,width,height or an {@link OpenSeadragon.Rect}.
	     * @param {Number|OpenSeadragon.Rect} imageX - The left coordinate or rectangle in image coordinate system.
	     * @param {Number} [imageY] - The top coordinate in image coordinate system.
	     * @param {Number} [pixelWidth] - The width in pixel of the rectangle.
	     * @param {Number} [pixelHeight] - The height in pixel of the rectangle.
	     * @param {Boolean} [current=false] - Pass true to use the current location; false for target location.
	     * @return {OpenSeadragon.Rect} A rect representing the coordinates in the viewport.
	     */
	    imageToViewportRectangle: function( imageX, imageY, pixelWidth, pixelHeight, current ) {
	        var rect = imageX;
	        if (rect instanceof $.Rect) {
	            //they passed a rect instead of individual components
	            current = imageY;
	        } else {
	            rect = new $.Rect(imageX, imageY, pixelWidth, pixelHeight);
	        }
	
	        var coordA = this.imageToViewportCoordinates(rect.getTopLeft(), current);
	        var coordB = this._imageToViewportDelta(rect.width, rect.height, current);
	
	        return new $.Rect(
	            coordA.x,
	            coordA.y,
	            coordB.x,
	            coordB.y,
	            rect.degrees
	        );
	    },
	
	    /**
	     * Translates from a rectangle which describes a portion of
	     * the viewport in point coordinates to image rectangle coordinates.
	     * This method can be called either by passing X,Y,width,height or an {@link OpenSeadragon.Rect}.
	     * @param {Number|OpenSeadragon.Rect} viewerX - The left coordinate or rectangle in viewport coordinate system.
	     * @param {Number} [viewerY] - The top coordinate in viewport coordinate system.
	     * @param {Number} [pointWidth] - The width in viewport coordinate system.
	     * @param {Number} [pointHeight] - The height in viewport coordinate system.
	     * @param {Boolean} [current=false] - Pass true to use the current location; false for target location.
	     * @return {OpenSeadragon.Rect} A rect representing the coordinates in the image.
	     */
	    viewportToImageRectangle: function( viewerX, viewerY, pointWidth, pointHeight, current ) {
	        var rect = viewerX;
	        if (viewerX instanceof $.Rect) {
	            //they passed a rect instead of individual components
	            current = viewerY;
	        } else {
	            rect = new $.Rect(viewerX, viewerY, pointWidth, pointHeight);
	        }
	
	        var coordA = this.viewportToImageCoordinates(rect.getTopLeft(), current);
	        var coordB = this._viewportToImageDelta(rect.width, rect.height, current);
	
	        return new $.Rect(
	            coordA.x,
	            coordA.y,
	            coordB.x,
	            coordB.y,
	            rect.degrees
	        );
	    },
	
	    /**
	     * Convert pixel coordinates relative to the viewer element to image
	     * coordinates.
	     * @param {OpenSeadragon.Point} pixel
	     * @returns {OpenSeadragon.Point}
	     */
	    viewerElementToImageCoordinates: function( pixel ) {
	        var point = this.viewport.pointFromPixel( pixel, true );
	        return this.viewportToImageCoordinates( point );
	    },
	
	    /**
	     * Convert pixel coordinates relative to the image to
	     * viewer element coordinates.
	     * @param {OpenSeadragon.Point} pixel
	     * @returns {OpenSeadragon.Point}
	     */
	    imageToViewerElementCoordinates: function( pixel ) {
	        var point = this.imageToViewportCoordinates( pixel );
	        return this.viewport.pixelFromPoint( point, true );
	    },
	
	    /**
	     * Convert pixel coordinates relative to the window to image coordinates.
	     * @param {OpenSeadragon.Point} pixel
	     * @returns {OpenSeadragon.Point}
	     */
	    windowToImageCoordinates: function( pixel ) {
	        var viewerCoordinates = pixel.minus(
	                OpenSeadragon.getElementPosition( this.viewer.element ));
	        return this.viewerElementToImageCoordinates( viewerCoordinates );
	    },
	
	    /**
	     * Convert image coordinates to pixel coordinates relative to the window.
	     * @param {OpenSeadragon.Point} pixel
	     * @returns {OpenSeadragon.Point}
	     */
	    imageToWindowCoordinates: function( pixel ) {
	        var viewerCoordinates = this.imageToViewerElementCoordinates( pixel );
	        return viewerCoordinates.plus(
	                OpenSeadragon.getElementPosition( this.viewer.element ));
	    },
	
	    /**
	     * Convert a viewport zoom to an image zoom.
	     * Image zoom: ratio of the original image size to displayed image size.
	     * 1 means original image size, 0.5 half size...
	     * Viewport zoom: ratio of the displayed image's width to viewport's width.
	     * 1 means identical width, 2 means image's width is twice the viewport's width...
	     * @function
	     * @param {Number} viewportZoom The viewport zoom
	     * @returns {Number} imageZoom The image zoom
	     */
	    viewportToImageZoom: function( viewportZoom ) {
	        var ratio = this._scaleSpring.current.value *
	                this.viewport._containerInnerSize.x / this.source.dimensions.x;
	        return ratio * viewportZoom ;
	    },
	
	    /**
	     * Convert an image zoom to a viewport zoom.
	     * Image zoom: ratio of the original image size to displayed image size.
	     * 1 means original image size, 0.5 half size...
	     * Viewport zoom: ratio of the displayed image's width to viewport's width.
	     * 1 means identical width, 2 means image's width is twice the viewport's width...
	     * Note: not accurate with multi-image.
	     * @function
	     * @param {Number} imageZoom The image zoom
	     * @returns {Number} viewportZoom The viewport zoom
	     */
	    imageToViewportZoom: function( imageZoom ) {
	        var ratio = this._scaleSpring.current.value *
	                this.viewport._containerInnerSize.x / this.source.dimensions.x;
	        return imageZoom / ratio;
	    },
	
	    /**
	     * Sets the TiledImage's position in the world.
	     * @param {OpenSeadragon.Point} position - The new position, in viewport coordinates.
	     * @param {Boolean} [immediately=false] - Whether to animate to the new position or snap immediately.
	     * @fires OpenSeadragon.TiledImage.event:bounds-change
	     */
	    setPosition: function(position, immediately) {
	        var sameTarget = (this._xSpring.target.value === position.x &&
	            this._ySpring.target.value === position.y);
	
	        if (immediately) {
	            if (sameTarget && this._xSpring.current.value === position.x &&
	                    this._ySpring.current.value === position.y) {
	                return;
	            }
	
	            this._xSpring.resetTo(position.x);
	            this._ySpring.resetTo(position.y);
	            this._needsDraw = true;
	        } else {
	            if (sameTarget) {
	                return;
	            }
	
	            this._xSpring.springTo(position.x);
	            this._ySpring.springTo(position.y);
	            this._needsDraw = true;
	        }
	
	        if (!sameTarget) {
	            this._raiseBoundsChange();
	        }
	    },
	
	    /**
	     * Sets the TiledImage's width in the world, adjusting the height to match based on aspect ratio.
	     * @param {Number} width - The new width, in viewport coordinates.
	     * @param {Boolean} [immediately=false] - Whether to animate to the new size or snap immediately.
	     * @fires OpenSeadragon.TiledImage.event:bounds-change
	     */
	    setWidth: function(width, immediately) {
	        this._setScale(width, immediately);
	    },
	
	    /**
	     * Sets the TiledImage's height in the world, adjusting the width to match based on aspect ratio.
	     * @param {Number} height - The new height, in viewport coordinates.
	     * @param {Boolean} [immediately=false] - Whether to animate to the new size or snap immediately.
	     * @fires OpenSeadragon.TiledImage.event:bounds-change
	     */
	    setHeight: function(height, immediately) {
	        this._setScale(height / this.normHeight, immediately);
	    },
	
	    /**
	     * Positions and scales the TiledImage to fit in the specified bounds.
	     * Note: this method fires OpenSeadragon.TiledImage.event:bounds-change
	     * twice
	     * @param {OpenSeadragon.Rect} bounds The bounds to fit the image into.
	     * @param {OpenSeadragon.Placement} [anchor=OpenSeadragon.Placement.CENTER]
	     * How to anchor the image in the bounds.
	     * @param {Boolean} [immediately=false] Whether to animate to the new size
	     * or snap immediately.
	     * @fires OpenSeadragon.TiledImage.event:bounds-change
	     */
	    fitBounds: function(bounds, anchor, immediately) {
	        anchor = anchor || $.Placement.CENTER;
	        var anchorProperties = $.Placement.properties[anchor];
	        var aspectRatio = this.contentAspectX;
	        var xOffset = 0;
	        var yOffset = 0;
	        var displayedWidthRatio = 1;
	        var displayedHeightRatio = 1;
	        if (this._clip) {
	            aspectRatio = this._clip.getAspectRatio();
	            displayedWidthRatio = this._clip.width / this.source.dimensions.x;
	            displayedHeightRatio = this._clip.height / this.source.dimensions.y;
	            if (bounds.getAspectRatio() > aspectRatio) {
	                xOffset = this._clip.x / this._clip.height * bounds.height;
	                yOffset = this._clip.y / this._clip.height * bounds.height;
	            } else {
	                xOffset = this._clip.x / this._clip.width * bounds.width;
	                yOffset = this._clip.y / this._clip.width * bounds.width;
	            }
	        }
	
	        if (bounds.getAspectRatio() > aspectRatio) {
	            // We will have margins on the X axis
	            var height = bounds.height / displayedHeightRatio;
	            var marginLeft = 0;
	            if (anchorProperties.isHorizontallyCentered) {
	                marginLeft = (bounds.width - bounds.height * aspectRatio) / 2;
	            } else if (anchorProperties.isRight) {
	                marginLeft = bounds.width - bounds.height * aspectRatio;
	            }
	            this.setPosition(
	                new $.Point(bounds.x - xOffset + marginLeft, bounds.y - yOffset),
	                immediately);
	            this.setHeight(height, immediately);
	        } else {
	            // We will have margins on the Y axis
	            var width = bounds.width / displayedWidthRatio;
	            var marginTop = 0;
	            if (anchorProperties.isVerticallyCentered) {
	                marginTop = (bounds.height - bounds.width / aspectRatio) / 2;
	            } else if (anchorProperties.isBottom) {
	                marginTop = bounds.height - bounds.width / aspectRatio;
	            }
	            this.setPosition(
	                new $.Point(bounds.x - xOffset, bounds.y - yOffset + marginTop),
	                immediately);
	            this.setWidth(width, immediately);
	        }
	    },
	
	    /**
	     * @returns {OpenSeadragon.Rect|null} The TiledImage's current clip rectangle,
	     * in image pixels, or null if none.
	     */
	    getClip: function() {
	        if (this._clip) {
	            return this._clip.clone();
	        }
	
	        return null;
	    },
	
	    /**
	     * @param {OpenSeadragon.Rect|null} newClip - An area, in image pixels, to clip to
	     * (portions of the image outside of this area will not be visible). Only works on
	     * browsers that support the HTML5 canvas.
	     */
	    setClip: function(newClip) {
	        $.console.assert(!newClip || newClip instanceof $.Rect,
	            "[TiledImage.setClip] newClip must be an OpenSeadragon.Rect or null");
	
	        if (newClip instanceof $.Rect) {
	            this._clip = newClip.clone();
	        } else {
	            this._clip = null;
	        }
	
	        this._needsDraw = true;
	    },
	
	    /**
	     * @returns {Number} The TiledImage's current opacity.
	     */
	    getOpacity: function() {
	        return this.opacity;
	    },
	
	    /**
	     * @param {Number} opacity Opacity the tiled image should be drawn at.
	     */
	    setOpacity: function(opacity) {
	        this.opacity = opacity;
	        this._needsDraw = true;
	    },
	
	    /**
	     * @returns {String} The TiledImage's current compositeOperation.
	     */
	    getCompositeOperation: function() {
	        return this.compositeOperation;
	    },
	
	    /**
	     * @param {String} compositeOperation the tiled image should be drawn with this globalCompositeOperation.
	     */
	    setCompositeOperation: function(compositeOperation) {
	        this.compositeOperation = compositeOperation;
	        this._needsDraw = true;
	    },
	
	    // private
	    _setScale: function(scale, immediately) {
	        var sameTarget = (this._scaleSpring.target.value === scale);
	        if (immediately) {
	            if (sameTarget && this._scaleSpring.current.value === scale) {
	                return;
	            }
	
	            this._scaleSpring.resetTo(scale);
	            this._updateForScale();
	            this._needsDraw = true;
	        } else {
	            if (sameTarget) {
	                return;
	            }
	
	            this._scaleSpring.springTo(scale);
	            this._updateForScale();
	            this._needsDraw = true;
	        }
	
	        if (!sameTarget) {
	            this._raiseBoundsChange();
	        }
	    },
	
	    // private
	    _updateForScale: function() {
	        this._worldWidthTarget = this._scaleSpring.target.value;
	        this._worldHeightTarget = this.normHeight * this._scaleSpring.target.value;
	        this._worldWidthCurrent = this._scaleSpring.current.value;
	        this._worldHeightCurrent = this.normHeight * this._scaleSpring.current.value;
	    },
	
	    // private
	    _raiseBoundsChange: function() {
	        /**
	         * Raised when the TiledImage's bounds are changed.
	         * Note that this event is triggered only when the animation target is changed;
	         * not for every frame of animation.
	         * @event bounds-change
	         * @memberOf OpenSeadragon.TiledImage
	         * @type {object}
	         * @property {OpenSeadragon.World} eventSource - A reference to the TiledImage which raised the event.
	         * @property {?Object} userData - Arbitrary subscriber-defined object.
	         */
	        this.raiseEvent('bounds-change');
	    },
	
	    // private
	    _isBottomItem: function() {
	        return this.viewer.world.getItemAt(0) === this;
	    }
	});
	
	/**
	 * @private
	 * @inner
	 * Pretty much every other line in this needs to be documented so it's clear
	 * how each piece of this routine contributes to the drawing process.  That's
	 * why there are so many TODO's inside this function.
	 */
	function updateViewport( tiledImage ) {
	
	    tiledImage._needsDraw = false;
	
	    var tile,
	        level,
	        best            = null,
	        haveDrawn       = false,
	        currentTime     = $.now(),
	        viewportBounds  = tiledImage.viewport.getBoundsWithMargins( true ),
	        zeroRatioC      = tiledImage.viewport.deltaPixelsFromPointsNoRotate(
	            tiledImage.source.getPixelRatio( 0 ),
	            true
	        ).x * tiledImage._scaleSpring.current.value,
	        lowestLevel     = Math.max(
	            tiledImage.source.minLevel,
	            Math.floor(
	                Math.log( tiledImage.minZoomImageRatio ) /
	                Math.log( 2 )
	            )
	        ),
	        highestLevel    = Math.min(
	            Math.abs(tiledImage.source.maxLevel),
	            Math.abs(Math.floor(
	                Math.log( zeroRatioC / tiledImage.minPixelRatio ) /
	                Math.log( 2 )
	            ))
	        ),
	        renderPixelRatioC,
	        renderPixelRatioT,
	        zeroRatioT,
	        optimalRatio,
	        levelOpacity,
	        levelVisibility;
	
	    // Reset tile's internal drawn state
	    while (tiledImage.lastDrawn.length > 0) {
	        tile = tiledImage.lastDrawn.pop();
	        tile.beingDrawn = false;
	    }
	
	    if (!tiledImage.wrapHorizontal && !tiledImage.wrapVertical) {
	        var tiledImageBounds = tiledImage.getClippedBounds(true);
	        var intersection = viewportBounds.intersection(tiledImageBounds);
	        if (intersection === null) {
	            return;
	        }
	        viewportBounds = intersection;
	    }
	    viewportBounds = viewportBounds.getBoundingBox();
	    viewportBounds.x -= tiledImage._xSpring.current.value;
	    viewportBounds.y -= tiledImage._ySpring.current.value;
	
	    var viewportTL = viewportBounds.getTopLeft();
	    var viewportBR = viewportBounds.getBottomRight();
	
	    //Don't draw if completely outside of the viewport
	    if  ( !tiledImage.wrapHorizontal && (viewportBR.x < 0 || viewportTL.x > tiledImage._worldWidthCurrent ) ) {
	        return;
	    }
	
	    if ( !tiledImage.wrapVertical && ( viewportBR.y < 0 || viewportTL.y > tiledImage._worldHeightCurrent ) ) {
	        return;
	    }
	
	    // Calculate viewport rect / bounds
	    if ( !tiledImage.wrapHorizontal ) {
	        viewportTL.x = Math.max( viewportTL.x, 0 );
	        viewportBR.x = Math.min( viewportBR.x, tiledImage._worldWidthCurrent );
	    }
	
	    if ( !tiledImage.wrapVertical ) {
	        viewportTL.y = Math.max( viewportTL.y, 0 );
	        viewportBR.y = Math.min( viewportBR.y, tiledImage._worldHeightCurrent );
	    }
	
	    // Calculations for the interval of levels to draw
	    // (above in initial var statement)
	    // can return invalid intervals; fix that here if necessary
	    lowestLevel = Math.min( lowestLevel, highestLevel );
	
	    // Update any level that will be drawn
	    var drawLevel; // FIXME: drawLevel should have a more explanatory name
	    for ( level = highestLevel; level >= lowestLevel; level-- ) {
	        drawLevel = false;
	
	        //Avoid calculations for draw if we have already drawn this
	        renderPixelRatioC = tiledImage.viewport.deltaPixelsFromPointsNoRotate(
	            tiledImage.source.getPixelRatio( level ),
	            true
	        ).x * tiledImage._scaleSpring.current.value;
	
	        if ( ( !haveDrawn && renderPixelRatioC >= tiledImage.minPixelRatio ) ||
	             ( level == lowestLevel ) ) {
	            drawLevel = true;
	            haveDrawn = true;
	        } else if ( !haveDrawn ) {
	            continue;
	        }
	
	        //Perform calculations for draw if we haven't drawn this
	        renderPixelRatioT = tiledImage.viewport.deltaPixelsFromPointsNoRotate(
	            tiledImage.source.getPixelRatio( level ),
	            false
	        ).x * tiledImage._scaleSpring.current.value;
	
	        zeroRatioT      = tiledImage.viewport.deltaPixelsFromPointsNoRotate(
	            tiledImage.source.getPixelRatio(
	                Math.max(
	                    tiledImage.source.getClosestLevel( tiledImage.viewport.containerSize ) - 1,
	                    0
	                )
	            ),
	            false
	        ).x * tiledImage._scaleSpring.current.value;
	
	        optimalRatio    = tiledImage.immediateRender ?
	            1 :
	            zeroRatioT;
	
	        levelOpacity    = Math.min( 1, ( renderPixelRatioC - 0.5 ) / 0.5 );
	
	        levelVisibility = optimalRatio / Math.abs(
	            optimalRatio - renderPixelRatioT
	        );
	
	        // Update the level and keep track of 'best' tile to load
	        best = updateLevel(
	            tiledImage,
	            haveDrawn,
	            drawLevel,
	            level,
	            levelOpacity,
	            levelVisibility,
	            viewportTL,
	            viewportBR,
	            currentTime,
	            best
	        );
	
	        // Stop the loop if lower-res tiles would all be covered by
	        // already drawn tiles
	        if (  providesCoverage( tiledImage.coverage, level ) ) {
	            break;
	        }
	    }
	
	    // Perform the actual drawing
	    drawTiles( tiledImage, tiledImage.lastDrawn );
	
	    // Load the new 'best' tile
	    if (best && !best.context2D) {
	        loadTile( tiledImage, best, currentTime );
	    }
	
	}
	
	
	function updateLevel( tiledImage, haveDrawn, drawLevel, level, levelOpacity, levelVisibility, viewportTL, viewportBR, currentTime, best ){
	
	    var x, y,
	        tileTL,
	        tileBR,
	        numberOfTiles,
	        viewportCenter  = tiledImage.viewport.pixelFromPoint( tiledImage.viewport.getCenter() );
	
	
	    if( tiledImage.viewer ){
	        /**
	         * <em>- Needs documentation -</em>
	         *
	         * @event update-level
	         * @memberof OpenSeadragon.Viewer
	         * @type {object}
	         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.
	         * @property {OpenSeadragon.TiledImage} tiledImage - Which TiledImage is being drawn.
	         * @property {Object} havedrawn
	         * @property {Object} level
	         * @property {Object} opacity
	         * @property {Object} visibility
	         * @property {Object} topleft
	         * @property {Object} bottomright
	         * @property {Object} currenttime
	         * @property {Object} best
	         * @property {?Object} userData - Arbitrary subscriber-defined object.
	         */
	        tiledImage.viewer.raiseEvent( 'update-level', {
	            tiledImage: tiledImage,
	            havedrawn: haveDrawn,
	            level: level,
	            opacity: levelOpacity,
	            visibility: levelVisibility,
	            topleft: viewportTL,
	            bottomright: viewportBR,
	            currenttime: currentTime,
	            best: best
	        });
	    }
	
	    //OK, a new drawing so do your calculations
	    tileTL    = tiledImage.source.getTileAtPoint( level, viewportTL.divide( tiledImage._scaleSpring.current.value ));
	    tileBR    = tiledImage.source.getTileAtPoint( level, viewportBR.divide( tiledImage._scaleSpring.current.value ));
	    numberOfTiles  = tiledImage.source.getNumTiles( level );
	
	    resetCoverage( tiledImage.coverage, level );
	
	    if ( !tiledImage.wrapHorizontal ) {
	        tileBR.x = Math.min( tileBR.x, numberOfTiles.x - 1 );
	    }
	    if ( !tiledImage.wrapVertical ) {
	        tileBR.y = Math.min( tileBR.y, numberOfTiles.y - 1 );
	    }
	
	    for ( x = tileTL.x; x <= tileBR.x; x++ ) {
	        for ( y = tileTL.y; y <= tileBR.y; y++ ) {
	
	            best = updateTile(
	                tiledImage,
	                drawLevel,
	                haveDrawn,
	                x, y,
	                level,
	                levelOpacity,
	                levelVisibility,
	                viewportCenter,
	                numberOfTiles,
	                currentTime,
	                best
	            );
	
	        }
	    }
	
	    return best;
	}
	
	function updateTile( tiledImage, drawLevel, haveDrawn, x, y, level, levelOpacity, levelVisibility, viewportCenter, numberOfTiles, currentTime, best){
	
	    var tile = getTile(
	            x, y,
	            level,
	            tiledImage.source,
	            tiledImage.tilesMatrix,
	            currentTime,
	            numberOfTiles,
	            tiledImage._worldWidthCurrent,
	            tiledImage._worldHeightCurrent
	        ),
	        drawTile = drawLevel;
	
	    if( tiledImage.viewer ){
	        /**
	         * <em>- Needs documentation -</em>
	         *
	         * @event update-tile
	         * @memberof OpenSeadragon.Viewer
	         * @type {object}
	         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.
	         * @property {OpenSeadragon.TiledImage} tiledImage - Which TiledImage is being drawn.
	         * @property {OpenSeadragon.Tile} tile
	         * @property {?Object} userData - Arbitrary subscriber-defined object.
	         */
	        tiledImage.viewer.raiseEvent( 'update-tile', {
	            tiledImage: tiledImage,
	            tile: tile
	        });
	    }
	
	    setCoverage( tiledImage.coverage, level, x, y, false );
	
	    if ( !tile.exists ) {
	        return best;
	    }
	
	    if ( haveDrawn && !drawTile ) {
	        if ( isCovered( tiledImage.coverage, level, x, y ) ) {
	            setCoverage( tiledImage.coverage, level, x, y, true );
	        } else {
	            drawTile = true;
	        }
	    }
	
	    if ( !drawTile ) {
	        return best;
	    }
	
	    positionTile(
	        tile,
	        tiledImage.source.tileOverlap,
	        tiledImage.viewport,
	        viewportCenter,
	        levelVisibility,
	        tiledImage
	    );
	
	    if (!tile.loaded) {
	        if (tile.context2D) {
	            setTileLoaded(tiledImage, tile);
	        } else {
	            var imageRecord = tiledImage._tileCache.getImageRecord(tile.url);
	            if (imageRecord) {
	                var image = imageRecord.getImage();
	                setTileLoaded(tiledImage, tile, image);
	            }
	        }
	    }
	
	    if ( tile.loaded ) {
	        var needsDraw = blendTile(
	            tiledImage,
	            tile,
	            x, y,
	            level,
	            levelOpacity,
	            currentTime
	        );
	
	        if ( needsDraw ) {
	            tiledImage._needsDraw = true;
	        }
	    } else if ( tile.loading ) {
	        // the tile is already in the download queue
	        // thanks josh1093 for finally translating this typo
	    } else {
	        best = compareTiles( best, tile );
	    }
	
	    return best;
	}
	
	function getTile( x, y, level, tileSource, tilesMatrix, time, numTiles, worldWidth, worldHeight ) {
	    var xMod,
	        yMod,
	        bounds,
	        exists,
	        url,
	        context2D,
	        tile;
	
	    if ( !tilesMatrix[ level ] ) {
	        tilesMatrix[ level ] = {};
	    }
	    if ( !tilesMatrix[ level ][ x ] ) {
	        tilesMatrix[ level ][ x ] = {};
	    }
	
	    if ( !tilesMatrix[ level ][ x ][ y ] ) {
	        xMod    = ( numTiles.x + ( x % numTiles.x ) ) % numTiles.x;
	        yMod    = ( numTiles.y + ( y % numTiles.y ) ) % numTiles.y;
	        bounds  = tileSource.getTileBounds( level, xMod, yMod );
	        exists  = tileSource.tileExists( level, xMod, yMod );
	        url     = tileSource.getTileUrl( level, xMod, yMod );
	        context2D = tileSource.getContext2D ?
	            tileSource.getContext2D(level, xMod, yMod) : undefined;
	
	        bounds.x += ( x - xMod ) / numTiles.x;
	        bounds.y += (worldHeight / worldWidth) * (( y - yMod ) / numTiles.y);
	
	        tilesMatrix[ level ][ x ][ y ] = new $.Tile(
	            level,
	            x,
	            y,
	            bounds,
	            exists,
	            url,
	            context2D
	        );
	    }
	
	    tile = tilesMatrix[ level ][ x ][ y ];
	    tile.lastTouchTime = time;
	
	    return tile;
	}
	
	function loadTile( tiledImage, tile, time ) {
	    tile.loading = true;
	    tiledImage._imageLoader.addJob({
	        src: tile.url,
	        crossOriginPolicy: tiledImage.crossOriginPolicy,
	        callback: function( image, errorMsg ){
	            onTileLoad( tiledImage, tile, time, image, errorMsg );
	        },
	        abort: function() {
	            tile.loading = false;
	        }
	    });
	}
	
	function onTileLoad( tiledImage, tile, time, image, errorMsg ) {
	    if ( !image ) {
	        $.console.log( "Tile %s failed to load: %s - error: %s", tile, tile.url, errorMsg );
	        /**
	         * Triggered when a tile fails to load.
	         *
	         * @event tile-load-failed
	         * @memberof OpenSeadragon.Viewer
	         * @type {object}
	         * @property {OpenSeadragon.Tile} tile - The tile that failed to load.
	         * @property {OpenSeadragon.TiledImage} tiledImage - The tiled image the tile belongs to.
	         * @property {number} time - The time in milliseconds when the tile load began.
	         * @property {string} message - The error message.
	         */
	        tiledImage.viewer.raiseEvent("tile-load-failed", {tile: tile, tiledImage: tiledImage, time: time, message: errorMsg});
	        tile.loading = false;
	        tile.exists = false;
	        return;
	    }
	
	    if ( time < tiledImage.lastResetTime ) {
	        $.console.log( "Ignoring tile %s loaded before reset: %s", tile, tile.url );
	        tile.loading = false;
	        return;
	    }
	
	    var finish = function() {
	        var cutoff = Math.ceil( Math.log(
	            tiledImage.source.getTileWidth(tile.level) ) / Math.log( 2 ) );
	        setTileLoaded(tiledImage, tile, image, cutoff);
	    };
	
	    // Check if we're mid-update; this can happen on IE8 because image load events for
	    // cached images happen immediately there
	    if ( !tiledImage._midDraw ) {
	        finish();
	    } else {
	        // Wait until after the update, in case caching unloads any tiles
	        window.setTimeout( finish, 1);
	    }
	}
	
	function setTileLoaded(tiledImage, tile, image, cutoff) {
	    var increment = 0;
	
	    function getCompletionCallback() {
	        increment++;
	        return completionCallback;
	    }
	
	    function completionCallback() {
	        increment--;
	        if (increment === 0) {
	            tile.loading = false;
	            tile.loaded = true;
	            if (!tile.context2D) {
	                tiledImage._tileCache.cacheTile({
	                    image: image,
	                    tile: tile,
	                    cutoff: cutoff,
	                    tiledImage: tiledImage
	                });
	            }
	            tiledImage._needsDraw = true;
	        }
	    }
	
	    /**
	     * Triggered when a tile has just been loaded in memory. That means that the
	     * image has been downloaded and can be modified before being drawn to the canvas.
	     *
	     * @event tile-loaded
	     * @memberof OpenSeadragon.Viewer
	     * @type {object}
	     * @property {Image} image - The image of the tile.
	     * @property {OpenSeadragon.TiledImage} tiledImage - The tiled image of the loaded tile.
	     * @property {OpenSeadragon.Tile} tile - The tile which has been loaded.
	     * @property {function} getCompletionCallback - A function giving a callback to call
	     * when the asynchronous processing of the image is done. The image will be
	     * marked as entirely loaded when the callback has been called once for each
	     * call to getCompletionCallback.
	     */
	    tiledImage.viewer.raiseEvent("tile-loaded", {
	        tile: tile,
	        tiledImage: tiledImage,
	        image: image,
	        getCompletionCallback: getCompletionCallback
	    });
	    // In case the completion callback is never called, we at least force it once.
	    getCompletionCallback()();
	}
	
	function positionTile( tile, overlap, viewport, viewportCenter, levelVisibility, tiledImage ){
	    var boundsTL     = tile.bounds.getTopLeft();
	
	    boundsTL.x *= tiledImage._scaleSpring.current.value;
	    boundsTL.y *= tiledImage._scaleSpring.current.value;
	    boundsTL.x += tiledImage._xSpring.current.value;
	    boundsTL.y += tiledImage._ySpring.current.value;
	
	    var boundsSize   = tile.bounds.getSize();
	
	    boundsSize.x *= tiledImage._scaleSpring.current.value;
	    boundsSize.y *= tiledImage._scaleSpring.current.value;
	
	    var positionC    = viewport.pixelFromPointNoRotate(boundsTL, true),
	        positionT    = viewport.pixelFromPointNoRotate(boundsTL, false),
	        sizeC        = viewport.deltaPixelsFromPointsNoRotate(boundsSize, true),
	        sizeT        = viewport.deltaPixelsFromPointsNoRotate(boundsSize, false),
	        tileCenter   = positionT.plus( sizeT.divide( 2 ) ),
	        tileDistance = viewportCenter.distanceTo( tileCenter );
	
	    if ( !overlap ) {
	        sizeC = sizeC.plus( new $.Point( 1, 1 ) );
	    }
	
	    tile.position   = positionC;
	    tile.size       = sizeC;
	    tile.distance   = tileDistance;
	    tile.visibility = levelVisibility;
	}
	
	
	function blendTile( tiledImage, tile, x, y, level, levelOpacity, currentTime ){
	    var blendTimeMillis = 1000 * tiledImage.blendTime,
	        deltaTime,
	        opacity;
	
	    if ( !tile.blendStart ) {
	        tile.blendStart = currentTime;
	    }
	
	    deltaTime   = currentTime - tile.blendStart;
	    opacity     = blendTimeMillis ? Math.min( 1, deltaTime / ( blendTimeMillis ) ) : 1;
	
	    if ( tiledImage.alwaysBlend ) {
	        opacity *= levelOpacity;
	    }
	
	    tile.opacity = opacity;
	
	    tiledImage.lastDrawn.push( tile );
	
	    if ( opacity == 1 ) {
	        setCoverage( tiledImage.coverage, level, x, y, true );
	        tiledImage._hasOpaqueTile = true;
	    } else if ( deltaTime < blendTimeMillis ) {
	        return true;
	    }
	
	    return false;
	}
	
	/**
	 * @private
	 * @inner
	 * Returns true if the given tile provides coverage to lower-level tiles of
	 * lower resolution representing the same content. If neither x nor y is
	 * given, returns true if the entire visible level provides coverage.
	 *
	 * Note that out-of-bounds tiles provide coverage in this sense, since
	 * there's no content that they would need to cover. Tiles at non-existent
	 * levels that are within the image bounds, however, do not.
	 */
	function providesCoverage( coverage, level, x, y ) {
	    var rows,
	        cols,
	        i, j;
	
	    if ( !coverage[ level ] ) {
	        return false;
	    }
	
	    if ( x === undefined || y === undefined ) {
	        rows = coverage[ level ];
	        for ( i in rows ) {
	            if ( rows.hasOwnProperty( i ) ) {
	                cols = rows[ i ];
	                for ( j in cols ) {
	                    if ( cols.hasOwnProperty( j ) && !cols[ j ] ) {
	                        return false;
	                    }
	                }
	            }
	        }
	
	        return true;
	    }
	
	    return (
	        coverage[ level ][ x] === undefined ||
	        coverage[ level ][ x ][ y ] === undefined ||
	        coverage[ level ][ x ][ y ] === true
	    );
	}
	
	/**
	 * @private
	 * @inner
	 * Returns true if the given tile is completely covered by higher-level
	 * tiles of higher resolution representing the same content. If neither x
	 * nor y is given, returns true if the entire visible level is covered.
	 */
	function isCovered( coverage, level, x, y ) {
	    if ( x === undefined || y === undefined ) {
	        return providesCoverage( coverage, level + 1 );
	    } else {
	        return (
	             providesCoverage( coverage, level + 1, 2 * x, 2 * y ) &&
	             providesCoverage( coverage, level + 1, 2 * x, 2 * y + 1 ) &&
	             providesCoverage( coverage, level + 1, 2 * x + 1, 2 * y ) &&
	             providesCoverage( coverage, level + 1, 2 * x + 1, 2 * y + 1 )
	        );
	    }
	}
	
	/**
	 * @private
	 * @inner
	 * Sets whether the given tile provides coverage or not.
	 */
	function setCoverage( coverage, level, x, y, covers ) {
	    if ( !coverage[ level ] ) {
	        $.console.warn(
	            "Setting coverage for a tile before its level's coverage has been reset: %s",
	            level
	        );
	        return;
	    }
	
	    if ( !coverage[ level ][ x ] ) {
	        coverage[ level ][ x ] = {};
	    }
	
	    coverage[ level ][ x ][ y ] = covers;
	}
	
	/**
	 * @private
	 * @inner
	 * Resets coverage information for the given level. This should be called
	 * after every draw routine. Note that at the beginning of the next draw
	 * routine, coverage for every visible tile should be explicitly set.
	 */
	function resetCoverage( coverage, level ) {
	    coverage[ level ] = {};
	}
	
	/**
	 * @private
	 * @inner
	 * Determines whether the 'last best' tile for the area is better than the
	 * tile in question.
	 */
	function compareTiles( previousBest, tile ) {
	    if ( !previousBest ) {
	        return tile;
	    }
	
	    if ( tile.visibility > previousBest.visibility ) {
	        return tile;
	    } else if ( tile.visibility == previousBest.visibility ) {
	        if ( tile.distance < previousBest.distance ) {
	            return tile;
	        }
	    }
	
	    return previousBest;
	}
	
	function drawTiles( tiledImage, lastDrawn ) {
	    if (lastDrawn.length === 0) {
	        return;
	    }
	    var tile = lastDrawn[0];
	
	    var useSketch = tiledImage.opacity < 1 ||
	        (tiledImage.compositeOperation &&
	            tiledImage.compositeOperation !== 'source-over') ||
	        (!tiledImage._isBottomItem() && tile._hasTransparencyChannel());
	
	    var sketchScale;
	    var sketchTranslate;
	
	    var zoom = tiledImage.viewport.getZoom(true);
	    var imageZoom = tiledImage.viewportToImageZoom(zoom);
	    if (imageZoom > tiledImage.smoothTileEdgesMinZoom && !tiledImage.iOSDevice) {
	        // When zoomed in a lot (>100%) the tile edges are visible.
	        // So we have to composite them at ~100% and scale them up together.
	        // Note: Disabled on iOS devices per default as it causes a native crash
	        useSketch = true;
	        sketchScale = tile.getScaleForEdgeSmoothing();
	        sketchTranslate = tile.getTranslationForEdgeSmoothing(sketchScale,
	            tiledImage._drawer.getCanvasSize(false),
	            tiledImage._drawer.getCanvasSize(true));
	    }
	
	    var bounds;
	    if (useSketch) {
	        if (!sketchScale) {
	            // Except when edge smoothing, we only clean the part of the
	            // sketch canvas we are going to use for performance reasons.
	            bounds = tiledImage.viewport.viewportToViewerElementRectangle(
	                tiledImage.getClippedBounds(true))
	                .getIntegerBoundingBox()
	                .times($.pixelDensityRatio);
	        }
	        tiledImage._drawer._clear(true, bounds);
	    }
	
	    // When scaling, we must rotate only when blending the sketch canvas to avoid
	    // interpolation
	    if (tiledImage.viewport.degrees !== 0 && !sketchScale) {
	        tiledImage._drawer._offsetForRotation(tiledImage.viewport.degrees, useSketch);
	    }
	
	    var usedClip = false;
	    if ( tiledImage._clip ) {
	        tiledImage._drawer.saveContext(useSketch);
	
	        var box = tiledImage.imageToViewportRectangle(tiledImage._clip, true);
	        var clipRect = tiledImage._drawer.viewportToDrawerRectangle(box);
	        if (sketchScale) {
	            clipRect = clipRect.times(sketchScale);
	        }
	        if (sketchTranslate) {
	            clipRect = clipRect.translate(sketchTranslate);
	        }
	        tiledImage._drawer.setClip(clipRect, useSketch);
	
	        usedClip = true;
	    }
	
	    if ( tiledImage.placeholderFillStyle && tiledImage._hasOpaqueTile === false ) {
	        var placeholderRect = tiledImage._drawer.viewportToDrawerRectangle(tiledImage.getBounds(true));
	        if (sketchScale) {
	            placeholderRect = placeholderRect.times(sketchScale);
	        }
	        if (sketchTranslate) {
	            placeholderRect = placeholderRect.translate(sketchTranslate);
	        }
	
	        var fillStyle = null;
	        if ( typeof tiledImage.placeholderFillStyle === "function" ) {
	            fillStyle = tiledImage.placeholderFillStyle(tiledImage, tiledImage._drawer.context);
	        }
	        else {
	            fillStyle = tiledImage.placeholderFillStyle;
	        }
	
	        tiledImage._drawer.drawRectangle(placeholderRect, fillStyle, useSketch);
	    }
	
	    for (var i = lastDrawn.length - 1; i >= 0; i--) {
	        tile = lastDrawn[ i ];
	        tiledImage._drawer.drawTile( tile, tiledImage._drawingHandler, useSketch, sketchScale, sketchTranslate );
	        tile.beingDrawn = true;
	
	        if( tiledImage.viewer ){
	            /**
	             * <em>- Needs documentation -</em>
	             *
	             * @event tile-drawn
	             * @memberof OpenSeadragon.Viewer
	             * @type {object}
	             * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.
	             * @property {OpenSeadragon.TiledImage} tiledImage - Which TiledImage is being drawn.
	             * @property {OpenSeadragon.Tile} tile
	             * @property {?Object} userData - Arbitrary subscriber-defined object.
	             */
	            tiledImage.viewer.raiseEvent( 'tile-drawn', {
	                tiledImage: tiledImage,
	                tile: tile
	            });
	        }
	    }
	
	    if ( usedClip ) {
	        tiledImage._drawer.restoreContext( useSketch );
	    }
	
	    if (tiledImage.viewport.degrees !== 0 && !sketchScale) {
	        tiledImage._drawer._restoreRotationChanges(useSketch);
	    }
	
	    if (useSketch) {
	        var offsetForRotation = tiledImage.viewport.degrees !== 0 && sketchScale;
	        if (offsetForRotation) {
	            tiledImage._drawer._offsetForRotation(tiledImage.viewport.degrees, false);
	        }
	        tiledImage._drawer.blendSketch({
	            opacity: tiledImage.opacity,
	            scale: sketchScale,
	            translate: sketchTranslate,
	            compositeOperation: tiledImage.compositeOperation,
	            bounds: bounds
	        });
	        if (offsetForRotation) {
	            tiledImage._drawer._restoreRotationChanges(false);
	        }
	    }
	    drawDebugInfo( tiledImage, lastDrawn );
	}
	
	function drawDebugInfo( tiledImage, lastDrawn ) {
	    if( tiledImage.debugMode ) {
	        for ( var i = lastDrawn.length - 1; i >= 0; i-- ) {
	            var tile = lastDrawn[ i ];
	            try {
	                tiledImage._drawer.drawDebugInfo( tile, lastDrawn.length, i );
	            } catch(e) {
	                $.console.error(e);
	            }
	        }
	    }
	}
	
	}( OpenSeadragon ));
	
	/*
	 * OpenSeadragon - TileCache
	 *
	 * Copyright (C) 2009 CodePlex Foundation
	 * Copyright (C) 2010-2013 OpenSeadragon contributors
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 * - Redistributions of source code must retain the above copyright notice,
	 *   this list of conditions and the following disclaimer.
	 *
	 * - Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * - Neither the name of CodePlex Foundation nor the names of its
	 *   contributors may be used to endorse or promote products derived from
	 *   this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
	 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */
	
	(function( $ ){
	
	// private class
	var TileRecord = function( options ) {
	    $.console.assert( options, "[TileCache.cacheTile] options is required" );
	    $.console.assert( options.tile, "[TileCache.cacheTile] options.tile is required" );
	    $.console.assert( options.tiledImage, "[TileCache.cacheTile] options.tiledImage is required" );
	    this.tile = options.tile;
	    this.tiledImage = options.tiledImage;
	};
	
	// private class
	var ImageRecord = function(options) {
	    $.console.assert( options, "[ImageRecord] options is required" );
	    $.console.assert( options.image, "[ImageRecord] options.image is required" );
	    this._image = options.image;
	    this._tiles = [];
	};
	
	ImageRecord.prototype = {
	    destroy: function() {
	        this._image = null;
	        this._renderedContext = null;
	        this._tiles = null;
	    },
	
	    getImage: function() {
	        return this._image;
	    },
	
	    getRenderedContext: function() {
	        if (!this._renderedContext) {
	            var canvas = document.createElement( 'canvas' );
	            canvas.width = this._image.width;
	            canvas.height = this._image.height;
	            this._renderedContext = canvas.getContext('2d');
	            this._renderedContext.drawImage( this._image, 0, 0 );
	            //since we are caching the prerendered image on a canvas
	            //allow the image to not be held in memory
	            this._image = null;
	        }
	        return this._renderedContext;
	    },
	
	    setRenderedContext: function(renderedContext) {
	        $.console.error("ImageRecord.setRenderedContext is deprecated. " +
	                "The rendered context should be created by the ImageRecord " +
	                "itself when calling ImageRecord.getRenderedContext.");
	        this._renderedContext = renderedContext;
	    },
	
	    addTile: function(tile) {
	        $.console.assert(tile, '[ImageRecord.addTile] tile is required');
	        this._tiles.push(tile);
	    },
	
	    removeTile: function(tile) {
	        for (var i = 0; i < this._tiles.length; i++) {
	            if (this._tiles[i] === tile) {
	                this._tiles.splice(i, 1);
	                return;
	            }
	        }
	
	        $.console.warn('[ImageRecord.removeTile] trying to remove unknown tile', tile);
	    },
	
	    getTileCount: function() {
	        return this._tiles.length;
	    }
	};
	
	/**
	 * @class TileCache
	 * @memberof OpenSeadragon
	 * @classdesc Stores all the tiles displayed in a {@link OpenSeadragon.Viewer}.
	 * You generally won't have to interact with the TileCache directly.
	 * @param {Object} options - Configuration for this TileCache.
	 * @param {Number} [options.maxImageCacheCount] - See maxImageCacheCount in
	 * {@link OpenSeadragon.Options} for details.
	 */
	$.TileCache = function( options ) {
	    options = options || {};
	
	    this._maxImageCacheCount = options.maxImageCacheCount || $.DEFAULT_SETTINGS.maxImageCacheCount;
	    this._tilesLoaded = [];
	    this._imagesLoaded = [];
	    this._imagesLoadedCount = 0;
	};
	
	/** @lends OpenSeadragon.TileCache.prototype */
	$.TileCache.prototype = {
	    /**
	     * @returns {Number} The total number of tiles that have been loaded by
	     * this TileCache.
	     */
	    numTilesLoaded: function() {
	        return this._tilesLoaded.length;
	    },
	
	    /**
	     * Caches the specified tile, removing an old tile if necessary to stay under the
	     * maxImageCacheCount specified on construction. Note that if multiple tiles reference
	     * the same image, there may be more tiles than maxImageCacheCount; the goal is to keep
	     * the number of images below that number. Note, as well, that even the number of images
	     * may temporarily surpass that number, but should eventually come back down to the max specified.
	     * @param {Object} options - Tile info.
	     * @param {OpenSeadragon.Tile} options.tile - The tile to cache.
	     * @param {Image} options.image - The image of the tile to cache.
	     * @param {OpenSeadragon.TiledImage} options.tiledImage - The TiledImage that owns that tile.
	     * @param {Number} [options.cutoff=0] - If adding this tile goes over the cache max count, this
	     * function will release an old tile. The cutoff option specifies a tile level at or below which
	     * tiles will not be released.
	     */
	    cacheTile: function( options ) {
	        $.console.assert( options, "[TileCache.cacheTile] options is required" );
	        $.console.assert( options.tile, "[TileCache.cacheTile] options.tile is required" );
	        $.console.assert( options.tile.url, "[TileCache.cacheTile] options.tile.url is required" );
	        $.console.assert( options.tiledImage, "[TileCache.cacheTile] options.tiledImage is required" );
	
	        var cutoff = options.cutoff || 0;
	        var insertionIndex = this._tilesLoaded.length;
	
	        var imageRecord = this._imagesLoaded[options.tile.url];
	        if (!imageRecord) {
	            $.console.assert( options.image, "[TileCache.cacheTile] options.image is required to create an ImageRecord" );
	            imageRecord = this._imagesLoaded[options.tile.url] = new ImageRecord({
	                image: options.image
	            });
	
	            this._imagesLoadedCount++;
	        }
	
	        imageRecord.addTile(options.tile);
	        options.tile.cacheImageRecord = imageRecord;
	
	        // Note that just because we're unloading a tile doesn't necessarily mean
	        // we're unloading an image. With repeated calls it should sort itself out, though.
	        if ( this._imagesLoadedCount > this._maxImageCacheCount ) {
	            var worstTile       = null;
	            var worstTileIndex  = -1;
	            var worstTileRecord = null;
	            var prevTile, worstTime, worstLevel, prevTime, prevLevel, prevTileRecord;
	
	            for ( var i = this._tilesLoaded.length - 1; i >= 0; i-- ) {
	                prevTileRecord = this._tilesLoaded[ i ];
	                prevTile = prevTileRecord.tile;
	
	                if ( prevTile.level <= cutoff || prevTile.beingDrawn ) {
	                    continue;
	                } else if ( !worstTile ) {
	                    worstTile       = prevTile;
	                    worstTileIndex  = i;
	                    worstTileRecord = prevTileRecord;
	                    continue;
	                }
	
	                prevTime    = prevTile.lastTouchTime;
	                worstTime   = worstTile.lastTouchTime;
	                prevLevel   = prevTile.level;
	                worstLevel  = worstTile.level;
	
	                if ( prevTime < worstTime ||
	                   ( prevTime == worstTime && prevLevel > worstLevel ) ) {
	                    worstTile       = prevTile;
	                    worstTileIndex  = i;
	                    worstTileRecord = prevTileRecord;
	                }
	            }
	
	            if ( worstTile && worstTileIndex >= 0 ) {
	                this._unloadTile(worstTileRecord);
	                insertionIndex = worstTileIndex;
	            }
	        }
	
	        this._tilesLoaded[ insertionIndex ] = new TileRecord({
	            tile: options.tile,
	            tiledImage: options.tiledImage
	        });
	    },
	
	    /**
	     * Clears all tiles associated with the specified tiledImage.
	     * @param {OpenSeadragon.TiledImage} tiledImage
	     */
	    clearTilesFor: function( tiledImage ) {
	        $.console.assert(tiledImage, '[TileCache.clearTilesFor] tiledImage is required');
	        var tileRecord;
	        for ( var i = 0; i < this._tilesLoaded.length; ++i ) {
	            tileRecord = this._tilesLoaded[ i ];
	            if ( tileRecord.tiledImage === tiledImage ) {
	                this._unloadTile(tileRecord);
	                this._tilesLoaded.splice( i, 1 );
	                i--;
	            }
	        }
	    },
	
	    // private
	    getImageRecord: function(url) {
	        $.console.assert(url, '[TileCache.getImageRecord] url is required');
	        return this._imagesLoaded[url];
	    },
	
	    // private
	    _unloadTile: function(tileRecord) {
	        $.console.assert(tileRecord, '[TileCache._unloadTile] tileRecord is required');
	        var tile = tileRecord.tile;
	        var tiledImage = tileRecord.tiledImage;
	
	        tile.unload();
	        tile.cacheImageRecord = null;
	
	        var imageRecord = this._imagesLoaded[tile.url];
	        imageRecord.removeTile(tile);
	        if (!imageRecord.getTileCount()) {
	            imageRecord.destroy();
	            delete this._imagesLoaded[tile.url];
	            this._imagesLoadedCount--;
	        }
	
	        /**
	         * Triggered when a tile has just been unloaded from memory.
	         *
	         * @event tile-unloaded
	         * @memberof OpenSeadragon.Viewer
	         * @type {object}
	         * @property {OpenSeadragon.TiledImage} tiledImage - The tiled image of the unloaded tile.
	         * @property {OpenSeadragon.Tile} tile - The tile which has been unloaded.
	         */
	        tiledImage.viewer.raiseEvent("tile-unloaded", {
	            tile: tile,
	            tiledImage: tiledImage
	        });
	    }
	};
	
	}( OpenSeadragon ));
	
	/*
	 * OpenSeadragon - World
	 *
	 * Copyright (C) 2009 CodePlex Foundation
	 * Copyright (C) 2010-2013 OpenSeadragon contributors
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 * - Redistributions of source code must retain the above copyright notice,
	 *   this list of conditions and the following disclaimer.
	 *
	 * - Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * - Neither the name of CodePlex Foundation nor the names of its
	 *   contributors may be used to endorse or promote products derived from
	 *   this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
	 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
	 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
	 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
	 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */
	
	(function( $ ){
	
	/**
	 * @class World
	 * @memberof OpenSeadragon
	 * @extends OpenSeadragon.EventSource
	 * @classdesc Keeps track of all of the tiled images in the scene.
	 * @param {Object} options - World options.
	 * @param {OpenSeadragon.Viewer} options.viewer - The Viewer that owns this World.
	 **/
	$.World = function( options ) {
	    var _this = this;
	
	    $.console.assert( options.viewer, "[World] options.viewer is required" );
	
	    $.EventSource.call( this );
	
	    this.viewer = options.viewer;
	    this._items = [];
	    this._needsDraw = false;
	    this._autoRefigureSizes = true;
	    this._needsSizesFigured = false;
	    this._delegatedFigureSizes = function(event) {
	        if (_this._autoRefigureSizes) {
	            _this._figureSizes();
	        } else {
	            _this._needsSizesFigured = true;
	        }
	    };
	
	    this._figureSizes();
	};
	
	$.extend( $.World.prototype, $.EventSource.prototype, /** @lends OpenSeadragon.World.prototype */{
	    /**
	     * Add the specified item.
	     * @param {OpenSeadragon.TiledImage} item - The item to add.
	     * @param {Number} [options.index] - Index for the item. If not specified, goes at the top.
	     * @fires OpenSeadragon.World.event:add-item
	     * @fires OpenSeadragon.World.event:metrics-change
	     */
	    addItem: function( item, options ) {
	        $.console.assert(item, "[World.addItem] item is required");
	        $.console.assert(item instanceof $.TiledImage, "[World.addItem] only TiledImages supported at this time");
	
	        options = options || {};
	        if (options.index !== undefined) {
	            var index = Math.max(0, Math.min(this._items.length, options.index));
	            this._items.splice(index, 0, item);
	        } else {
	            this._items.push( item );
	        }
	
	        if (this._autoRefigureSizes) {
	            this._figureSizes();
	        } else {
	            this._needsSizesFigured = true;
	        }
	
	        this._needsDraw = true;
	
	        item.addHandler('bounds-change', this._delegatedFigureSizes);
	
	        /**
	         * Raised when an item is added to the World.
	         * @event add-item
	         * @memberOf OpenSeadragon.World
	         * @type {object}
	         * @property {OpenSeadragon.Viewer} eventSource - A reference to the World which raised the event.
	         * @property {OpenSeadragon.TiledImage} item - The item that has been added.
	         * @property {?Object} userData - Arbitrary subscriber-defined object.
	         */
	        this.raiseEvent( 'add-item', {
	            item: item
	        } );
	    },
	
	    /**
	     * Get the item at the specified index.
	     * @param {Number} index - The item's index.
	     * @returns {OpenSeadragon.TiledImage} The item at the specified index.
	     */
	    getItemAt: function( index ) {
	        $.console.assert(index !== undefined, "[World.getItemAt] index is required");
	        return this._items[ index ];
	    },
	
	    /**
	     * Get the index of the given item or -1 if not present.
	     * @param {OpenSeadragon.TiledImage} item - The item.
	     * @returns {Number} The index of the item or -1 if not present.
	     */
	    getIndexOfItem: function( item ) {
	        $.console.assert(item, "[World.getIndexOfItem] item is required");
	        return $.indexOf( this._items, item );
	    },
	
	    /**
	     * @returns {Number} The number of items used.
	     */
	    getItemCount: function() {
	        return this._items.length;
	    },
	
	    /**
	     * Change the index of a item so that it appears over or under others.
	     * @param {OpenSeadragon.TiledImage} item - The item to move.
	     * @param {Number} index - The new index.
	     * @fires OpenSeadragon.World.event:item-index-change
	     */
	    setItemIndex: function( item, index ) {
	        $.console.assert(item, "[World.setItemIndex] item is required");
	        $.console.assert(index !== undefined, "[World.setItemIndex] index is required");
	
	        var oldIndex = this.getIndexOfItem( item );
	
	        if ( index >= this._items.length ) {
	            throw new Error( "Index bigger than number of layers." );
	        }
	
	        if ( index === oldIndex || oldIndex === -1 ) {
	            return;
	        }
	
	        this._items.splice( oldIndex, 1 );
	        this._items.splice( index, 0, item );
	        this._needsDraw = true;
	
	        /**
	         * Raised when the order of the indexes has been changed.
	         * @event item-index-change
	         * @memberOf OpenSeadragon.World
	         * @type {object}
	         * @property {OpenSeadragon.World} eventSource - A reference to the World which raised the event.
	         * @property {OpenSeadragon.TiledImage} item - The item whose index has
	         * been changed
	         * @property {Number} previousIndex - The previous index of the item
	         * @property {Number} newIndex - The new index of the item
	         * @property {?Object} userData - Arbitrary subscriber-defined object.
	         */
	        this.raiseEvent( 'item-index-change', {
	            item: item,
	            previousIndex: oldIndex,
	            newIndex: index
	        } );
	    },
	
	    /**
	     * Remove an item.
	     * @param {OpenSeadragon.TiledImage} item - The item to remove.
	     * @fires OpenSeadragon.World.event:remove-item
	     * @fires OpenSeadragon.World.event:metrics-change
	     */
	    removeItem: function( item ) {
	        $.console.assert(item, "[World.removeItem] item is required");
	
	        var index = $.indexOf(this._items, item );
	        if ( index === -1 ) {
	            return;
	        }
	
	        item.removeHandler('bounds-change', this._delegatedFigureSizes);
	        item.destroy();
	        this._items.splice( index, 1 );
	        this._figureSizes();
	        this._needsDraw = true;
	        this._raiseRemoveItem(item);
	    },
	
	    /**
	     * Remove all items.
	     * @fires OpenSeadragon.World.event:remove-item
	     * @fires OpenSeadragon.World.event:metrics-change
	     */
	    removeAll: function() {
	        // We need to make sure any pending images are canceled so the world items don't get messed up
	        this.viewer._cancelPendingImages();
	        var item;
	        for (var i = 0; i < this._items.length; i++) {
	            item = this._items[i];
	            item.removeHandler('bounds-change', this._delegatedFigureSizes);
	            item.destroy();
	        }
	
	        var removedItems = this._items;
	        this._items = [];
	        this._figureSizes();
	        this._needsDraw = true;
	
	        for (i = 0; i < removedItems.length; i++) {
	            item = removedItems[i];
	            this._raiseRemoveItem(item);
	        }
	    },
	
	    /**
	     * Clears all tiles and triggers updates for all items.
	     */
	    resetItems: function() {
	        for ( var i = 0; i < this._items.length; i++ ) {
	            this._items[i].reset();
	        }
	    },
	
	    /**
	     * Updates (i.e. animates bounds of) all items.
	     */
	    update: function() {
	        var animated = false;
	        for ( var i = 0; i < this._items.length; i++ ) {
	            animated = this._items[i].update() || animated;
	        }
	
	        return animated;
	    },
	
	    /**
	     * Draws all items.
	     */
	    draw: function() {
	        for ( var i = 0; i < this._items.length; i++ ) {
	            this._items[i].draw();
	        }
	
	        this._needsDraw = false;
	    },
	
	    /**
	     * @returns {Boolean} true if any items need updating.
	     */
	    needsDraw: function() {
	        for ( var i = 0; i < this._items.length; i++ ) {
	            if ( this._items[i].needsDraw() ) {
	                return true;
	            }
	        }
	        return this._needsDraw;
	    },
	
	    /**
	     * @returns {OpenSeadragon.Rect} The smallest rectangle that encloses all items, in viewport coordinates.
	     */
	    getHomeBounds: function() {
	        return this._homeBounds.clone();
	    },
	
	    /**
	     * To facilitate zoom constraints, we keep track of the pixel density of the
	     * densest item in the World (i.e. the item whose content size to viewport size
	     * ratio is the highest) and save it as this "content factor".
	     * @returns {Number} the number of content units per viewport unit.
	     */
	    getContentFactor: function() {
	        return this._contentFactor;
	    },
	
	    /**
	     * As a performance optimization, setting this flag to false allows the bounds-change event handler
	     * on tiledImages to skip calculations on the world bounds. If a lot of images are going to be positioned in
	     * rapid succession, this is a good idea. When finished, setAutoRefigureSizes should be called with true
	     * or the system may behave oddly.
	     * @param {Boolean} [value] The value to which to set the flag.
	     */
	    setAutoRefigureSizes: function(value) {
	        this._autoRefigureSizes = value;
	        if (value & this._needsSizesFigured) {
	            this._figureSizes();
	            this._needsSizesFigured = false;
	        }
	    },
	
	    /**
	     * Arranges all of the TiledImages with the specified settings.
	     * @param {Object} options - Specifies how to arrange.
	     * @param {Boolean} [options.immediately=false] - Whether to animate to the new arrangement.
	     * @param {String} [options.layout] - See collectionLayout in {@link OpenSeadragon.Options}.
	     * @param {Number} [options.rows] - See collectionRows in {@link OpenSeadragon.Options}.
	     * @param {Number} [options.columns] - See collectionColumns in {@link OpenSeadragon.Options}.
	     * @param {Number} [options.tileSize] - See collectionTileSize in {@link OpenSeadragon.Options}.
	     * @param {Number} [options.tileMargin] - See collectionTileMargin in {@link OpenSeadragon.Options}.
	     * @fires OpenSeadragon.World.event:metrics-change
	     */
	    arrange: function(options) {
	        options = options || {};
	        var immediately = options.immediately || false;
	        var layout = options.layout || $.DEFAULT_SETTINGS.collectionLayout;
	        var rows = options.rows || $.DEFAULT_SETTINGS.collectionRows;
	        var columns = options.columns || $.DEFAULT_SETTINGS.collectionColumns;
	        var tileSize = options.tileSize || $.DEFAULT_SETTINGS.collectionTileSize;
	        var tileMargin = options.tileMargin || $.DEFAULT_SETTINGS.collectionTileMargin;
	        var increment = tileSize + tileMargin;
	        var wrap;
	        if (!options.rows && columns) {
	            wrap = columns;
	        } else {
	            wrap = Math.ceil(this._items.length / rows);
	        }
	        var x = 0;
	        var y = 0;
	        var item, box, width, height, position;
	
	        this.setAutoRefigureSizes(false);
	        for (var i = 0; i < this._items.length; i++) {
	            if (i && (i % wrap) === 0) {
	                if (layout === 'horizontal') {
	                    y += increment;
	                    x = 0;
	                } else {
	                    x += increment;
	                    y = 0;
	                }
	            }
	
	            item = this._items[i];
	            box = item.getBounds();
	            if (box.width > box.height) {
	                width = tileSize;
	            } else {
	                width = tileSize * (box.width / box.height);
	            }
	
	            height = width * (box.height / box.width);
	            position = new $.Point(x + ((tileSize - width) / 2),
	                y + ((tileSize - height) / 2));
	
	            item.setPosition(position, immediately);
	            item.setWidth(width, immediately);
	
	            if (layout === 'horizontal') {
	                x += increment;
	            } else {
	                y += increment;
	            }
	        }
	        this.setAutoRefigureSizes(true);
	    },
	
	    // private
	    _figureSizes: function() {
	        var oldHomeBounds = this._homeBounds ? this._homeBounds.clone() : null;
	        var oldContentSize = this._contentSize ? this._contentSize.clone() : null;
	        var oldContentFactor = this._contentFactor || 0;
	
	        if (!this._items.length) {
	            this._homeBounds = new $.Rect(0, 0, 1, 1);
	            this._contentSize = new $.Point(1, 1);
	            this._contentFactor = 1;
	        } else {
	            var item = this._items[0];
	            var bounds = item.getBounds();
	            this._contentFactor = item.getContentSize().x / bounds.width;
	            var clippedBounds = item.getClippedBounds();
	            var left = clippedBounds.x;
	            var top = clippedBounds.y;
	            var right = clippedBounds.x + clippedBounds.width;
	            var bottom = clippedBounds.y + clippedBounds.height;
	            for (var i = 1; i < this._items.length; i++) {
	                item = this._items[i];
	                bounds = item.getBounds();
	                this._contentFactor = Math.max(this._contentFactor,
	                    item.getContentSize().x / bounds.width);
	                clippedBounds = item.getClippedBounds();
	                left = Math.min(left, clippedBounds.x);
	                top = Math.min(top, clippedBounds.y);
	                right = Math.max(right, clippedBounds.x + clippedBounds.width);
	                bottom = Math.max(bottom, clippedBounds.y + clippedBounds.height);
	            }
	
	            this._homeBounds = new $.Rect(left, top, right - left, bottom - top);
	            this._contentSize = new $.Point(
	                this._homeBounds.width * this._contentFactor,
	                this._homeBounds.height * this._contentFactor);
	        }
	
	        if (this._contentFactor !== oldContentFactor ||
	            !this._homeBounds.equals(oldHomeBounds) ||
	            !this._contentSize.equals(oldContentSize)) {
	            /**
	             * Raised when the home bounds or content factor change.
	             * @event metrics-change
	             * @memberOf OpenSeadragon.World
	             * @type {object}
	             * @property {OpenSeadragon.World} eventSource - A reference to the World which raised the event.
	             * @property {?Object} userData - Arbitrary subscriber-defined object.
	             */
	            this.raiseEvent('metrics-change', {});
	        }
	    },
	
	    // private
	    _raiseRemoveItem: function(item) {
	        /**
	         * Raised when an item is removed.
	         * @event remove-item
	         * @memberOf OpenSeadragon.World
	         * @type {object}
	         * @property {OpenSeadragon.World} eventSource - A reference to the World which raised the event.
	         * @property {OpenSeadragon.TiledImage} item - The item's underlying item.
	         * @property {?Object} userData - Arbitrary subscriber-defined object.
	         */
	        this.raiseEvent( 'remove-item', { item: item } );
	    }
	});
	
	}( OpenSeadragon ));
	
	//# sourceMappingURL=openseadragon.js.map

/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {/* REACT HOT LOADER */ if (true) { (function () { var ReactHotAPI = __webpack_require__(2), RootInstanceProvider = __webpack_require__(10), ReactMount = __webpack_require__(12), React = __webpack_require__(98); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {
	
	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(98);
	
	var _react2 = _interopRequireDefault(_react);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var OpenSeadragonNav = function (_React$Component) {
	  _inherits(OpenSeadragonNav, _React$Component);
	
	  function OpenSeadragonNav(props) {
	    _classCallCheck(this, OpenSeadragonNav);
	
	    var _this = _possibleConstructorReturn(this, (OpenSeadragonNav.__proto__ || Object.getPrototypeOf(OpenSeadragonNav)).call(this, props));
	
	    _this.handleChange = _this.handleChange.bind(_this);
	    return _this;
	  }
	
	  _createClass(OpenSeadragonNav, [{
	    key: "handleChange",
	    value: function handleChange(e, target) {
	      this.props.viewer.goToPage(e.target.value);
	      this.props.pageHandler(e.target.value, this.props.viewer);
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _props = this.props,
	          tocs = _props.tocs,
	          id = _props.id;
	
	      if (tocs.length > 1) {
	        return _react2.default.createElement(
	          "div",
	          { className: "row image-nav" },
	          _react2.default.createElement(
	            "ul",
	            { className: "nav nav-pills" },
	            _react2.default.createElement(
	              "li",
	              null,
	              _react2.default.createElement(
	                "div",
	                { className: "toc-select" },
	                _react2.default.createElement(
	                  "label",
	                  { htmlFor: "toc" },
	                  "Table of Contents:"
	                ),
	                _react2.default.createElement(
	                  "select",
	                  { name: "toc", onChange: this.handleChange },
	                  tocs.map(function (toc, i) {
	                    var page = i + 1;
	                    if (id == i) {
	                      return _react2.default.createElement(
	                        "option",
	                        { value: i, key: i, selected: "selected" },
	                        page,
	                        ". ",
	                        toc
	                      );
	                    } else {
	                      return _react2.default.createElement(
	                        "option",
	                        { value: i, key: i },
	                        page,
	                        ". ",
	                        toc
	                      );
	                    }
	                  })
	                )
	              )
	            )
	          )
	        );
	      } else {
	        return _react2.default.createElement("span", null);
	      }
	    }
	  }]);
	
	  return OpenSeadragonNav;
	}(_react2.default.Component);
	
	exports.default = OpenSeadragonNav;
	
	
	var propTypes = {
	  tocs: _react2.default.PropTypes.array,
	  id: _react2.default.PropTypes.number.isRequired,
	  viewer: _react2.default.PropTypes.object,
	  pageHandler: _react2.default.PropTypes.func
	};
	
	OpenSeadragonNav.propTypes = propTypes;
	
	/* REACT HOT LOADER */ }).call(this); } finally { if (true) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = __webpack_require__(101); if (makeExportsHot(module, __webpack_require__(98))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "react-openseadragon-nav.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)(module)))

/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {/* REACT HOT LOADER */ if (true) { (function () { var ReactHotAPI = __webpack_require__(2), RootInstanceProvider = __webpack_require__(10), ReactMount = __webpack_require__(12), React = __webpack_require__(98); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {
	
	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	exports.default = routeThroughBrowser;
	
	var _react = __webpack_require__(98);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactRouterDom = __webpack_require__(104);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	function routeThroughBrowser(WrappedComponent) {
	  return function (_React$Component) {
	    _inherits(RouteThroughBrowser, _React$Component);
	
	    function RouteThroughBrowser() {
	      _classCallCheck(this, RouteThroughBrowser);
	
	      return _possibleConstructorReturn(this, (RouteThroughBrowser.__proto__ || Object.getPrototypeOf(RouteThroughBrowser)).apply(this, arguments));
	    }
	
	    _createClass(RouteThroughBrowser, [{
	      key: 'render',
	      value: function render() {
	        return _react2.default.createElement(
	          _reactRouterDom.HashRouter,
	          { basename: this.props.basename },
	          _react2.default.createElement(WrappedComponent, _extends({}, this.props, this.state))
	        );
	      }
	    }]);
	
	    return RouteThroughBrowser;
	  }(_react2.default.Component);
	}
	
	/* REACT HOT LOADER */ }).call(this); } finally { if (true) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = __webpack_require__(101); if (makeExportsHot(module, __webpack_require__(98))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error("Cannot apply hot update to " + "react-router.js" + ": " + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)(module)))

/***/ }
/******/ ])
});
;
//# sourceMappingURL=react-openseadragon.js.map